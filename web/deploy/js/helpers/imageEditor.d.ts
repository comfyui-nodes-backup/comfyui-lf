import { KulButtonEventPayload, KulCanvasEventPayload, KulImageviewerEventPayload, KulSliderEventPayload, KulTextfieldEventPayload, KulToggleEventPayload } from '../types/ketchup-lite/components';
import { KulDataColumn, KulDataDataset, KulDataNode } from '../types/ketchup-lite/managers/kul-data/kul-data-declarations';
import { ImageEditorActionButtons, ImageEditorControlConfig, ImageEditorSliderConfig, ImageEditorState, ImageEditorStatus, ImageEditorTextfieldConfig, ImageEditorToggleConfig } from '../types/widgets/imageEditor';
export declare const EV_HANDLERS: {
    button: (state: ImageEditorState, e: CustomEvent<KulButtonEventPayload>) => Promise<void>;
    canvas: (state: ImageEditorState, e: CustomEvent<KulCanvasEventPayload>) => Promise<void>;
    imageviewer: (state: ImageEditorState, e: CustomEvent<KulImageviewerEventPayload>) => Promise<void>;
    slider: (state: ImageEditorState, e: CustomEvent<KulSliderEventPayload>) => Promise<void>;
    textfield: (state: ImageEditorState, e: CustomEvent<KulTextfieldEventPayload>) => Promise<void>;
    toggle: (state: ImageEditorState, e: CustomEvent<KulToggleEventPayload>) => Promise<void>;
};
export declare const apiCall: (state: ImageEditorState, addSnapshot: boolean) => Promise<void>;
export declare const refreshValues: (state: ImageEditorState, addSnapshot?: boolean) => Promise<void>;
export declare const prepSettings: (state: ImageEditorState, node: KulDataNode) => void;
export declare const createSlider: (state: ImageEditorState, data: ImageEditorSliderConfig) => HTMLKulSliderElement;
export declare const createTextfield: (state: ImageEditorState, data: ImageEditorTextfieldConfig) => HTMLKulTextfieldElement;
export declare const createToggle: (state: ImageEditorState, data: ImageEditorToggleConfig) => HTMLKulToggleElement;
export declare const getPathColumn: (dataset: KulDataDataset) => KulDataColumn | null;
export declare const getStatusColumn: (dataset: KulDataDataset) => KulDataColumn | null;
export declare const parseLabel: (data: ImageEditorControlConfig) => string;
export declare const resetSettings: (settings: HTMLElement) => Promise<void>;
export declare const setGridStatus: (status: ImageEditorStatus, grid: HTMLDivElement, actionButtons: ImageEditorActionButtons) => void;
export declare const updateCb: (state: ImageEditorState, addSnapshot?: boolean) => Promise<void>;
