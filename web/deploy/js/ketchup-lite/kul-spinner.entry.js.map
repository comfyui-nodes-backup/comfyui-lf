{"file":"kul-spinner.entry.js","mappings":"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","names":[],"sources":["src/components/kul-spinner/kul-spinner-declarations.ts","src/components/kul-spinner/layouts/kul-spinner-layouts.tsx","src/components/kul-spinner/kul-spinner.scss?tag=kul-spinner&encapsulation=shadow","src/components/kul-spinner/kul-spinner.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\n\n//#region Events\nexport type KulSpinnerEvent = 'ready' | 'unmount';\nexport interface KulSpinnerEventPayload\n    extends KulEventPayload<'KulSpinner', KulSpinnerEvent> {}\n//#endregion\n\n//#region Props\nexport enum KulSpinnerProps {\n    kulActive = 'Specifies if the spinner is animating.',\n    kulBarVariant = 'Controls if the component displays as a bar or a spinner.',\n    kulDimensions = 'Defines the width and height of the spinner. In the bar variant, it specifies only the height.',\n    kulFader = 'Applies a blending modal over the component to darken or lighten the view, based on the theme.',\n    kulFaderTimeout = 'Duration needed for the fader to become active.',\n    kulFullScreen = 'Fills the entire viewport when enabled.',\n    kulLayout = 'Selects the spinner layout.',\n    kulStyle = 'Sets a custom style for the component.',\n    kulTimeout = 'Duration for the progress bar to fill up (in milliseconds).',\n}\nexport interface KulSpinnerPropsInterface {\n    kulActive: boolean;\n    kulBarVariant: boolean;\n    kulDimensions: string;\n    kulFader: boolean;\n    kulFaderTimeout: number;\n    kulFullScreen: boolean;\n    kulLayout: number;\n    kulStyle: string;\n    kulTimeout?: number;\n}\n//#endregion\n","import { h, VNode } from '@stencil/core';\n\n//#region Spinner configs\nexport const SPINNER_CONFIGS: {\n    [key: number]: { className: string; elements: () => VNode[] };\n} = {\n    7: {\n        className: 'spinner-v7',\n        elements: () =>\n            Array(6)\n                .fill(0)\n                .map(() => <div class=\"sk-spinner-v7-dot\"></div>),\n    },\n    9: {\n        className: 'spinner-v9',\n        elements: () => [\n            <div class=\"sk-spinner-v9-bounce1\"></div>,\n            <div class=\"sk-spinner-v9-bounce2\"></div>,\n        ],\n    },\n    10: {\n        className: 'spinner-v10',\n        elements: () => [\n            <div class=\"sk-spinner-v10-cube1\"></div>,\n            <div class=\"sk-spinner-v10-cube2\"></div>,\n        ],\n    },\n    12: {\n        className: 'spinner-v12',\n        elements: () => [\n            <div class=\"sk-spinner-v12-dot1\"></div>,\n            <div class=\"sk-spinner-v12-dot2\"></div>,\n        ],\n    },\n    13: {\n        className: 'spinner-v13',\n        elements: () =>\n            Array(9)\n                .fill(0)\n                .map((_, i) => (\n                    <div\n                        class={`sk-spinner-v13-cube sk-spinner-v13-cube${i + 1}`}\n                    ></div>\n                )),\n    },\n    14: {\n        className: 'spinner-v14',\n        elements: () =>\n            Array(12)\n                .fill(0)\n                .map((_, i) => (\n                    <div\n                        class={`sk-spinner-v14-circle${i + 1} sk-spinner-v14-circle`}\n                    ></div>\n                )),\n    },\n};\n//#endregion\n\n//#region Bar configs\nexport const BAR_SPINNER_CONFIGS: {\n    [key: number]: {\n        className: string;\n        elements: (progress?: number) => VNode[];\n    };\n} = {\n    1: {\n        className: 'spinner-bar-v1',\n        elements: () => [],\n    },\n    2: {\n        className: 'spinner-bar-v2',\n        elements: () => [],\n    },\n    3: {\n        className: 'spinner-bar-v3',\n        elements: (progress: number) => [\n            <div class=\"progress-bar\" style={{ width: `${progress}%` }}></div>,\n        ],\n    },\n};\n//#endregion\n","@import 'styles/kul-spinner-main.scss';\n@import 'styles/kul-spinner-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n    Watch,\n} from '@stencil/core';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { GenericObject } from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulSpinnerEvent,\n    KulSpinnerEventPayload,\n    KulSpinnerProps,\n} from './kul-spinner-declarations';\nimport {\n    BAR_SPINNER_CONFIGS,\n    SPINNER_CONFIGS,\n} from './layouts/kul-spinner-layouts';\n\n@Component({\n    tag: 'kul-spinner',\n    styleUrl: 'kul-spinner.scss',\n    shadow: true,\n})\nexport class KulSpinner {\n    /**\n     * References the root HTML element of the component (<kul-spinner>).\n     */\n    @Element() rootElement: HTMLKulSpinnerElement;\n    //#region States\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * Progress percentage for the progress bar.\n     */\n    @State() kulProgress = 0;\n    //#endregion\n\n    //#region Props\n    /**\n     * Specifies if the spinner is animating.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulActive = false;\n    /**\n     * Controls if the component displays as a bar or a spinner.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulBarVariant = false;\n    /**\n     * Defines the width and height of the spinner. In the bar variant, it specifies only the height.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulDimensions = '';\n    /**\n     * Applies a blending modal over the component to darken or lighten the view, based on the theme.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulFader = false;\n    /**\n     * Duration needed for the fader to become active.\n     * @default 3500\n     */\n    @Prop({ mutable: true, reflect: true }) kulFaderTimeout = 3500;\n    /**\n     * Fills the entire viewport when enabled.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulFullScreen = false;\n    /**\n     * Selects the spinner layout.\n     * @default 1\n     */\n    @Prop({ mutable: true, reflect: true }) kulLayout = 1;\n    /**\n     * Sets a custom style for the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Duration for the progress bar to fill up (in milliseconds).\n     * @default undefined\n     */\n    @Prop({ mutable: true, reflect: true }) kulTimeout: number;\n    //#endregion\n\n    //#region Internal variables\n    #kulManager = kulManagerInstance();\n    #progressAnimationFrame: number;\n    //#endregion\n\n    //#region Watchers\n    @Watch('kulTimeout')\n    kulTimeoutChanged(newValue: number, oldValue: number) {\n        if (newValue !== oldValue && this.kulBarVariant) {\n            this.#startProgressBar();\n        }\n    }\n    @Watch('kulBarVariant')\n    kulBarVariantChanged(newValue: boolean) {\n        if (newValue && this.kulTimeout) {\n            this.#startProgressBar();\n        } else {\n            this.kulProgress = 0;\n            cancelAnimationFrame(this.#progressAnimationFrame);\n        }\n    }\n    //#endregion\n\n    //#region Event\n    @Event({\n        eventName: 'kul-spinner-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulSpinnerEventPayload>;\n    onKulEvent(e: Event | CustomEvent, eventType: KulSpinnerEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n        });\n    }\n    //#endregion\n\n    //#region Public methods\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulSpinnerProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n    //#endregion\n\n    //#region Private methods\n    #startProgressBar() {\n        this.kulProgress = 0;\n        const startTime = Date.now();\n        const duration = this.kulTimeout;\n\n        const updateProgress = () => {\n            const elapsed = Date.now() - startTime;\n            this.kulProgress = Math.min((elapsed / duration) * 100, 100);\n            if (this.kulProgress < 100) {\n                this.#progressAnimationFrame =\n                    requestAnimationFrame(updateProgress);\n            } else {\n                cancelAnimationFrame(this.#progressAnimationFrame);\n            }\n        };\n\n        this.#progressAnimationFrame = requestAnimationFrame(updateProgress);\n    }\n    //#endregion\n\n    //#region Lifecycle hooks\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n\n        if (this.kulBarVariant && this.kulTimeout) {\n            this.#startProgressBar();\n        }\n    }\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n    componentDidUpdate() {\n        const root = this.rootElement.shadowRoot;\n        if (root) {\n            root.querySelector('#loading-wrapper-master').classList.remove(\n                'loading-wrapper-big-wait'\n            );\n        }\n    }\n    componentDidRender() {\n        const root = this.rootElement.shadowRoot;\n\n        if (root) {\n            if (this.kulFader) {\n                setTimeout(() => {\n                    root.querySelector('#loading-wrapper-master').classList.add(\n                        'loading-wrapper-big-wait'\n                    );\n                }, this.kulFaderTimeout);\n            }\n        }\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n    render() {\n        let masterClass = '';\n        let wrapperClass = '';\n        let spinnerClass = '';\n        let spinnerEl: VNode[] = [];\n        let elStyle = undefined;\n\n        if (this.kulBarVariant) {\n            wrapperClass = 'loading-wrapper-master-bar';\n            const barConfig = BAR_SPINNER_CONFIGS[this.kulLayout];\n            if (barConfig) {\n                spinnerClass = barConfig.className;\n                spinnerEl = barConfig.elements(this.kulProgress);\n            } else {\n                spinnerClass = 'spinner-bar-v' + this.kulLayout;\n            }\n        } else {\n            masterClass += ' spinner-version';\n            wrapperClass = 'loading-wrapper-master-spinner';\n\n            const config = SPINNER_CONFIGS[this.kulLayout];\n            if (config) {\n                spinnerClass = config.className;\n                spinnerEl = config.elements();\n            } else {\n                spinnerClass = 'spinner-v' + this.kulLayout;\n            }\n        }\n\n        if (!this.kulFullScreen) {\n            elStyle = {\n                height: '100%',\n                width: '100%',\n            };\n        }\n\n        if (this.kulDimensions) {\n            elStyle = {\n                ...elStyle,\n                fontSize: this.kulDimensions,\n            };\n        } else if (!this.kulBarVariant) {\n            elStyle = {\n                ...elStyle,\n                fontSize: '16px',\n            };\n        } else {\n            elStyle = {\n                ...elStyle,\n                fontSize: '3px',\n            };\n        }\n\n        return (\n            <Host style={elStyle}>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID} style={elStyle}>\n                    <div\n                        id=\"loading-wrapper-master\"\n                        class={masterClass}\n                        style={elStyle}\n                    >\n                        <div id={wrapperClass} style={elStyle}>\n                            <div class={spinnerClass}>{spinnerEl}</div>\n                        </div>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n        cancelAnimationFrame(this.#progressAnimationFrame);\n    }\n    //#endregion\n}\n"],"version":3}