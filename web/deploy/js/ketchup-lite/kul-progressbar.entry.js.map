{"file":"kul-progressbar.entry.js","mappings":"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","names":[],"sources":["src/components/kul-progressbar/kul-progressbar-declarations.ts","src/components/kul-progressbar/kul-progressbar.scss?tag=kul-progressbar&encapsulation=shadow","src/components/kul-progressbar/kul-progressbar.tsx"],"sourcesContent":["export type KulProgressbarEvent = 'ready';\nexport enum KulProgressbarProps {\n    kulCenteredLabel = \"Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.\",\n    kulIcon = 'Specifies an icon to replace the label.',\n    kulIsRadial = 'Radial version.',\n    kulLabel = \"Specifies a text for the bar's label.\",\n    kulShowLabel = \"Flag to show or hide the progress bar's label.\",\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'The current value the progress bar must display.',\n}\nexport interface KulProgressbarPropsInterface {\n    kulCenteredLabel?: boolean;\n    kulIcon?: string;\n    kulIsRadial?: boolean;\n    kulLabel?: string;\n    kulShowLabel?: boolean;\n    kulStyle?: string;\n    kulValue?: number;\n}\n","@import 'styles/kul-progressbar-main.scss';\n@import 'styles/kul-progressbar-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    getAssetPath,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulProgressbarEvent,\n    KulProgressbarProps,\n} from './kul-progressbar-declarations';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { GenericObject, KulEventPayload } from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\n\n@Component({\n    tag: 'kul-progressbar',\n    styleUrl: 'kul-progressbar.scss',\n    shadow: true,\n})\nexport class KulProgressbar {\n    /**\n     * References the root HTML element of the component (<kul-progressbar>).\n     */\n    @Element() rootElement: HTMLKulProgressbarElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.\n     * @default false\n     */\n    @Prop({ reflect: true }) kulCenteredLabel = false;\n    /**\n     * Specifies an icon to replace the label.\n     * @default \"\"\n     */\n    @Prop() kulIcon = '';\n    /**\n     * Radial version.\n     * @default false\n     */\n    @Prop({ reflect: true }) kulIsRadial = false;\n    /**\n     * Specifies a text for the bar's label.\n     * @default \"\"\n     */\n    @Prop() kulLabel = '';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle = '';\n    /**\n     * The current value the progress bar must display.\n     * @default 0\n     */\n    @Prop() kulValue = 0;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-progressbar-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulProgressbarEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Retrieves the debug information reflecting the current state of the component.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves to a KulDebugComponentInfo object containing debug information.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Retrieves the properties of the component, with optional descriptions.\n     * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n     * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulProgressbarProps, descriptions);\n    }\n    /**\n     * Triggers a re-render of the component to reflect any state changes.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #prepIcon() {\n        const path = getAssetPath(`./assets/svg/${this.kulIcon}.svg`);\n        const style = {\n            mask: `url('${path}') no-repeat center`,\n            webkitMask: `url('${path}') no-repeat center`,\n        };\n        return <div class=\"progress-bar__icon\" style={style}></div>;\n    }\n\n    #prepLabel() {\n        const label: VNode[] = this.kulLabel\n            ? [<div class=\"progress-bar__text\">{this.kulLabel}</div>]\n            : [\n                  <div class=\"progress-bar__text\">{this.kulValue}</div>,\n                  <div class=\"progress-bar__mu\">%</div>,\n              ];\n        return (\n            <div class=\"progress-bar__label\">\n                {this.kulIcon && this.#prepIcon()}\n                {label}\n            </div>\n        );\n    }\n\n    #prepProgressBar() {\n        return (\n            <div class={'progress-bar'}>\n                <div class=\"progress-bar__percentage\">{this.#prepLabel()}</div>\n            </div>\n        );\n    }\n\n    #prepRadialBar() {\n        return (\n            <div class={'progress-bar'}>\n                {this.#prepLabel()}\n                <div\n                    class={`pie ${this.kulValue ? 'has-value' : ''}  ${this.kulValue > 50 ? 'half-full' : 'half-empty'}`}\n                >\n                    <div class=\"left-side half-circle\"></div>\n                    <div class=\"right-side half-circle\"></div>\n                </div>\n                <div class=\"progress-bar__track\"></div>\n            </div>\n        );\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const style = {\n            ['--kul_progressbar_percentage_width']: `${this.kulValue}%`,\n            ['--kul_progressbar_transform']: `rotate(${this.kulValue * 3.6}deg)`,\n        };\n\n        return (\n            <Host>\n                {this.kulStyle && (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                )}\n                <div id={KUL_WRAPPER_ID} style={style}>\n                    {this.kulIsRadial\n                        ? this.#prepRadialBar()\n                        : this.#prepProgressBar()}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}