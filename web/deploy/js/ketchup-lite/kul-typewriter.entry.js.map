{"file":"kul-typewriter.entry.js","mappings":"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","names":[],"sources":["src/components/kul-typewriter/kul-typewriter-declarations.ts","src/components/kul-typewriter/kul-typewriter.scss?tag=kul-typewriter&encapsulation=shadow","src/components/kul-typewriter/kul-typewriter.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulTypewriterEvent = 'ready' | 'unmount';\nexport interface KulTypewriterEventPayload\n    extends KulEventPayload<'KulTypewriter', KulTypewriterEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulTypewriterProps {\n    kulCursor = 'Enables or disables the blinking cursor.',\n    kulDeleteSpeed = 'Sets the deleting speed in milliseconds.',\n    kulLoop = 'Enables or disables looping of the text.',\n    kulPause = 'Sets the duration of the pause after typing a complete text.',\n    kulSpeed = 'Sets the typing speed in milliseconds.',\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'Sets the text or array of texts to display with the typewriter effect.',\n}\nexport interface KulTypewriterPropsInterface {\n    kulCursor?: boolean;\n    kulDeleteSpeed?: number;\n    kulLoop?: boolean;\n    kulPause?: number;\n    kulSpeed?: number;\n    kulStyle?: string;\n    kulValue?: KulTypewriterValue;\n}\nexport type KulTypewriterValue = string | string[];\n","@import 'styles/kul-typewriter-main.scss';\n@import 'styles/kul-typewriter-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Fragment, Method } from '@stencil/core/internal';\nimport { GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulTypewriterEvent,\n    KulTypewriterEventPayload,\n    KulTypewriterProps,\n    KulTypewriterValue,\n} from './kul-typewriter-declarations';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\n\n@Component({\n    tag: 'kul-typewriter',\n    styleUrl: 'kul-typewriter.scss',\n    shadow: true,\n})\nexport class KulTypewriter {\n    /**\n     * References the root HTML element of the component (<kul-typewriter>).\n     */\n    @Element() rootElement: HTMLKulTypewriterElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The current text being displayed as it types.\n     */\n    @State() displayedText = '';\n    /**\n     * Controls whether the component is in the process of deleting text.\n     */\n    @State() isDeleting = false;\n    /**\n     * Tracks the current index of the text array.\n     */\n    @State() currentTextIndex = 0;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Enables or disables the blinking cursor.\n     * @default true\n     */\n    @Prop({ mutable: true }) kulCursor = true;\n    /**\n     * Sets the deleting speed in milliseconds.\n     * @default 50\n     */\n    @Prop({ mutable: true }) kulDeleteSpeed = 50;\n    /**\n     * Enables or disables looping of the text.\n     * @default false\n     */\n    @Prop({ mutable: true }) kulLoop = false;\n    /**\n     * Sets the duration of the pause after typing a complete text.\n     * @default 1000\n     */\n    @Prop({ mutable: true }) kulPause = 500;\n    /**\n     * Sets the typing speed in milliseconds.\n     * @default 100\n     */\n    @Prop({ mutable: true }) kulSpeed = 50;\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true }) kulStyle = '';\n    /**\n     * Sets the text or array of texts to display with the typewriter effect.\n     * @default \"\"\n     */\n    @Prop({ mutable: true }) kulValue: KulTypewriterValue = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n    #timeout: NodeJS.Timeout;\n    #texts: string[] = [];\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes the component's events.\n     */\n    @Event({\n        eventName: 'kul-typewriter-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulTypewriterEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulTypewriterEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*                 W a t c h e r s                 */\n    /*-------------------------------------------------*/\n\n    @Watch('kulValue')\n    handleKulValueChange() {\n        this.initializeTexts();\n        this.resetTyping();\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulTypewriterProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    private initializeTexts() {\n        this.#texts = Array.isArray(this.kulValue)\n            ? this.kulValue\n            : [this.kulValue];\n    }\n\n    private startTyping() {\n        const currentText = this.#texts[this.currentTextIndex] || '';\n\n        if (this.isDeleting) {\n            this.displayedText = currentText.substring(\n                0,\n                this.displayedText.length - 1\n            );\n        } else {\n            this.displayedText = currentText.substring(\n                0,\n                this.displayedText.length + 1\n            );\n        }\n\n        if (!this.isDeleting && this.displayedText === currentText) {\n            this.#timeout = setTimeout(() => {\n                if (this.kulLoop) this.isDeleting = true;\n            }, this.kulPause);\n        } else if (this.isDeleting && this.displayedText === '') {\n            this.isDeleting = false;\n            this.currentTextIndex =\n                (this.currentTextIndex + 1) % this.#texts.length;\n        } else {\n            const delay = this.isDeleting ? this.kulDeleteSpeed : this.kulSpeed;\n            this.#timeout = setTimeout(() => this.startTyping(), delay);\n        }\n    }\n\n    private resetTyping() {\n        clearTimeout(this.#timeout);\n        this.displayedText = '';\n        this.isDeleting = false;\n        this.currentTextIndex = 0;\n        this.startTyping();\n    }\n\n    #prepText() {\n        return (\n            <Fragment>\n                <span>{this.displayedText}</span>\n                {this.kulCursor ? <span class=\"cursor\">|</span> : null}\n            </Fragment>\n        );\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.initializeTexts();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.startTyping();\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>{this.#prepText()}</div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n        clearTimeout(this.#timeout);\n    }\n}\n"],"version":3}