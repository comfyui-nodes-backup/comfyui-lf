{"file":"kul-textfield.entry.js","mappings":"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","names":[],"sources":["src/components/kul-textfield/kul-textfield-declarations.ts","src/components/kul-textfield/kul-textfield.scss?tag=kul-textfield&encapsulation=shadow","src/components/kul-textfield/kul-textfield.tsx"],"sourcesContent":["import { GenericObject, KulEventPayload } from \"../../types/GenericTypes\";\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulTextfieldEvent =\n  | \"blur\"\n  | \"change\"\n  | \"click\"\n  | \"focus\"\n  | \"input\"\n  | \"ready\"\n  | \"unmount\";\nexport interface KulTextfieldEventPayload\n  extends KulEventPayload<\"KulTextfield\", KulTextfieldEvent> {\n  inputValue?: string;\n  value?: string;\n}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulTextfieldProps {\n  kulDisabled = \"Enables or disables the text field to prevent user interaction.\",\n  kulFullWidth = \"Applies a full-width styling to the text field, making it occupy all available horizontal space.\",\n  kulHelper = \"Specifies helper text to display alongside the text field.\",\n  kulHtmlAttributes = \"Allows customization of the input or textarea element through additional HTML attributes.\",\n  kulIcon = \"Defines the icon to be displayed within the text field.\",\n  kulLabel = \"Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected.\",\n  kulStyle = \"Accepts custom CSS styles to apply directly to the text field component.\",\n  kulStyling = \"Determines the overall styling theme of the text field, affecting its shape and border.\",\n  kulTrailingIcon = \"Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.\",\n  kulValue = \"Initializes the text field with a default value when the component is first rendered.\",\n}\nexport interface KulTextfieldPropsInterface {\n  kulDisabled?: boolean;\n  kulFullWidth?: boolean;\n  kulHelper?: KulTextfieldHelper;\n  kulHtmlAttributes?: GenericObject;\n  kulIcon?: string;\n  kulLabel?: string;\n  kulStyle?: string;\n  kulStyling?: KulTextfieldStyling;\n  kulTrailingIcon?: boolean;\n  kulValue?: string;\n}\nexport interface KulTextfieldHelper {\n  showWhenFocused?: boolean;\n  value: string;\n}\nexport type KulTextfieldStyling = \"flat\" | \"outlined\" | \"raised\" | \"textarea\";\n/*-------------------------------------------------*/\n/*                    S t a t e                    */\n/*-------------------------------------------------*/\nexport type KulTextfieldStatus =\n  | \"disabled\"\n  | \"filled\"\n  | \"focused\"\n  | \"full-width\"\n  | \"has-icon\"\n  | \"has-label\";\n","@import \"./styles/kul-textfield-main.scss\";\n@import \"./styles/kul-textfield-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  getAssetPath,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n} from \"@stencil/core\";\n\nimport {\n  KulTextfieldEvent,\n  KulTextfieldEventPayload,\n  KulTextfieldHelper,\n  KulTextfieldProps,\n  KulTextfieldStatus,\n  KulTextfieldStyling,\n} from \"./kul-textfield-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { GenericObject, KulDataCyAttributes } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-textfield\",\n  styleUrl: \"kul-textfield.scss\",\n  shadow: true,\n})\nexport class KulTextfield {\n  /**\n   * References the root HTML element of the component (<kul-textfield>).\n   */\n  @Element() rootElement: HTMLKulTextfieldElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * UI Status of the text field.\n   */\n  @State() status: Set<KulTextfieldStatus> = new Set();\n  /**\n   * Value of the text field.\n   */\n  @State() value = \"\";\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Enables or disables the text field to prevent user interaction.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n  /**\n   * Applies a full-width styling to the text field, making it occupy all available horizontal space.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulFullWidth = false;\n  /**\n   * Specifies helper text to display alongside the text field.\n   * Helper text can provide additional context or instructions to the user.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulHelper: KulTextfieldHelper = null;\n  /**\n   * Allows customization of the input or textarea element through additional HTML attributes.\n   * This can include attributes like 'readonly', 'placeholder', etc., to further customize the behavior or appearance of the input.\n   * @default {}\n   */\n  @Prop({ mutable: true, reflect: true }) kulHtmlAttributes: GenericObject = {};\n  /**\n   * Defines the icon to be displayed within the text field.\n   * Icons can indicate actions such as search, clear, or provide visual cues related to the input's purpose.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulIcon = \"\";\n  /**\n   * Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected.\n   * Labels are especially important for screen readers and users navigating with keyboard-only controls.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulLabel = \"\";\n  /**\n   * Accepts custom CSS styles to apply directly to the text field component.\n   * This allows for fine-grained control over the appearance of the component beyond predefined styling options.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * Determines the overall styling theme of the text field, affecting its shape and border.\n   * Options include 'default', 'outlined', or 'textarea', each offering a distinct visual presentation.\n   * @default \"raised\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyling: KulTextfieldStyling =\n    \"raised\";\n  /**\n   * Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulTrailingIcon = false;\n  /**\n   * Initializes the text field with a default value when the component is first rendered.\n   * This can be used to pre-fill forms or set a starting point for user input.\n   * @default \"\"\n   */\n  @Prop({ mutable: false }) kulValue = \"\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #hasOutline: boolean;\n  #input: HTMLInputElement | HTMLTextAreaElement;\n  #kulManager = kulManagerInstance();\n  #maxLength: number;\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-textfield-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulTextfieldEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulTextfieldEvent) {\n    const target = e.target as HTMLInputElement;\n    const inputValue = target?.value;\n    switch (eventType) {\n      case \"blur\":\n        this.status.delete(\"focused\");\n        this.status = new Set(this.status);\n        break;\n      case \"focus\":\n        this.status.add(\"focused\");\n        this.status = new Set(this.status);\n        break;\n    }\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n      inputValue,\n      value: this.value,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's props values.\n   * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n   * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulTextfieldProps, descriptions);\n  }\n  /**\n   * Used to retrieve the component's current state.\n   * @returns {Promise<string>} Promise resolved with the current state of the component.\n   */\n  @Method()\n  async getValue(): Promise<string> {\n    return this.value;\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Blurs the input element.\n   */\n  @Method()\n  async setBlur(): Promise<void> {\n    this.#input.blur();\n  }\n  /**\n   * Focuses the input element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    this.#input.focus();\n  }\n  /**\n   * Sets the component's state.\n   * @param {string} value - The new state to be set on the component.\n   * @returns {Promise<void>}\n   */\n  @Method()\n  async setValue(value: string): Promise<void> {\n    this.#updateState(value);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #updateState(\n    value: string,\n    e: CustomEvent<unknown> | Event = new CustomEvent(\"change\"),\n  ) {\n    if (!this.kulDisabled) {\n      this.value = value;\n      this.onKulEvent(e, \"change\");\n    }\n  }\n\n  #outlineCheck() {\n    return this.kulStyling === \"outlined\" || this.kulStyling === \"textarea\";\n  }\n\n  #prepCounter() {\n    if (!this.#maxLength) {\n      return;\n    }\n\n    return (\n      <div class=\"textfield__character-counter\">\n        '0 / ' + {this.#maxLength.toString()}\n      </div>\n    );\n  }\n\n  #prepHelper() {\n    if (!this.kulHelper) {\n      return;\n    }\n\n    const classList: Record<string, boolean> = {\n      \"textfield__helper-text\": true,\n      \"textfield__helper-text--persistent\": !this.kulHelper.showWhenFocused,\n    };\n    return (\n      <div class=\"textfield__helper-line\">\n        <div class={classList}>{this.kulHelper.value}</div>\n        {this.kulStyling !== \"textarea\" ? this.#prepCounter() : undefined}\n      </div>\n    );\n  }\n\n  #prepIcon() {\n    if (!this.kulIcon) {\n      return;\n    }\n\n    const path = getAssetPath(`./assets/svg/${this.kulIcon}.svg`);\n    const style = {\n      mask: `url('${path}') no-repeat center`,\n      webkitMask: `url('${path}') no-repeat center`,\n    };\n    return <div class=\"textfield__icon\" onClick={() => {}} style={style}></div>;\n  }\n\n  #prepInput() {\n    return (\n      <input\n        {...this.kulHtmlAttributes}\n        class=\"textfield__input\"\n        data-cy={KulDataCyAttributes.INPUT}\n        disabled={this.kulDisabled}\n        onBlur={(e) => {\n          this.onKulEvent(e, \"blur\");\n        }}\n        onChange={(e) => {\n          this.#updateState((e.currentTarget as HTMLInputElement).value);\n        }}\n        onClick={(e) => {\n          this.onKulEvent(e, \"click\");\n        }}\n        onFocus={(e) => {\n          this.onKulEvent(e, \"focus\");\n        }}\n        onInput={(e) => {\n          this.onKulEvent(e, \"input\");\n        }}\n        placeholder={this.kulFullWidth ? this.kulLabel : undefined}\n        ref={(el) => {\n          if (el) {\n            this.#input = el;\n          }\n        }}\n        value={this.value}\n      ></input>\n    );\n  }\n\n  #prepLabel() {\n    if (this.kulFullWidth) {\n      return;\n    }\n\n    const labelEl: VNode = (\n      <label class=\"textfield__label\" htmlFor=\"input\">\n        {this.kulLabel}\n      </label>\n    );\n    if (this.#hasOutline) {\n      return (\n        <div class=\"textfield__notched-outline\">\n          <div class=\"textfield__notched-outline__leading\"></div>\n          <div class=\"textfield__notched-outline__notch\">{labelEl}</div>\n          <div class=\"textfield__notched-outline__trailing\"></div>\n        </div>\n      );\n    }\n\n    return labelEl;\n  }\n\n  #prepRipple() {\n    return !this.#hasOutline && <span class=\"textfield__line-ripple\"></span>;\n  }\n\n  #prepTextArea() {\n    return (\n      <span class=\"textfield__resizer\">\n        <textarea\n          {...this.kulHtmlAttributes}\n          class=\"textfield__input\"\n          data-cy={KulDataCyAttributes.INPUT}\n          disabled={this.kulDisabled}\n          id=\"input\"\n          onBlur={(e) => {\n            this.onKulEvent(e, \"blur\");\n          }}\n          onChange={(e) => {\n            this.#updateState((e.currentTarget as HTMLInputElement).value);\n          }}\n          onClick={(e) => {\n            this.onKulEvent(e, \"click\");\n          }}\n          onFocus={(e) => {\n            this.onKulEvent(e, \"focus\");\n          }}\n          onInput={(e) => {\n            this.onKulEvent(e, \"input\");\n          }}\n          ref={(el) => {\n            if (el) {\n              this.#input = el;\n            }\n          }}\n          value={this.value}\n        ></textarea>\n      </span>\n    );\n  }\n\n  #updateStatus() {\n    const propertiesToUpdateStatus: {\n      prop: string;\n      status: KulTextfieldStatus;\n    }[] = [\n      { prop: \"value\", status: \"filled\" },\n      { prop: \"kulDisabled\", status: \"disabled\" },\n      { prop: \"kulFullWidth\", status: \"full-width\" },\n      { prop: \"kulIcon\", status: \"has-icon\" },\n      { prop: \"kulLabel\", status: \"has-label\" },\n    ];\n\n    propertiesToUpdateStatus.forEach(({ prop, status }) => {\n      const propName = prop as keyof KulTextfield;\n      const propValue = this[propName];\n      if (propValue) {\n        this.status.add(status);\n      } else {\n        this.status.delete(status);\n      }\n    });\n  }\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n    if (this.kulValue) {\n      this.status.add(\"filled\");\n      this.value = this.kulValue;\n    }\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n    this.#hasOutline = this.#outlineCheck();\n    this.#maxLength = this.kulHtmlAttributes?.maxLength as number;\n    this.#updateStatus();\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    const classList = [\"textfield\", \"textfield--\" + this.kulStyling];\n    this.status.forEach((status) => {\n      classList.push(`textfield--${status}`);\n    });\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class={classList.join(\" \")}>\n            {this.kulStyling === \"textarea\"\n              ? [\n                  this.#prepCounter(),\n                  this.#prepIcon(),\n                  this.#prepTextArea(),\n                  this.#prepLabel(),\n                ]\n              : [\n                  this.#prepIcon(),\n                  this.#prepInput(),\n                  this.#prepLabel(),\n                  this.#prepRipple(),\n                  this.kulFullWidth ? undefined : this.#prepHelper(),\n                ]}\n          </div>\n          {this.kulFullWidth ? this.#prepHelper() : undefined}\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}