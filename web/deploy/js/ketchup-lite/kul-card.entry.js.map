{"file":"kul-card.entry.js","mappings":"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","names":[],"sources":["src/components/kul-card/kul-card-declarations.ts","src/components/kul-card/helpers/shapes.tsx","src/components/kul-card/layouts/kul-card-layout-a.tsx","src/components/kul-card/kul-card.scss?tag=kul-card&encapsulation=shadow","src/components/kul-card/kul-card.tsx"],"sourcesContent":["import { KulDataDataset } from '../../components';\n\nexport enum KulCardCSSClasses {\n    HAS_ACTIONS = 'has-actions',\n    HAS_CONTENT = 'has-content',\n}\n\nexport type KulCardEvent = 'click' | 'kul-event' | 'pointerdown' | 'ready';\n\nexport enum KulCardProps {\n    kulData = 'The actual data of the card.',\n    kulLayoutNumber = 'Sets the number of the layout.',\n    kulSizeX = 'The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).',\n    kulSizeY = 'The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).',\n    kulStyle = 'Custom style of the component.',\n}\n\nexport interface KulCardPropsInterface {\n    kulData?: KulDataDataset;\n    kulLayoutNumber?: number;\n    kulSizeX?: string;\n    kulSizeY?: string;\n    kulStyle?: string;\n}\n\nexport type KulCardLayout = 'a';\n","import { h, VNode } from '@stencil/core';\nimport { KulImagePropsInterface } from '../../../components';\nimport { KulDataCyAttributes } from '../../../types/GenericTypes';\nimport { KulButtonPropsInterface } from '../../kul-button/kul-button-declarations';\n\nexport const getShapes = {\n    buttons: (\n        buttons: Partial<KulButtonPropsInterface>[],\n        extraProps?: Partial<KulButtonPropsInterface>[]\n    ) => {\n        const r: VNode[] = [];\n        for (let index = 0; buttons && index < buttons.length; index++) {\n            const b = buttons[index];\n            r.push(\n                <kul-button\n                    data-cy={KulDataCyAttributes.SHAPE}\n                    id={`button${index}`}\n                    {...b}\n                    {...extraProps}\n                ></kul-button>\n            );\n        }\n        return r;\n    },\n    image: (\n        images: Partial<KulImagePropsInterface>[],\n        extraProps?: Partial<KulImagePropsInterface>[]\n    ) => {\n        const r: VNode[] = [];\n        for (let index = 0; images && index < images.length; index++) {\n            const i = images[index];\n            r.push(\n                <kul-image\n                    data-cy={KulDataCyAttributes.SHAPE}\n                    id={`image${index}`}\n                    {...i}\n                    {...extraProps}\n                ></kul-image>\n            );\n        }\n        return r;\n    },\n    text: (text: string[]) => {\n        const r: VNode[] = [];\n        for (let index = 0; text && index < text.length; index++) {\n            const t = text[index];\n            r.push(<div id={`text${index}`}>{t}</div>);\n        }\n        return text;\n    },\n};\n","import { h, VNode } from '@stencil/core';\nimport { KulCard } from './../kul-card';\nimport { kulManagerInstance } from '../../../managers/kul-manager/kul-manager';\nimport { RIPPLE_SURFACE_CLASS } from '../../../variables/GenericVariables';\nimport { KulDataShapesMap } from '../../../managers/kul-data/kul-data-declarations';\nimport { KulCardCSSClasses } from './../kul-card-declarations';\nimport { KulDataCyAttributes } from '../../../types/GenericTypes';\nimport { getShapes } from '../helpers/shapes';\n\nexport function getLayoutA(component: KulCard, shapes: KulDataShapesMap = {}) {\n    const buttons = getShapes.buttons(shapes.button);\n    const images = getShapes.image(shapes.image, [\n        {\n            kulSizeX: '100%',\n            kulSizeY: '100%',\n        },\n    ]);\n    const text = getShapes.text(shapes.text);\n\n    const coverIndex = 0;\n    const cover: VNode = images.length ? images[coverIndex] : null;\n\n    const titleIndex = 0;\n    const title = text.length ? shapes.text[titleIndex] : null;\n\n    const subtitleIndex = 1;\n    const subtitle =\n        text.length > subtitleIndex ? shapes.text[subtitleIndex] : null;\n\n    const descriptionIndex = 2;\n    const description =\n        text.length > descriptionIndex\n            ? shapes.text[descriptionIndex]\n            : undefined;\n    return (\n        <div\n            class={`layout-${component.kulLayout} ${\n                buttons.length ? KulCardCSSClasses.HAS_ACTIONS : ''\n            }`}\n        >\n            <div\n                class={RIPPLE_SURFACE_CLASS}\n                data-cy={KulDataCyAttributes.RIPPLE}\n                onPointerDown={(e) => {\n                    kulManagerInstance().theme.ripple.trigger(\n                        e as PointerEvent,\n                        e.currentTarget as HTMLElement\n                    );\n                }}\n            >\n                <div class=\"section-1\">{cover}</div>\n                <div class=\"section-2\">\n                    <div class=\"sub-2 title\">{title}</div>\n                    <div class=\"sub-2 subtitle\">{subtitle}</div>\n                    <div class=\"sub-2 description\">{description}</div>\n                </div>\n            </div>\n            {buttons.length ? <div class=\"section-3\">{buttons}</div> : null}\n        </div>\n    );\n}\n","@import './styles/kul-card-main';\n@import './styles/kul-card-classes';\n\n:host {\n  /**\n * @prop --kul-card-backdrop: Sets the backdrop color of the component when visible.\n * Defaults to rgba(0, 0, 0, 0.32).\n */\n  --kul_card_backdrop: var(--kul-card-backdrop, rgba(0, 0, 0, 0.32));\n\n  display: block;\n  font-size: var(--kul-font-size);\n  height: var(--kul_card_height);\n  min-height: var(--kul_card_height);\n  min-width: var(--kul_card_width);\n  outline: none;\n  position: relative;\n  width: var(--kul_card_width);\n}\n\n#kul-component {\n  height: 100%;\n  width: 100%;\n}\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport type {\n    GenericMap,\n    GenericObject,\n    KulEventPayload,\n} from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulCardProps, KulCardEvent } from './kul-card-declarations';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulDataDataset,\n    KulDataShapesMap,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { getLayoutA } from './layouts/kul-card-layout-a';\n\n@Component({\n    tag: 'kul-card',\n    styleUrl: 'kul-card.scss',\n    shadow: true,\n})\nexport class KulCard {\n    /**\n     * References the root HTML element of the component (<kul-card>).\n     */\n    @Element() rootElement: HTMLKulCardElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The shapes of the component.\n     * @default \"\"\n     *\n     * @see KulDataShapesMap - For a list of possible shapes.\n     */\n    @State() shapes: KulDataShapesMap;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * The actual data of the card.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Sets the layout.\n     * @default \"a\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulLayout = 'a';\n    /**\n     * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).\n     * @default \"100%\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulSizeX = '100%';\n    /**\n     * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).\n     * @default \"100%\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulSizeY = '100%';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Triggered when an event is fired.\n     */\n    @Event({\n        eventName: 'kul-card-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulCardEvent): void {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            eventType,\n            originalEvent: e,\n        });\n    }\n\n    #cardEvent: EventListenerOrEventListenerObject = (e: CustomEvent) => {\n        e.stopPropagation();\n        this.onKulEvent(e, 'kul-event');\n    };\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulCardProps, descriptions);\n    }\n    /**\n     * Used to retrieve component's shapes.\n     * @returns {Promise<KulDataShapesMap>} Map of shapes.\n     */\n    @Method()\n    async getShapes(): Promise<KulDataShapesMap> {\n        return this.shapes;\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    /**\n     * This method will return the virtual node of the card containing the core layout of the card.\n     * @returns {VNode} Virtual node of the card for the specified layout.\n     */\n    getLayout(): Promise<VNode> {\n        switch (this.kulLayout.toLowerCase()) {\n            case 'a':\n            default:\n                return getLayoutA(this, this.shapes);\n        }\n    }\n    /**\n     * Sets the event listeners on the sub-components, in order to properly emit the generic kul-card-event.\n     */\n    registerListeners(): void {\n        const root = this.rootElement.shadowRoot;\n        root.addEventListener('kul-badge-event', this.#cardEvent);\n        root.addEventListener('kul-button-event', this.#cardEvent);\n        root.addEventListener('kul-code-event', this.#cardEvent);\n        root.addEventListener('kul-image-event', this.#cardEvent);\n        root.addEventListener('kul-upload-event', this.#cardEvent);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.language.register(this);\n        this.#kulManager.theme.register(this);\n        this.registerListeners();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        if (this.kulData) {\n            this.shapes = this.#kulManager.data.extract.shapes(this.kulData);\n        }\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (!this.kulData && this.rootElement.children.length < 1) {\n            return;\n        }\n\n        const style: GenericMap = {\n            '--kul_card_height': this.kulSizeY ? this.kulSizeY : '100%',\n            '--kul_card_width': this.kulSizeX ? this.kulSizeX : '100%',\n        };\n\n        return (\n            <Host style={style}>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div\n                    id={KUL_WRAPPER_ID}\n                    onClick={(e) => this.onKulEvent(e, 'click')}\n                    onPointerDown={(e) => this.onKulEvent(e, 'pointerdown')}\n                >\n                    {this.getLayout()}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.language.unregister(this);\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}