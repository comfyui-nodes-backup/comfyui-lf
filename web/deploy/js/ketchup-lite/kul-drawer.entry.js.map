{"file":"kul-drawer.entry.js","mappings":"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","names":[],"sources":["src/components/kul-drawer/kul-drawer-declarations.ts","src/components/kul-drawer/kul-drawer.scss?tag=kul-drawer&encapsulation=shadow","src/components/kul-drawer/kul-drawer.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulDrawerEvent = \"close\" | \"open\" | \"ready\" | \"unmount\";\nexport interface KulDrawerEventPayload\n  extends KulEventPayload<\"KulDrawer\", KulDrawerEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulDrawerProps {\n  kulStyle = \"Custom style of the component.\",\n}\nexport interface KulDrawerPropsInterface {\n  kulStyle?: string;\n}\n","@import \"styles/kul-drawer-main.scss\";\n@import \"styles/kul-drawer-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulDrawerEvent,\n  KulDrawerEventPayload,\n  KulDrawerProps,\n} from \"./kul-drawer-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { GenericObject } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-drawer\",\n  styleUrl: \"kul-drawer.scss\",\n  shadow: true,\n})\nexport class KulDrawer {\n  /**\n   * References the root HTML element of the component (<kul-drawer>).\n   */\n  @Element() rootElement: HTMLKulDrawerElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * True when the drawer is open.\n   * @default false\n   */\n  @State() opened = false;\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted by the component.\n   */\n  @Event({\n    eventName: \"kul-drawer-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulDrawerEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulDrawerEvent) {\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Closes the drawer.\n   */\n  @Method()\n  async close(): Promise<void> {\n    this.opened = false;\n    this.onKulEvent(new CustomEvent(\"close\"), \"close\");\n  }\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's props values.\n   * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n   * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulDrawerProps, descriptions);\n  }\n  /**\n   * Returns the state of the drawer.\n   * @returns {Promise<boolean>} True when opened, false when closed.\n   */\n  @Method()\n  async isOpened(): Promise<boolean> {\n    return this.opened;\n  }\n  /**\n   * Opens the drawer.\n   */\n  @Method()\n  async open(): Promise<void> {\n    this.opened = true;\n    this.onKulEvent(new CustomEvent(\"open\"), \"open\");\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Opens the drawer when closed and vice-versa.\n   */\n  @Method()\n  async toggle(): Promise<void> {\n    if (this.opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    return (\n      <Host kul-opened={this.opened}>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div\n          class=\"backdrop\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n          onPointerDown={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.close();\n          }}\n          onTouchStart={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n        />\n        <div id={KUL_WRAPPER_ID}>\n          <div class={\"drawer\"}>\n            <div class={`drawer__content`}>\n              <slot></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}