{"file":"kul-splash.entry.js","mappings":"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","names":[],"sources":["src/components/kul-splash/kul-splash-declarations.ts","src/components/kul-splash/kul-splash.scss?tag=kul-splash&encapsulation=shadow","src/components/kul-splash/kul-splash.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\n\n//#region Events\nexport type KulSplashEvent = 'ready' | 'unmount';\nexport interface KulSplashEventPayload\n    extends KulEventPayload<'KulSplash', KulSplashEvent> {}\n//#endregion\n\n//#region States\nexport type KulSplashStates = 'initializing' | 'unmounting';\n//#endregion\n\n//#region Props\nexport enum KulSplashProps {\n    kulLabel = 'The text displayed inside the badge.',\n    kulStyle = 'Custom style of the component.',\n}\nexport interface KulSplashPropsInterface {\n    kulLabel: string;\n    kulStyle: string;\n}\n//#endregion\n","@import './styles/kul-splash-main.scss';\n@import './styles/kul-splash-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { GenericObject } from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulSplashEvent,\n    KulSplashEventPayload,\n    KulSplashProps,\n    KulSplashStates,\n} from './kul-splash-declarations';\n\n@Component({\n    tag: 'kul-splash',\n    styleUrl: 'kul-splash.scss',\n    shadow: true,\n})\nexport class KulSplash {\n    /**\n     * References the root HTML element of the component (<kul-splash>).\n     */\n    @Element() rootElement: HTMLKulSplashElement;\n\n    //#region States\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The value of the component (\"on\" or \"off\").\n     * @default \"\"\n     *\n     * @see KulButtonState - For a list of possible states.\n     */\n    @State() state: KulSplashStates = 'initializing';\n    //#endregion\n\n    //#region Props\n    /**\n     * Initial text displayed within the component, typically shown during loading.\n     * @default \"Loading...\" - Indicates that loading or initialization is in progress.\n     */\n    @Prop({ mutable: true, reflect: false }) kulLabel = 'Loading...';\n    /**\n     * Enables customization of the component's style.\n     * @default \"\" - No custom style applied by default.\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    //#endregion\n\n    //#region Internal variables\n    #kulManager = kulManagerInstance();\n    //#endregion\n\n    //#region Events\n    @Event({\n        eventName: 'kul-splash-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulSplashEventPayload>;\n    onKulEvent(e: Event | CustomEvent, eventType: KulSplashEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n    //#endregion\n\n    //#region Public methods\n    /**\n     * Retrieves the debug information reflecting the current state of the component.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves to a KulDebugLifecycleInfo object containing debug information.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Retrieves the properties of the component, with optional descriptions.\n     * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n     * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulSplashProps, descriptions);\n    }\n    /**\n     * Triggers a re-render of the component to reflect any state changes.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 575): Promise<void> {\n        setTimeout(() => {\n            this.state = 'unmounting';\n            setTimeout(() => {\n                this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n                this.rootElement.remove();\n            }, 300);\n        }, ms);\n    }\n    //#endregion\n\n    //#region Lifecycle hooks\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n    render() {\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div\n                        class={\n                            'modal' +\n                            (this.state === 'unmounting' ? ' active' : '')\n                        }\n                    >\n                        <div class=\"wrapper\">\n                            <div class=\"widget\">\n                                <slot></slot>\n                            </div>\n                            <div class=\"label\">\n                                {this.state === 'unmounting'\n                                    ? 'Ready!'\n                                    : this.kulLabel}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n    //#endregion\n}\n"],"version":3}