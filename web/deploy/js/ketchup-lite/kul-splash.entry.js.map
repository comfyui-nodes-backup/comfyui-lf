{"file":"kul-splash.entry.js","mappings":"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","names":[],"sources":["src/components/kul-splash/kul-splash-declarations.ts","src/components/kul-splash/kul-splash.scss?tag=kul-splash&encapsulation=shadow","src/components/kul-splash/kul-splash.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulSplashEvent = \"ready\" | \"unmount\";\nexport interface KulSplashEventPayload\n  extends KulEventPayload<\"KulSplash\", KulSplashEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulSplashProps {\n  kulLabel = \"The text displayed inside the badge.\",\n  kulStyle = \"Custom style of the component.\",\n}\nexport interface KulSplashPropsInterface {\n  kulLabel: string;\n  kulStyle: string;\n}\n/*-------------------------------------------------*/\n/*                    S t a t e                    */\n/*-------------------------------------------------*/\nexport type KulSplashStates = \"initializing\" | \"unmounting\";\n","@import \"./styles/kul-splash-main.scss\";\n@import \"./styles/kul-splash-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulSplashEvent,\n  KulSplashEventPayload,\n  KulSplashProps,\n  KulSplashStates,\n} from \"./kul-splash-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { GenericObject } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-splash\",\n  styleUrl: \"kul-splash.scss\",\n  shadow: true,\n})\nexport class KulSplash {\n  /**\n   * References the root HTML element of the component (<kul-splash>).\n   */\n  @Element() rootElement: HTMLKulSplashElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * The value of the component (\"on\" or \"off\").\n   * @default \"\"\n   *\n   * @see KulButtonState - For a list of possible states.\n   */\n  @State() state: KulSplashStates = \"initializing\";\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Initial text displayed within the component, typically shown during loading.\n   * @default \"Loading...\" - Indicates that loading or initialization is in progress.\n   */\n  @Prop({ mutable: true, reflect: false }) kulLabel = \"Loading...\";\n  /**\n   * Enables customization of the component's style.\n   * @default \"\" - No custom style applied by default.\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-splash-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulSplashEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulSplashEvent) {\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Retrieves the debug information reflecting the current state of the component.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves to a KulDebugLifecycleInfo object containing debug information.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Retrieves the properties of the component, with optional descriptions.\n   * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n   * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulSplashProps, descriptions);\n  }\n  /**\n   * Triggers a re-render of the component to reflect any state changes.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 575): Promise<void> {\n    setTimeout(() => {\n      this.state = \"unmounting\";\n      setTimeout(() => {\n        this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n        this.rootElement.remove();\n      }, 300);\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class={\"modal\" + (this.state === \"unmounting\" ? \" active\" : \"\")}>\n            <div class=\"wrapper\">\n              <div class=\"widget\">\n                <slot></slot>\n              </div>\n              <div class=\"label\">\n                {this.state === \"unmounting\" ? \"Ready!\" : this.kulLabel}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}