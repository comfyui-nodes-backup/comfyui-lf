{"file":"kul-progressbar.kul-textfield.entry.js","mappings":"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","names":[],"sources":["src/components/kul-progressbar/kul-progressbar-declarations.ts","src/components/kul-progressbar/kul-progressbar.scss?tag=kul-progressbar&encapsulation=shadow","src/components/kul-progressbar/kul-progressbar.tsx","src/components/kul-textfield/kul-textfield-declarations.ts","src/components/kul-textfield/kul-textfield.scss?tag=kul-textfield&encapsulation=shadow","src/components/kul-textfield/kul-textfield.tsx"],"sourcesContent":["export type KulProgressbarEvent = 'ready';\nexport enum KulProgressbarProps {\n    kulCenteredLabel = \"Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.\",\n    kulIcon = 'Specifies an icon to replace the label.',\n    kulIsRadial = 'Radial version.',\n    kulLabel = \"Specifies a text for the bar's label.\",\n    kulShowLabel = \"Flag to show or hide the progress bar's label.\",\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'The current value the progress bar must display.',\n}\nexport interface KulProgressbarPropsInterface {\n    kulCenteredLabel?: boolean;\n    kulIcon?: string;\n    kulIsRadial?: boolean;\n    kulLabel?: string;\n    kulShowLabel?: boolean;\n    kulStyle?: string;\n    kulValue?: number;\n}\n","@import 'styles/kul-progressbar-main.scss';\n@import 'styles/kul-progressbar-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    getAssetPath,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulProgressbarEvent,\n    KulProgressbarProps,\n} from './kul-progressbar-declarations';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { GenericObject, KulEventPayload } from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\n\n@Component({\n    tag: 'kul-progressbar',\n    styleUrl: 'kul-progressbar.scss',\n    shadow: true,\n})\nexport class KulProgressbar {\n    /**\n     * References the root HTML element of the component (<kul-progressbar>).\n     */\n    @Element() rootElement: HTMLKulProgressbarElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.\n     * @default false\n     */\n    @Prop({ reflect: true }) kulCenteredLabel = false;\n    /**\n     * Specifies an icon to replace the label.\n     * @default \"\"\n     */\n    @Prop() kulIcon = '';\n    /**\n     * Radial version.\n     * @default false\n     */\n    @Prop({ reflect: true }) kulIsRadial = false;\n    /**\n     * Specifies a text for the bar's label.\n     * @default \"\"\n     */\n    @Prop() kulLabel = '';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle = '';\n    /**\n     * The current value the progress bar must display.\n     * @default 0\n     */\n    @Prop() kulValue = 0;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-progressbar-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulProgressbarEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Retrieves the debug information reflecting the current state of the component.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves to a KulDebugComponentInfo object containing debug information.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Retrieves the properties of the component, with optional descriptions.\n     * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n     * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulProgressbarProps, descriptions);\n    }\n    /**\n     * Triggers a re-render of the component to reflect any state changes.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #prepIcon() {\n        const path = getAssetPath(`./assets/svg/${this.kulIcon}.svg`);\n        const style = {\n            mask: `url('${path}') no-repeat center`,\n            webkitMask: `url('${path}') no-repeat center`,\n        };\n        return <div class=\"progress-bar__icon\" style={style}></div>;\n    }\n\n    #prepLabel() {\n        const label: VNode[] = this.kulLabel\n            ? [<div class=\"progress-bar__text\">{this.kulLabel}</div>]\n            : [\n                  <div class=\"progress-bar__text\">{this.kulValue}</div>,\n                  <div class=\"progress-bar__mu\">%</div>,\n              ];\n        return (\n            <div class=\"progress-bar__label\">\n                {this.kulIcon && this.#prepIcon()}\n                {label}\n            </div>\n        );\n    }\n\n    #prepProgressBar() {\n        return (\n            <div class={'progress-bar'}>\n                <div class=\"progress-bar__percentage\">{this.#prepLabel()}</div>\n            </div>\n        );\n    }\n\n    #prepRadialBar() {\n        return (\n            <div class={'progress-bar'}>\n                {this.#prepLabel()}\n                <div\n                    class={`pie ${this.kulValue ? 'has-value' : ''}  ${this.kulValue > 50 ? 'half-full' : 'half-empty'}`}\n                >\n                    <div class=\"left-side half-circle\"></div>\n                    <div class=\"right-side half-circle\"></div>\n                </div>\n                <div class=\"progress-bar__track\"></div>\n            </div>\n        );\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const style = {\n            ['--kul_progressbar_percentage_width']: `${this.kulValue}%`,\n            ['--kul_progressbar_transform']: `rotate(${this.kulValue * 3.6}deg)`,\n        };\n\n        return (\n            <Host>\n                {this.kulStyle && (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                )}\n                <div id={KUL_WRAPPER_ID} style={style}>\n                    {this.kulIsRadial\n                        ? this.#prepRadialBar()\n                        : this.#prepProgressBar()}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n","import { GenericObject, KulEventPayload } from '../../components';\n\nexport type KulTextfieldEvent =\n    | 'blur'\n    | 'change'\n    | 'click'\n    | 'focus'\n    | 'input'\n    | 'ready';\n\nexport interface KulTextfieldEventPayload extends KulEventPayload {\n    inputValue?: string;\n    value?: string;\n}\n\nexport interface KulTextfieldHelper {\n    showWhenFocused?: boolean;\n    value: string;\n}\n\nexport enum KulTextfieldProps {\n    kulDisabled = 'Enables or disables the text field to prevent user interaction.',\n    kulFullWidth = 'Applies a full-width styling to the text field, making it occupy all available horizontal space.',\n    kulHelper = 'Specifies helper text to display alongside the text field.',\n    kulHtmlAttributes = 'Allows customization of the input or textarea element through additional HTML attributes.',\n    kulIcon = 'Defines the icon to be displayed within the text field.',\n    kulLabel = 'Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected.',\n    kulStyle = 'Accepts custom CSS styles to apply directly to the text field component.',\n    kulStyling = 'Determines the overall styling theme of the text field, affecting its shape and border.',\n    kulTrailingIcon = 'Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.',\n    kulValue = 'Initializes the text field with a default value when the component is first rendered.',\n}\n\nexport interface KulTextfieldPropsInterface {\n    kulDisabled?: boolean;\n    kulFullWidth?: boolean;\n    kulHelper?: KulTextfieldHelper;\n    kulHtmlAttributes?: GenericObject;\n    kulIcon?: string;\n    kulLabel?: string;\n    kulStyle?: string;\n    kulStyling?: KulTextfieldStyling;\n    kulTrailingIcon?: boolean;\n    kulValue?: string;\n}\n\nexport type KulTextfieldStatus =\n    | 'disabled'\n    | 'filled'\n    | 'focused'\n    | 'full-width'\n    | 'has-icon'\n    | 'has-label';\n\nexport type KulTextfieldStyling = 'flat' | 'outlined' | 'raised' | 'textarea';\n","@import './styles/kul-textfield-main.scss';\n@import './styles/kul-textfield-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    getAssetPath,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport {\n    KulTextfieldEvent,\n    KulTextfieldEventPayload,\n    KulTextfieldHelper,\n    KulTextfieldProps,\n    KulTextfieldStatus,\n    KulTextfieldStyling,\n} from './kul-textfield-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { GenericObject, KulDataCyAttributes } from '../../types/GenericTypes';\n\n@Component({\n    tag: 'kul-textfield',\n    styleUrl: 'kul-textfield.scss',\n    shadow: true,\n})\nexport class KulTextfield {\n    /**\n     * References the root HTML element of the component (<kul-textfield>).\n     */\n    @Element() rootElement: HTMLKulTextfieldElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * UI Status of the text field.\n     */\n    @State() status: Set<KulTextfieldStatus> = new Set();\n    /**\n     * Value of the text field.\n     */\n    @State() value = '';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Enables or disables the text field to prevent user interaction.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n    /**\n     * Applies a full-width styling to the text field, making it occupy all available horizontal space.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulFullWidth = false;\n    /**\n     * Specifies helper text to display alongside the text field.\n     * Helper text can provide additional context or instructions to the user.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulHelper: KulTextfieldHelper =\n        null;\n    /**\n     * Allows customization of the input or textarea element through additional HTML attributes.\n     * This can include attributes like 'readonly', 'placeholder', etc., to further customize the behavior or appearance of the input.\n     * @default {}\n     */\n    @Prop({ mutable: true, reflect: true }) kulHtmlAttributes: GenericObject =\n        {};\n    /**\n     * Defines the icon to be displayed within the text field.\n     * Icons can indicate actions such as search, clear, or provide visual cues related to the input's purpose.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulIcon = '';\n    /**\n     * Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected.\n     * Labels are especially important for screen readers and users navigating with keyboard-only controls.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulLabel = '';\n    /**\n     * Accepts custom CSS styles to apply directly to the text field component.\n     * This allows for fine-grained control over the appearance of the component beyond predefined styling options.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Determines the overall styling theme of the text field, affecting its shape and border.\n     * Options include 'default', 'outlined', or 'textarea', each offering a distinct visual presentation.\n     * @default \"raised\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyling: KulTextfieldStyling =\n        'raised';\n    /**\n     * Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulTrailingIcon = false;\n    /**\n     * Initializes the text field with a default value when the component is first rendered.\n     * This can be used to pre-fill forms or set a starting point for user input.\n     * @default \"\"\n     */\n    @Prop({ mutable: false }) kulValue = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #hasOutline: boolean;\n    #input: HTMLInputElement | HTMLTextAreaElement;\n    #kulManager = kulManagerInstance();\n    #maxLength: number;\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-textfield-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulTextfieldEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulTextfieldEvent) {\n        const target = e.target as HTMLInputElement;\n        const inputValue = target?.value;\n        switch (eventType) {\n            case 'blur':\n                this.status.delete('focused');\n                this.status = new Set(this.status);\n                break;\n            case 'focus':\n                this.status.add('focused');\n                this.status = new Set(this.status);\n                break;\n        }\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            inputValue,\n            value: this.value,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulTextfieldProps, descriptions);\n    }\n    /**\n     * Used to retrieve the component's current state.\n     * @returns {Promise<string>} Promise resolved with the current state of the component.\n     */\n    @Method()\n    async getValue(): Promise<string> {\n        return this.value;\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    } /**\n     * Focuses the input element.\n     */\n    @Method()\n    async setFocus(): Promise<void> {\n        this.#input.focus();\n    }\n    /**\n     * Sets the component's state.\n     * @param {string} value - The new state to be set on the component.\n     * @returns {Promise<void>}\n     */\n    @Method()\n    async setValue(value: string): Promise<void> {\n        this.#updateState(value);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #updateState(\n        value: string,\n        e: CustomEvent<unknown> | Event = new CustomEvent('change')\n    ) {\n        if (!this.kulDisabled) {\n            this.value = value;\n            this.onKulEvent(e, 'change');\n        }\n    }\n\n    #outlineCheck() {\n        return this.kulStyling === 'outlined' || this.kulStyling === 'textarea';\n    }\n\n    #prepCounter() {\n        if (!this.#maxLength) {\n            return;\n        }\n\n        return (\n            <div class=\"textfield__character-counter\">\n                '0 / ' + {this.#maxLength.toString()}\n            </div>\n        );\n    }\n\n    #prepHelper() {\n        if (!this.kulHelper) {\n            return;\n        }\n\n        const classList: Record<string, boolean> = {\n            'textfield__helper-text': true,\n            'textfield__helper-text--persistent':\n                !this.kulHelper.showWhenFocused,\n        };\n        return (\n            <div class=\"textfield__helper-line\">\n                <div class={classList}>{this.kulHelper.value}</div>\n                {this.kulStyling !== 'textarea'\n                    ? this.#prepCounter()\n                    : undefined}\n            </div>\n        );\n    }\n\n    #prepIcon() {\n        if (!this.kulIcon) {\n            return;\n        }\n\n        const path = getAssetPath(`./assets/svg/${this.kulIcon}.svg`);\n        const style = {\n            mask: `url('${path}') no-repeat center`,\n            webkitMask: `url('${path}') no-repeat center`,\n        };\n        return (\n            <div class=\"textfield__icon\" onClick={() => {}} style={style}></div>\n        );\n    }\n\n    #prepInput() {\n        return (\n            <input\n                {...this.kulHtmlAttributes}\n                class=\"textfield__input\"\n                data-cy={KulDataCyAttributes.INPUT}\n                disabled={this.kulDisabled}\n                onBlur={(e) => {\n                    this.onKulEvent(e, 'blur');\n                }}\n                onChange={(e) => {\n                    this.#updateState(\n                        (e.currentTarget as HTMLInputElement).value\n                    );\n                }}\n                onClick={(e) => {\n                    this.onKulEvent(e, 'click');\n                }}\n                onFocus={(e) => {\n                    this.onKulEvent(e, 'focus');\n                }}\n                onInput={(e) => {\n                    this.onKulEvent(e, 'input');\n                }}\n                placeholder={this.kulFullWidth ? this.kulLabel : undefined}\n                ref={(el) => {\n                    if (el) {\n                        this.#input = el;\n                    }\n                }}\n                value={this.value}\n            ></input>\n        );\n    }\n\n    #prepLabel() {\n        if (this.kulFullWidth) {\n            return;\n        }\n\n        const labelEl: VNode = (\n            <label class=\"textfield__label\" htmlFor=\"input\">\n                {this.kulLabel}\n            </label>\n        );\n        if (this.#hasOutline) {\n            return (\n                <div class=\"textfield__notched-outline\">\n                    <div class=\"textfield__notched-outline__leading\"></div>\n                    <div class=\"textfield__notched-outline__notch\">\n                        {labelEl}\n                    </div>\n                    <div class=\"textfield__notched-outline__trailing\"></div>\n                </div>\n            );\n        }\n\n        return labelEl;\n    }\n\n    #prepRipple() {\n        return (\n            !this.#hasOutline && <span class=\"textfield__line-ripple\"></span>\n        );\n    }\n\n    #prepTextArea() {\n        return (\n            <span class=\"textfield__resizer\">\n                <textarea\n                    {...this.kulHtmlAttributes}\n                    class=\"textfield__input\"\n                    data-cy={KulDataCyAttributes.INPUT}\n                    disabled={this.kulDisabled}\n                    id=\"input\"\n                    onBlur={(e) => {\n                        this.onKulEvent(e, 'blur');\n                    }}\n                    onChange={(e) => {\n                        this.#updateState(\n                            (e.currentTarget as HTMLInputElement).value\n                        );\n                    }}\n                    onClick={(e) => {\n                        this.onKulEvent(e, 'click');\n                    }}\n                    onFocus={(e) => {\n                        this.onKulEvent(e, 'focus');\n                    }}\n                    onInput={(e) => {\n                        this.onKulEvent(e, 'input');\n                    }}\n                    ref={(el) => {\n                        if (el) {\n                            this.#input = el;\n                        }\n                    }}\n                    value={this.value}\n                ></textarea>\n            </span>\n        );\n    }\n\n    #updateStatus() {\n        const propertiesToUpdateStatus: {\n            prop: string;\n            status: KulTextfieldStatus;\n        }[] = [\n            { prop: 'value', status: 'filled' },\n            { prop: 'kulDisabled', status: 'disabled' },\n            { prop: 'kulFullWidth', status: 'full-width' },\n            { prop: 'kulIcon', status: 'has-icon' },\n            { prop: 'kulLabel', status: 'has-label' },\n        ];\n\n        propertiesToUpdateStatus.forEach(({ prop, status }) => {\n            const propName = prop as keyof KulTextfield;\n            const propValue = this[propName];\n            if (propValue) {\n                this.status.add(status);\n            } else {\n                this.status.delete(status);\n            }\n        });\n    }\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        if (this.kulValue) {\n            this.status.add('filled');\n            this.value = this.kulValue;\n        }\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n        this.#hasOutline = this.#outlineCheck();\n        this.#maxLength = this.kulHtmlAttributes?.maxLength as number;\n        this.#updateStatus();\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const classList = ['textfield', 'textfield--' + this.kulStyling];\n        this.status.forEach((status) => {\n            classList.push(`textfield--${status}`);\n        });\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div class={classList.join(' ')}>\n                        {this.kulStyling === 'textarea'\n                            ? [\n                                  this.#prepCounter(),\n                                  this.#prepIcon(),\n                                  this.#prepTextArea(),\n                                  this.#prepLabel(),\n                              ]\n                            : [\n                                  this.#prepIcon(),\n                                  this.#prepInput(),\n                                  this.#prepLabel(),\n                                  this.#prepRipple(),\n                                  this.kulFullWidth\n                                      ? undefined\n                                      : this.#prepHelper(),\n                              ]}\n                    </div>\n                    {this.kulFullWidth ? this.#prepHelper() : undefined}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}