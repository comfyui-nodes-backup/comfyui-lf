{"file":"kul-masonry.entry.js","mappings":"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","names":[],"sources":["src/components/kul-masonry/kul-masonry-declarations.ts","src/components/kul-masonry/kul-masonry.scss?tag=kul-masonry&encapsulation=shadow","src/components/kul-masonry/kul-masonry.tsx"],"sourcesContent":["import {\n    KulDataCell,\n    KulDataDataset,\n    KulDataShapes,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulEventPayload } from '../../types/GenericTypes';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulMasonryEvent = 'kul-event' | 'ready' | 'unmount';\nexport interface KulMasonryEventPayload\n    extends KulEventPayload<'KulMasonry', KulMasonryEvent> {\n    selectedShape: KulMasonrySelectedShape;\n}\n/*-------------------------------------------------*/\n/*                   S t a t e s                   */\n/*-------------------------------------------------*/\nexport type KulMasonrySelectedShape = {\n    index?: number;\n    shape?: Partial<KulDataCell<KulDataShapes>>;\n};\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulMasonryProps {\n    kulColumns = 'Number of columns of the masonry.',\n    kulData = 'Actual data to masonry.',\n    kulSelectable = 'Allows for the selection of elements.',\n    kulShape = 'Sets the type of shapes to compare.',\n    kulStyle = 'Sets a custom CSS style for the component.',\n    kulView = 'Sets the type of view, either the actual masonry or a waterfall view.',\n}\nexport interface KulMasonryPropsInterface {\n    kulColumns?: number;\n    kulData?: KulDataDataset;\n    kulSelectable?: boolean;\n    kulShape?: KulDataShapes;\n    kulStyle?: string;\n    kulView?: KulMasonryView;\n}\nexport type KulMasonryView = 'masonry' | 'waterfall';\n","@import './styles/kul-masonry-main.scss';\n@import './styles/kul-masonry-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    Fragment,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n    Watch,\n} from '@stencil/core';\nimport {\n    KulGenericEvent,\n    KulGenericEventPayload,\n    type GenericObject,\n} from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulDataCell,\n    KulDataDataset,\n    KulDataShapeDefaults,\n    KulDataShapes,\n    KulDataShapesMap,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulMasonryEvent,\n    KulMasonryEventPayload,\n    KulMasonryProps,\n    KulMasonrySelectedShape,\n    KulMasonryView,\n} from './kul-masonry-declarations';\nimport { KulButtonEventPayload } from '../kul-button/kul-button-declarations';\n\n@Component({\n    tag: 'kul-masonry',\n    styleUrl: 'kul-masonry.scss',\n    shadow: true,\n})\nexport class KulMasonry {\n    /**\n     * References the root HTML element of the component (<kul-masonry>).\n     */\n    @Element() rootElement: HTMLKulMasonryElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The selected element.\n     * @default undefined\n     */\n    @State() selectedShape: KulMasonrySelectedShape = {};\n    /**\n     * The shapes of the component.\n     * @default undefined\n     *\n     * @see KulDataShapesMap - For a list of possible shapes.\n     */\n    @State() shapes: KulDataShapesMap = {};\n    /**\n     * The current view of the masonry.\n     * @default \"before-after\"\n     */\n    @State() view: KulMasonryView = 'masonry';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Number of columns of the masonry.\n     * @default 4\n     */\n    @Prop({ mutable: true }) kulColumns = 4;\n    /**\n     * Actual data of the masonry.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Allows for the selection of elements.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulSelectable = false;\n    /**\n     * Sets the type of shapes to compare.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulShape: KulDataShapes = 'image';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Sets the type of view, either the actual masonry or a waterfall view.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulView: KulMasonryView = 'masonry';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-masonry-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulMasonryEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulMasonryEvent) {\n        let shouldUpdateState = false;\n        const state: KulMasonrySelectedShape = {};\n\n        switch (eventType) {\n            case 'kul-event':\n                const { eventType } = (e as KulGenericEvent).detail;\n                switch (eventType) {\n                    case 'click':\n                        if (this.kulSelectable) {\n                            const { comp } = (\n                                e as CustomEvent<KulGenericEventPayload>\n                            ).detail;\n                            const index = parseInt(\n                                comp.rootElement.dataset.index\n                            );\n                            if (this.selectedShape.index !== index) {\n                                state.index = index;\n                                state.shape = this.shapes[this.kulShape][index];\n                            }\n                            shouldUpdateState = true;\n                        }\n                        break;\n                }\n                break;\n        }\n\n        if (shouldUpdateState) {\n            this.selectedShape = state;\n        }\n\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            selectedShape: this.selectedShape,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*                 W a t c h e r s                 */\n    /*-------------------------------------------------*/\n\n    @Watch('kulData')\n    @Watch('kulShape')\n    async updateShapes() {\n        try {\n            this.shapes = this.#kulManager.data.cell.shapes.getAll(\n                this.kulData\n            );\n        } catch (error) {\n            this.#kulManager.debug.logs.new(\n                this,\n                'Error updating shapes: ' + error,\n                'error'\n            );\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's properties and descriptions.\n     * @param {boolean} descriptions - When true, includes descriptions for each property.\n     * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulMasonryProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #divideShapesIntoColumns(columnCount: number): VNode[][] {\n        const props: Partial<KulDataCell<KulDataShapes>>[] = this.shapes[\n            this.kulShape\n        ].map(() => ({\n            htmlProps: {\n                dataset: { selected: '' },\n            },\n        }));\n        if (this.selectedShape.index) {\n            props[this.selectedShape.index] = {\n                htmlProps: {\n                    dataset: { selected: 'true' },\n                },\n            };\n        }\n        const columns: VNode[][] = Array.from(\n            { length: columnCount },\n            () => [],\n            []\n        );\n        const decoratedShapes = this.#kulManager.data.cell.shapes.decorate(\n            this.kulShape,\n            this.shapes[this.kulShape],\n            async (e) => this.onKulEvent(e, 'kul-event'),\n            props\n        );\n\n        decoratedShapes.element.forEach((element: VNode, index: number) => {\n            element.$attrs$['data-index'] = index.toString();\n            columns[index % columnCount].push(element);\n        });\n\n        return columns;\n    }\n\n    #hasShapes() {\n        return !!this.shapes?.[this.kulShape];\n    }\n\n    #isMasonry() {\n        return !!(this.view === 'masonry');\n    }\n\n    #prepChangeView() {\n        const icon = this.#isMasonry() ? 'view_day' : 'view_quilt';\n        const iconOff = this.#isMasonry() ? 'view_quilt' : 'view_day';\n        const buttonEventHandler: (\n            e: CustomEvent<KulButtonEventPayload>\n        ) => void = (e) => {\n            const { eventType, value } = e.detail;\n\n            switch (eventType) {\n                case 'click':\n                    this.view = value === 'on' ? 'masonry' : 'waterfall';\n                    break;\n            }\n        };\n        return (\n            <kul-button\n                class={'grid__change-view'}\n                kulIcon={icon}\n                kulIconOff={iconOff}\n                kulStyling={'floating'}\n                kulToggable={true}\n                kulValue={this.#isMasonry() ? true : false}\n                onKul-button-event={buttonEventHandler}\n                title={\n                    this.#isMasonry()\n                        ? 'Click to view the images arranged as a waterfall.'\n                        : 'Click to view the images arranged as a masonry.'\n                }\n            ></kul-button>\n        );\n    }\n\n    #prepView(): VNode[] {\n        const columnCount = this.#isMasonry() ? this.kulColumns : 1;\n        const columns = this.#divideShapesIntoColumns(columnCount);\n\n        return columns.map((column, colIndex) => (\n            <div key={colIndex} class=\"grid__column\">\n                {column.map((element) => (\n                    <Fragment>{element}</Fragment>\n                ))}\n            </div>\n        ));\n    }\n\n    #prepMasonry(): VNode {\n        if (this.#hasShapes()) {\n            const shapes = this.shapes[this.kulShape];\n            if (shapes?.length) {\n                return (\n                    <Fragment>\n                        <div class={`grid grid--${this.view}`}>\n                            {this.#prepView()}\n                        </div>\n                        {this.#prepChangeView()}\n                    </Fragment>\n                );\n            }\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.view = this.kulView;\n        this.updateShapes();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const style = {\n            ['--kul_masonry_columns']: this.kulColumns?.toString() || '4',\n        };\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID} style={style}>\n                    <div class=\"masonry\">{this.#prepMasonry()}</div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}