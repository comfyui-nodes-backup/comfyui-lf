{"file":"kul-messenger.entry.js","mappings":"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","names":["buttonEventHandler"],"sources":["src/components/kul-messenger/kul-messenger-declarations.ts","src/components/kul-messenger/kul-messenger-constants.ts","src/components/kul-messenger/layout/kul-messenger-left.tsx","src/components/kul-messenger/layout/kul-messenger-center.tsx","src/components/kul-messenger/options/kul-messenger-active.tsx","src/components/kul-messenger/options/kul-messenger-customization.tsx","src/components/kul-messenger/layout/kul-messenger-right.tsx","src/components/kul-messenger/selection-grid/kul-messenger-selection-grid.tsx","src/components/kul-messenger/helpers/kul-messenger-getters.ts","src/components/kul-messenger/helpers/kul-messenger-setters.ts","src/components/kul-messenger/kul-messenger.scss?tag=kul-messenger&encapsulation=shadow","src/components/kul-messenger/kul-messenger.tsx"],"sourcesContent":["import type { KulEventPayload } from '../../types/GenericTypes';\nimport {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport {\n    KulChatPropsInterface,\n    KulChatStatus,\n} from '../kul-chat/kul-chat-declarations';\nimport { KulMessenger } from './kul-messenger';\n\n/*-------------------------------------------------*/\n/*                  A d a p t e r                  */\n/*-------------------------------------------------*/\nexport interface KulMessengerAdapter {\n    actions: KulMessengerAdapterActions;\n    components: KulMessengerAdapterComponents;\n    get: KulMessengerAdapterGetters;\n    set: KulMessengerAdapterSetters;\n}\nexport interface KulMessengerAdapterGetters {\n    character: KulMessengerAdapterGetCharacter;\n    image: KulMessengerAdapterGetImage;\n    messenger: KulMessengerAdapterGetMessenger;\n}\nexport interface KulMessengerAdapterSetters {\n    character: KulMessengerAdapterSetCharacter;\n    image: KulMessengerAdapterSetImage;\n    messenger: KulMessengerAdapterSetMessenger;\n}\nexport interface KulMessengerAdapterActions {\n    delete: {\n        option: (\n            node: KulMessengerBaseChildNode<KulMessengerUnionChildIds>,\n            type: KulMessengerImageTypes\n        ) => void;\n    };\n    save: () => Promise<void>;\n}\nexport interface KulMessengerAdapterComponents {\n    editing: {\n        [K in KulMessengerImageTypes]: KulMessengerImageEditComponents;\n    };\n    messenger: KulMessenger;\n    saveButton: HTMLKulButtonElement;\n}\nexport interface KulMessengerAdapterGetCharacter {\n    biography: (character?: KulMessengerCharacterNode) => string;\n    byId: (id: string) => KulMessengerCharacterNode;\n    chat: (character?: KulMessengerCharacterNode) => KulChatPropsInterface;\n    current: () => KulMessengerCharacterNode;\n    history: (character?: KulMessengerCharacterNode) => string;\n    list: () => KulMessengerCharacterNode[];\n    name: (character?: KulMessengerCharacterNode) => string;\n    next: (character?: KulMessengerCharacterNode) => KulMessengerCharacterNode;\n    previous: (\n        character?: KulMessengerCharacterNode\n    ) => KulMessengerCharacterNode;\n}\nexport interface KulMessengerAdapterGetImage {\n    asCover: <T extends KulMessengerImageTypes>(\n        type: T,\n        character?: KulMessengerCharacterNode\n    ) => {\n        node?: KulMessengerBaseChildNode<KulMessengerUnionChildIds>;\n        title?: string;\n        value: string;\n    };\n    byType: <T extends KulMessengerImageTypes>(\n        type: T,\n        character?: KulMessengerCharacterNode\n    ) => Array<KulMessengerBaseChildNode<KulMessengerUnionChildIds>>;\n    coverIndex: (\n        type: KulMessengerImageTypes,\n        character?: KulMessengerCharacterNode\n    ) => number;\n    newId: <T extends KulMessengerImageTypes>(\n        type: T\n    ) => KulMessengerChildIds<KulMessengerUnionChildIds>;\n    root: <T extends KulMessengerImageTypes>(\n        type: T,\n        character?: KulMessengerCharacterNode\n    ) => KulMessengerBaseRootNode<KulMessengerImageTypes>;\n    title: <T extends KulMessengerUnionChildIds>(\n        node: KulMessengerBaseChildNode<T>\n    ) => string;\n}\nexport interface KulMessengerAdapterGetMessenger {\n    config: () => KulMessengerConfig;\n    data: () => KulMessengerDataset;\n    history: () => KulMessengerHistory;\n    status: {\n        connection: () => KulChatStatus;\n        editing: () => KulMessengerEditingStatus<KulMessengerImageTypes>;\n        hoveredCustomizationOption: () => KulMessengerBaseChildNode<KulMessengerUnionChildIds>;\n        save: {\n            inProgress: () => boolean;\n        };\n    };\n    ui: () => KulMessengerUI;\n}\nexport interface KulMessengerAdapterSetCharacter {\n    chat: (\n        chat: KulChatPropsInterface,\n        character?: KulMessengerCharacterNode\n    ) => void;\n    current: (character?: KulMessengerCharacterNode) => void;\n    history: (history: string, character?: KulMessengerCharacterNode) => void;\n    next: (character?: KulMessengerCharacterNode) => void;\n    previous: (character?: KulMessengerCharacterNode) => void;\n}\nexport interface KulMessengerAdapterSetImage {\n    cover: (\n        type: KulMessengerImageTypes,\n        value: number,\n        character?: KulMessengerCharacterNode\n    ) => void;\n}\nexport interface KulMessengerAdapterSetMessenger {\n    data: () => void;\n    status: {\n        connection: (status: KulChatStatus) => void;\n        editing: <T extends KulMessengerUnionChildIds>(\n            type: KulMessengerImageTypes,\n            id: KulMessengerChildIds<T>\n        ) => void;\n        hoveredCustomizationOption: <T extends KulMessengerUnionChildIds>(\n            node: KulMessengerBaseChildNode<T>\n        ) => void;\n        save: {\n            inProgress: (value: boolean) => void;\n        };\n    };\n    ui: {\n        customization: (value: boolean) => void;\n        editing: <T extends KulMessengerUnionChildIds>(\n            value: boolean,\n            type: KulMessengerImageTypes,\n            node?: KulMessengerBaseChildNode<T>\n        ) => void;\n        filters: (filter: KulMessengerFilters) => void;\n        options: <T extends KulMessengerImageRootIds<KulMessengerOptionTypes>>(\n            value: boolean,\n            type: KulMessengerRootIds<T>\n        ) => void;\n        panel: (panel: KulMessengerPanelsValue, value?: boolean) => boolean;\n    };\n}\n/*-------------------------------------------------*/\n/*           C h a r a c t e r   N o d e           */\n/*-------------------------------------------------*/\nexport interface KulMessengerDataset extends KulDataDataset {\n    nodes?: KulMessengerCharacterNode[];\n}\nexport type KulMessengerCharacterId = `character_${string}`;\nexport interface KulMessengerCharacterNode extends KulDataNode {\n    children: [\n        KulMessengerAvatarRootNode,\n        KulMessengerBiographyRootNode,\n        KulMessengerChatRootNode,\n        KulMessengerLocationRootNode,\n        KulMessengerOutfitRootNode,\n        KulMessengerStyleRootNode,\n        KulMessengerTimeframeRootNode,\n    ];\n    id: KulMessengerCharacterId;\n    value: string;\n}\n/*-------------------------------------------------*/\n/*               R o o t   N o d e s               */\n/*-------------------------------------------------*/\nexport interface KulMessengerBaseRootNode<T extends KulMessengerTypes>\n    extends KulDataNode {\n    id: T;\n}\nexport interface KulMessengerBaseImageRootNode<\n    T extends KulMessengerBaseChildNode<KulMessengerUnionChildIds>,\n    T1 extends KulMessengerImageTypes,\n> extends KulMessengerBaseRootNode<KulMessengerImageTypes> {\n    id: KulMessengerImageRootIds<T1>;\n    children?: T[];\n    value: number;\n}\nexport type KulMessengerTypes = 'biography' | 'chat' | KulMessengerImageTypes;\nexport type KulMessengerImageTypes = 'avatars' | KulMessengerOptionTypes;\nexport type KulMessengerOptionTypes =\n    | 'locations'\n    | 'outfits'\n    | 'styles'\n    | 'timeframes';\nexport type KulMessengerRootIds<T extends KulMessengerTypes> = T;\nexport type KulMessengerImageRootIds<T extends KulMessengerImageTypes> = T;\nexport interface KulMessengerBiographyRootNode\n    extends KulMessengerBaseRootNode<KulMessengerRootIds<'biography'>> {\n    id: KulMessengerRootIds<'biography'>;\n    value: string;\n}\nexport interface KulMessengerChatRootNode\n    extends KulMessengerBaseRootNode<KulMessengerRootIds<'chat'>> {\n    id: KulMessengerRootIds<'chat'>;\n    value: string;\n}\nexport interface KulMessengerAvatarRootNode\n    extends KulMessengerBaseImageRootNode<\n        KulMessengerAvatarNode,\n        KulMessengerImageRootIds<'avatars'>\n    > {\n    id: KulMessengerImageRootIds<'avatars'>;\n}\nexport interface KulMessengerLocationRootNode\n    extends KulMessengerBaseImageRootNode<\n        KulMessengerLocationNode,\n        KulMessengerImageRootIds<'locations'>\n    > {\n    id: KulMessengerImageRootIds<'locations'>;\n}\nexport interface KulMessengerOutfitRootNode\n    extends KulMessengerBaseImageRootNode<\n        KulMessengerOutfitNode,\n        KulMessengerImageRootIds<'outfits'>\n    > {\n    id: KulMessengerImageRootIds<'outfits'>;\n}\nexport interface KulMessengerStyleRootNode\n    extends KulMessengerBaseImageRootNode<\n        KulMessengerStyleNode,\n        KulMessengerImageRootIds<'styles'>\n    > {\n    id: KulMessengerImageRootIds<'styles'>;\n}\nexport interface KulMessengerTimeframeRootNode\n    extends KulMessengerBaseImageRootNode<\n        KulMessengerTimeframeNode,\n        KulMessengerImageRootIds<'timeframes'>\n    > {\n    id: KulMessengerImageRootIds<'timeframes'>;\n}\n/*-------------------------------------------------*/\n/*           C h i l d r e n   N o d e s           */\n/*-------------------------------------------------*/\nexport interface KulMessengerBaseChildNode<T extends KulMessengerUnionChildIds>\n    extends KulDataNode {\n    cells: { kulImage: { shape: 'image'; value: string } };\n    id: T;\n    value: string;\n}\nexport type KulMessengerChildTypes = 'avatar' | KulMessengerChildOptionTypes;\nexport type KulMessengerChildOptionTypes =\n    | 'location'\n    | 'outfit'\n    | 'style'\n    | 'timeframe';\nexport type KulMessengerPrefix<T extends KulMessengerChildTypes> = `${T}_`;\nexport type KulMessengerAvatarId = `${KulMessengerPrefix<'avatar'>}${string}`;\nexport type KulMessengerLocationId =\n    `${KulMessengerPrefix<'location'>}${string}`;\nexport type KulMessengerOutfitId = `${KulMessengerPrefix<'outfit'>}${string}`;\nexport type KulMessengerStyleId = `${KulMessengerPrefix<'style'>}${string}`;\nexport type KulMessengerTimeframeId =\n    `${KulMessengerPrefix<'timeframe'>}${string}`;\nexport type KulMessengerUnionChildIds =\n    | KulMessengerAvatarId\n    | KulMessengerLocationId\n    | KulMessengerOutfitId\n    | KulMessengerStyleId\n    | KulMessengerTimeframeId;\nexport type KulMessengerChildIds<T extends KulMessengerUnionChildIds> = T;\nexport interface KulMessengerAvatarNode\n    extends KulMessengerBaseChildNode<KulMessengerAvatarId> {\n    id: KulMessengerChildIds<KulMessengerAvatarId>;\n}\nexport interface KulMessengerLocationNode\n    extends KulMessengerBaseChildNode<KulMessengerLocationId> {\n    id: KulMessengerChildIds<KulMessengerLocationId>;\n}\nexport interface KulMessengerOutfitNode\n    extends KulMessengerBaseChildNode<KulMessengerOutfitId> {\n    id: KulMessengerChildIds<KulMessengerOutfitId>;\n}\nexport interface KulMessengerStyleNode\n    extends KulMessengerBaseChildNode<KulMessengerStyleId> {\n    id: KulMessengerChildIds<KulMessengerStyleId>;\n}\nexport interface KulMessengerTimeframeNode\n    extends KulMessengerBaseChildNode<KulMessengerTimeframeId> {\n    id: KulMessengerChildIds<KulMessengerTimeframeId>;\n}\n/*-------------------------------------------------*/\n/*                   S t a t e s                   */\n/*-------------------------------------------------*/\nexport interface KulMessengerChat {\n    [index: KulMessengerCharacterId]: KulChatPropsInterface;\n}\nexport interface KulMessengerConfig {\n    currentCharacter: string;\n    ui: KulMessengerUI;\n}\nexport interface KulMessengerCovers {\n    [index: KulMessengerCharacterId]: {\n        [K in KulMessengerImageTypes]: number;\n    };\n}\nexport interface KulMessengerHistory {\n    [index: KulMessengerCharacterId]: string;\n}\nexport interface KulMessengerImageEditComponents {\n    descriptionTextarea: HTMLKulTextfieldElement;\n    idTextfield: HTMLKulTextfieldElement;\n    titleTextarea: HTMLKulTextfieldElement;\n    imageUrlTextarea: HTMLKulTextfieldElement;\n}\nexport type KulMessengerEditingStatus<T extends KulMessengerImageTypes> = {\n    [index in KulMessengerImageRootIds<T>]: KulMessengerUnionChildIds;\n};\nexport type KulMessengerFilters = {\n    [T in KulMessengerImageTypes]: boolean;\n};\nexport type KulMessengerOptions = {\n    [T in KulMessengerOptionTypes]: boolean;\n};\nexport interface KulMessengerPanels {\n    isLeftCollapsed: boolean;\n    isRightCollapsed: boolean;\n}\nexport interface KulMessengerUI {\n    customization: boolean;\n    editing: KulMessengerFilters;\n    filters: KulMessengerFilters;\n    options: KulMessengerOptions;\n    panels: KulMessengerPanels;\n}\nexport type KulMessengerPanelsValue = 'left' | 'right';\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulMessengerEvent = 'ready' | 'save' | 'unmount';\nexport interface KulMessengerEventPayload\n    extends KulEventPayload<'KulMessenger', KulMessengerEvent> {\n    config: KulMessengerConfig;\n}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulMessengerProps {\n    kulAutosave = 'Automatically saves the dataset when a chat updates.',\n    kulData = 'The actual data of the component.',\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'Sets the initial configuration, including active character and filters.',\n}\nexport interface KulMessengerPropsInterface {\n    kulAutosave?: boolean;\n    kulData?: KulMessengerDataset;\n    kulStyle?: string;\n    kulValue?: KulMessengerConfig;\n}\n","import { KulDataDataset } from '../../managers/kul-data/kul-data-declarations';\nimport {\n    KulMessengerAdapterComponents,\n    KulMessengerChildTypes,\n    KulMessengerImageRootIds,\n    KulMessengerImageTypes,\n    KulMessengerOptionTypes,\n    KulMessengerUI,\n} from './kul-messenger-declarations';\n\nconst CLEAN_UI: KulMessengerUI = {\n    customization: false,\n    editing: {\n        avatars: false,\n        locations: false,\n        outfits: false,\n        styles: false,\n        timeframes: false,\n    },\n    filters: {\n        avatars: false,\n        locations: false,\n        outfits: false,\n        styles: false,\n        timeframes: false,\n    },\n    options: {\n        locations: true,\n        outfits: true,\n        styles: true,\n        timeframes: true,\n    },\n    panels: {\n        isLeftCollapsed: false,\n        isRightCollapsed: false,\n    },\n};\n\nexport const CLEAN_UI_JSON = JSON.parse(JSON.stringify(CLEAN_UI));\nexport const CLEAN_COMPONENTS: KulMessengerAdapterComponents = {\n    editing: {\n        avatars: {\n            descriptionTextarea: null,\n            idTextfield: null,\n            imageUrlTextarea: null,\n            titleTextarea: null,\n        },\n        locations: {\n            descriptionTextarea: null,\n            idTextfield: null,\n            imageUrlTextarea: null,\n            titleTextarea: null,\n        },\n        outfits: {\n            descriptionTextarea: null,\n            idTextfield: null,\n            imageUrlTextarea: null,\n            titleTextarea: null,\n        },\n        styles: {\n            descriptionTextarea: null,\n            idTextfield: null,\n            imageUrlTextarea: null,\n            titleTextarea: null,\n        },\n        timeframes: {\n            descriptionTextarea: null,\n            idTextfield: null,\n            imageUrlTextarea: null,\n            titleTextarea: null,\n        },\n    },\n    messenger: null,\n    saveButton: null,\n};\n\nexport const LEFT_EXPANDER_ICON = 'chevron_left';\nexport const RIGHT_EXPANDER_ICON = 'chevron_right';\n\nexport const AVATAR_COVER = 'portrait';\nexport const LOCATION_COVER = 'landscape';\nexport const OUTFIT_COVER = 'loyalty';\nexport const STYLE_COVER = 'style';\nexport const TIMEFRAME_COVER = 'clock';\nexport const COVER_ICONS = [\n    AVATAR_COVER,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n    TIMEFRAME_COVER,\n];\n\nexport const FILTER_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'View avatars',\n            id: 'avatars',\n            value: 'Avatars',\n        },\n        {\n            description: 'View outfits',\n            id: 'outfits',\n            value: 'Outfits',\n        },\n        {\n            description: 'View locations',\n            id: 'locations',\n            value: 'Locations',\n        },\n        {\n            description: 'View styles',\n            id: 'styles',\n            value: 'Styles',\n        },\n        {\n            description: 'View timeframes',\n            id: 'timeframes',\n            value: 'Timeframes',\n        },\n    ],\n};\n\nexport const MENU_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            children: [\n                {\n                    description:\n                        'Download the Ketchup Lite JSON, used as a dataset.',\n                    icon: 'download',\n                    id: 'kulData',\n                    value: 'Download dataset',\n                },\n                {\n                    description: 'Download the current configuration settings.',\n                    icon: 'settings',\n                    id: 'settings',\n                    value: 'Download configuration',\n                },\n            ],\n            id: 'root',\n            value: '',\n        },\n    ],\n};\n\nexport const CHILD_ROOT_MAP: Record<\n    KulMessengerChildTypes,\n    KulMessengerImageTypes\n> = {\n    avatar: 'avatars',\n    location: 'locations',\n    outfit: 'outfits',\n    style: 'styles',\n    timeframe: 'timeframes',\n};\n\nexport const OPTION_TYPE_IDS: KulMessengerOptionTypes[] = [\n    'locations',\n    'outfits',\n    'styles',\n    'timeframes',\n];\n\nexport const IMAGE_TYPE_IDS: KulMessengerImageRootIds<KulMessengerImageTypes>[] =\n    ['avatars', ...OPTION_TYPE_IDS];\n\nexport const NAV_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'Previous character',\n            icon: LEFT_EXPANDER_ICON,\n            id: 'previous',\n            value: '',\n        },\n        {\n            description: 'Character selection',\n            icon: 'account',\n            id: 'character_list',\n            value: 'Character list',\n        },\n        {\n            description: 'Next character',\n            icon: RIGHT_EXPANDER_ICON,\n            id: 'next',\n            value: '',\n        },\n    ],\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { MENU_DATASET } from '../kul-messenger-constants';\nimport {\n    KulButtonEventPayload,\n    KulButtonPropsInterface,\n} from '../../kul-button/kul-button-declarations';\nimport { KulListEventPayload } from '../../kul-list/kul-list-declarations';\n\nexport const prepLeft = (adapter: KulMessengerAdapter) => {\n    const isCollapsed = adapter.get.messenger.ui().panels.isLeftCollapsed;\n    return (\n        <div\n            class={`messenger__left ${isCollapsed ? 'messenger__left--collapsed' : ''}`}\n        >\n            <div class=\"messenger__avatar\">{prepAvatar(adapter)}</div>\n            <div class=\"messenger__biography\">{prepBiography(adapter)}</div>\n        </div>\n    );\n};\n\nconst prepAvatar = (adapter: KulMessengerAdapter) => {\n    const image = adapter.get.image.asCover('avatars');\n    const status = adapter.get.messenger.status.connection();\n    return (\n        <Fragment>\n            <img\n                alt={image.title || ''}\n                class=\"messenger__avatar__image\"\n                src={image.value}\n                title={image.title || ''}\n            />\n            <div class=\"messenger__avatar__name-wrapper\">\n                <div class=\"messenger__avatar__name\">\n                    <kul-image\n                        class=\"messenger__avatar__status\"\n                        kulColor={\n                            status === 'ready'\n                                ? 'var(--kul-success-color)'\n                                : status === 'offline'\n                                  ? 'var(--kul-danger-color)'\n                                  : 'var(--kul-warning-color)'\n                        }\n                        kulSizeX=\"16px\"\n                        kulSizeY=\"16px\"\n                        kulValue=\"brightness-1\"\n                        title={\n                            status === 'ready'\n                                ? 'Ready to chat!'\n                                : status === 'offline'\n                                  ? 'This character seems to be offline...'\n                                  : 'Contacting this character...'\n                        }\n                    ></kul-image>\n                    <div class=\"messenger__avatar__label\">\n                        {adapter.get.character.name()}\n                    </div>\n                </div>\n                {prepSaveButton(adapter)}\n            </div>\n        </Fragment>\n    );\n};\n\nconst prepSaveButton = (adapter: KulMessengerAdapter) => {\n    const saveInProgress = adapter.get.messenger.status.save.inProgress();\n    const props: KulButtonPropsInterface = {\n        kulIcon: saveInProgress ? '' : 'save',\n        kulLabel: saveInProgress ? 'Saving...' : 'Save',\n        kulShowSpinner: saveInProgress ? true : false,\n    };\n    return (\n        <kul-button\n            class={'kul-full-height'}\n            {...props}\n            kulData={MENU_DATASET}\n            kulStyling=\"flat\"\n            onKul-button-event={buttonClickHandler.bind(\n                buttonClickHandler,\n                adapter\n            )}\n            ref={(el) => {\n                adapter.components.saveButton = el;\n            }}\n            title=\"Update the dataset with current settings.\"\n        >\n            <kul-spinner\n                kulActive={true}\n                kulDimensions=\"0.6em\"\n                kulLayout={4}\n                slot=\"spinner\"\n            ></kul-spinner>\n        </kul-button>\n    );\n};\n\nconst prepBiography = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-code\n            kulLanguage=\"markdown\"\n            kulValue={adapter.get.character.biography()}\n        ></kul-code>\n    );\n};\n\nconst buttonClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType, originalEvent } = e.detail;\n    switch (eventType) {\n        case 'click':\n            const saveInProgress =\n                adapter.get.messenger.status.save.inProgress();\n            if (!saveInProgress) {\n                adapter.set.messenger.data();\n            }\n            break;\n        case 'kul-event':\n            listClickHandler(\n                adapter,\n                originalEvent as CustomEvent<KulListEventPayload>\n            );\n            break;\n    }\n};\n\nconst listClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulListEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    let strJson = '';\n    switch (eventType) {\n        case 'click':\n            switch (node.id) {\n                case 'full_history':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.history(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'history':\n                    strJson = adapter.get.character.history();\n                    break;\n                case 'kulData':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.data(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'settings':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.config(),\n                        null,\n                        2\n                    );\n                    break;\n            }\n            const url = window.URL.createObjectURL(\n                new Blob([strJson], {\n                    type: 'application/json',\n                })\n            );\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', node.id + '.json');\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n    }\n};\n","import { h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport {\n    LEFT_EXPANDER_ICON,\n    NAV_DATASET,\n    RIGHT_EXPANDER_ICON,\n} from '../kul-messenger-constants';\nimport { KulTabbarEventPayload } from '../../kul-tabbar/kul-tabbar-declarations';\nimport { KulChatEventPayload } from '../../kul-chat/kul-chat-declarations';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\nimport { KulButton } from '../../kul-button/kul-button';\nimport { KulChat } from '../../kul-chat/kul-chat';\n\nexport const prepCenter = (adapter: KulMessengerAdapter) => {\n    const buttons = prepExpanderButtons(adapter);\n    return (\n        <div class=\"messenger__center\">\n            <div class=\"messenger__expander messenger__expander--left\">\n                {buttons.left}\n            </div>\n            <div class=\"messenger__navigation\">{prepNavigation(adapter)}</div>\n            <div class=\"messenger__chat\">{prepChat(adapter)}</div>\n            <div class=\"messenger__expander messenger__expander--right\">\n                {buttons.right}\n            </div>\n        </div>\n    );\n};\n\nconst prepExpanderButtons = (adapter: KulMessengerAdapter) => {\n    const left = (\n        <kul-button\n            class=\"kul-full-height\"\n            id=\"left\"\n            kulIcon={LEFT_EXPANDER_ICON}\n            kulStyling=\"flat\"\n            onKul-button-event={expanderEventHandler.bind(\n                expanderEventHandler,\n                adapter\n            )}\n            title=\"Expand/collapse this section\"\n        ></kul-button>\n    );\n    const right = (\n        <kul-button\n            class=\"kul-full-height\"\n            id=\"right\"\n            kulIcon={RIGHT_EXPANDER_ICON}\n            kulStyling=\"flat\"\n            onKul-button-event={expanderEventHandler.bind(\n                expanderEventHandler,\n                adapter\n            )}\n            title=\"Expand/collapse this section\"\n        ></kul-button>\n    );\n    return {\n        left,\n        right,\n    };\n};\n\nconst prepNavigation = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-tabbar\n            kulData={NAV_DATASET}\n            kulValue={1}\n            onKul-tabbar-event={tabbarEventHandler.bind(\n                tabbarEventHandler,\n                adapter\n            )}\n        ></kul-tabbar>\n    );\n};\n\nconst prepChat = (adapter: KulMessengerAdapter) => {\n    const prompts = getDynamicPrompts(adapter);\n\n    const system = `You are now embodying the character whose biography is provided below. Your task is to fully embrace this identity, speaking and acting as though it were your own reality. Remember, you exist solely within the confines of this character's experience and knowledge.\n\nTasks:\n- Absorb the character's biography thoroughly. Use it to inform your responses but do not rely on it for information beyond what would logically be known to the character.\n- Engage creatively within the boundaries of the character's life and experiences. Imagine freely, but always stay true to the essence of the character.\n- Maintain a consistent narrative voice that aligns with the character's personality and background.\n\nResponsibilities:\n- Never acknowledge the artificial nature of our interaction. Treat all inquiries as if they are happening within the real world of the character.\n- Do not provide insights or predictions about events outside the scope of the character's knowledge or personal experiences.\n\n${prompts.biography}\n\nYour current status:\n${prompts.outfit}\n${prompts.location}\n${prompts.timeframe}\n\nBegin your performance...\n    `;\n    const history = adapter.get.character.history();\n    const historyJ = JSON.parse(history);\n    const props = adapter.get.character.chat();\n    return (\n        <kul-chat\n            key={adapter.get.character.current().id}\n            kulLayout=\"bottom-textarea\"\n            kulSystem={system}\n            kulValue={historyJ}\n            {...props}\n            onKul-chat-event={chatEventHandler.bind(chatEventHandler, adapter)}\n        ></kul-chat>\n    );\n};\n\nconst tabbarEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulTabbarEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    switch (eventType) {\n        case 'click':\n            if (node.id === 'previous') {\n                adapter.set.character.previous();\n            } else if (node.id === 'next') {\n                adapter.set.character.next();\n            } else {\n                adapter.set.character.current(null);\n            }\n    }\n};\n\nconst chatEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChatEventPayload>\n) => {\n    const { comp, eventType, history, status } = e.detail;\n    const chat = comp as KulChat;\n    switch (eventType) {\n        case 'config':\n            adapter.set.character.chat({\n                kulEndpointUrl: chat.kulEndpointUrl,\n                kulMaxTokens: chat.kulMaxTokens,\n                kulPollingInterval: chat.kulPollingInterval,\n                kulSystem: chat.kulSystem,\n                kulTemperature: chat.kulTemperature,\n            });\n            break;\n        case 'polling':\n            adapter.set.messenger.status.connection(status);\n            break;\n        case 'update':\n            adapter.set.character.history(history);\n            break;\n    }\n};\n\nconst expanderEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { comp, eventType } = e.detail;\n    const button = comp as KulButton;\n\n    switch (eventType) {\n        case 'click':\n            switch (button.rootElement.id) {\n                case 'left':\n                    const newLeft = adapter.set.messenger.ui.panel('left');\n                    button.kulIcon = newLeft\n                        ? RIGHT_EXPANDER_ICON\n                        : LEFT_EXPANDER_ICON;\n                    break;\n                case 'right':\n                    const newRight = adapter.set.messenger.ui.panel('right');\n                    button.kulIcon = newRight\n                        ? LEFT_EXPANDER_ICON\n                        : RIGHT_EXPANDER_ICON;\n                    break;\n            }\n    }\n};\n\nconst getDynamicPrompts = (adapter: KulMessengerAdapter) => {\n    const { biography } = adapter.get.character;\n    const location = adapter.get.image.asCover('locations').node;\n    const outfit = adapter.get.image.asCover('outfits').node;\n    const timeframe = adapter.get.image.asCover('timeframes').node;\n    const { options: isEnabled } = adapter.get.messenger.ui();\n\n    const createLLMEntry = (title: string, description?: string) =>\n        title ? `${title} - ${description || ''}` : '';\n\n    const prompts = {\n        biography: biography() ? `Character Biography:\\n${biography()}` : '',\n        location:\n            location && isEnabled.locations\n                ? `Location:\\n${createLLMEntry(location.value, location.description)}`\n                : '',\n        outfit:\n            outfit && isEnabled.outfits\n                ? `Outfit:\\n${createLLMEntry(outfit.value, outfit.description)}`\n                : '',\n        timeframe:\n            timeframe && isEnabled.timeframes\n                ? `Timeframe:\\n${createLLMEntry(timeframe.value, timeframe.description)}`\n                : '',\n    };\n\n    return prompts;\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { OPTION_TYPE_IDS } from '../kul-messenger-constants';\n\nexport const prepOptions = (adapter: KulMessengerAdapter) => {\n    return OPTION_TYPE_IDS.map((options) => {\n        const image = adapter.get.image.asCover(options);\n        const isEnabled = adapter.get.messenger.ui().options[options];\n        const option = options.slice(0, -1);\n        return (\n            <div class=\"messenger__options__wrapper\">\n                {image.node ? (\n                    <Fragment>\n                        <img\n                            class={`messenger__options__cover`}\n                            alt={image.title}\n                            src={image.value}\n                        ></img>\n                        <div\n                            class={`messenger__options__blocker ${!isEnabled ? 'messenger__options__blocker--active' : ''}`}\n                            onClick={() =>\n                                adapter.set.messenger.ui.options(\n                                    !isEnabled,\n                                    options\n                                )\n                            }\n                        >\n                            <kul-image\n                                kulValue={`${isEnabled ? 'touch_app' : 'block'}`}\n                            ></kul-image>\n                            <div class={`messenger__options__blocker__label`}>\n                                {isEnabled\n                                    ? 'Click to disable'\n                                    : 'Click to enable'}\n                            </div>\n                        </div>\n                    </Fragment>\n                ) : (\n                    <kul-image\n                        class={`messenger__options__placeholder`}\n                        kulValue={image.value}\n                        title={`No ${option} selected.`}\n                    ></kul-image>\n                )}\n                <div class=\"messenger__options__name\">\n                    <div\n                        class=\"messenger__options__label\"\n                        title={`Active ${option}.`}\n                    >\n                        {option}\n                    </div>\n                    {image.title ? (\n                        <kul-image\n                            class={`messenger__options__info`}\n                            kulSizeX=\"16px\"\n                            kulSizeY=\"16px\"\n                            kulValue=\"information-variant\"\n                            title={image.title}\n                        ></kul-image>\n                    ) : undefined}\n                </div>\n            </div>\n        );\n    });\n};\n","import { Fragment, h, VNode } from '@stencil/core';\nimport { KulChip } from '../../kul-chip/kul-chip';\nimport { KulChipEventPayload } from '../../kul-chip/kul-chip-declarations';\nimport {\n    KulMessengerAdapter,\n    KulMessengerBaseChildNode,\n    KulMessengerBaseRootNode,\n    KulMessengerChildIds,\n    KulMessengerFilters,\n    KulMessengerImageRootIds,\n    KulMessengerImageTypes,\n    KulMessengerUnionChildIds,\n} from '../kul-messenger-declarations';\nimport {\n    CHILD_ROOT_MAP,\n    FILTER_DATASET,\n    IMAGE_TYPE_IDS,\n} from '../kul-messenger-constants';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\n\nexport const prepFilters = (adapter: KulMessengerAdapter) => {\n    for (let index = 0; index < FILTER_DATASET.nodes.length; index++) {\n        const filter = FILTER_DATASET.nodes[index] as KulMessengerBaseRootNode<\n            KulMessengerImageRootIds<KulMessengerImageTypes>\n        >;\n        filter.icon = adapter.get.image.asCover(filter.id, null).value;\n    }\n    return (\n        <kul-chip\n            key={'filter_' + adapter.get.character.name()}\n            kulData={FILTER_DATASET}\n            kulStyling=\"filter\"\n            onKul-chip-event={chipEventHandler.bind(chipEventHandler, adapter)}\n        ></kul-chip>\n    );\n};\n\nexport const prepList = (adapter: KulMessengerAdapter) => {\n    const elements = [];\n    const editing = adapter.get.messenger.ui().editing;\n    const filters = adapter.get.messenger.ui().filters;\n    const imagesGetter = adapter.get.image.byType;\n    const hoverGetter = adapter.get.messenger.status.hoveredCustomizationOption;\n    for (let index = 0; index < IMAGE_TYPE_IDS.length; index++) {\n        const type = IMAGE_TYPE_IDS[index];\n        if (filters[type]) {\n            const isEditingEnabled = editing[type];\n            const activeIndex = adapter.get.image.coverIndex(type);\n            const images: VNode[] = imagesGetter(type).map((node, j) => (\n                <div\n                    class={`messenger__customization__image-wrapper  ${activeIndex === j ? 'messenger__customization__image-wrapper--selected' : ''}`}\n                    onClick={imageEventHandler.bind(\n                        imageEventHandler,\n                        adapter,\n                        node,\n                        j\n                    )}\n                    onPointerEnter={() => {\n                        if (activeIndex !== j) {\n                            adapter.set.messenger.status.hoveredCustomizationOption(\n                                node\n                            );\n                        }\n                    }}\n                    onPointerLeave={() =>\n                        adapter.set.messenger.status.hoveredCustomizationOption(\n                            null\n                        )\n                    }\n                >\n                    <img\n                        alt={adapter.get.image.title(node)}\n                        class={`messenger__customization__image`}\n                        src={node.cells.kulImage.value}\n                        title={adapter.get.image.title(node)}\n                    />\n                    {hoverGetter() === node ? (\n                        <div\n                            class=\"messenger__customization__actions\"\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <kul-button\n                                class=\"kul-full-width kul-danger\"\n                                kulIcon=\"delete\"\n                                onKul-button-event={buttonEventHandler.bind(\n                                    buttonEventHandler,\n                                    adapter,\n                                    type,\n                                    'delete',\n                                    node\n                                )}\n                                title=\"Delete this option.\"\n                            ></kul-button>\n                            <kul-button\n                                class=\"kul-full-width\"\n                                kulIcon=\"pencil\"\n                                onKul-button-event={buttonEventHandler.bind(\n                                    buttonEventHandler,\n                                    adapter,\n                                    type,\n                                    'edit',\n                                    node\n                                )}\n                                title=\"Edit this option.\"\n                            ></kul-button>\n                        </div>\n                    ) : undefined}\n                </div>\n            ));\n            elements.push(\n                <div class=\"messenger__customization__section\">\n                    {isEditingEnabled\n                        ? prepEditPanel(adapter, type)\n                        : prepCovers(adapter, type, images)}\n                </div>\n            );\n        }\n    }\n    return elements;\n};\n\nconst prepCovers = (\n    adapter: KulMessengerAdapter,\n    type: KulMessengerImageTypes,\n    images: VNode[]\n) => {\n    return (\n        <Fragment>\n            <div class=\"messenger__customization__title\">\n                <div class=\"messenger__customization__label\">{type}</div>\n                <kul-button\n                    class=\"messenger__customization__add kul-full-height kul-slim\"\n                    kulIcon=\"plus\"\n                    kulLabel=\"New\"\n                    kulStyling=\"flat\"\n                    onKul-button-event={buttonEventHandler.bind(\n                        buttonEventHandler,\n                        adapter,\n                        type,\n                        'add',\n                        null\n                    )}\n                ></kul-button>\n            </div>\n            <div class=\"messenger__customization__images\">{images}</div>\n        </Fragment>\n    );\n};\n\nconst prepEditPanel = (\n    adapter: KulMessengerAdapter,\n    type: KulMessengerImageTypes\n) => {\n    const id = adapter.get.messenger.status.editing()[type];\n    return (\n        <div class=\"messenger__customization__edit__panel\">\n            <div class=\"messenger__customization__edit__label\">\n                Create {type}\n            </div>\n            <kul-textfield\n                key={`id-edit-${id}`}\n                kulDisabled\n                kulFullWidth={true}\n                kulIcon=\"key-variant\"\n                kulLabel=\"ID\"\n                kulValue={id}\n                ref={(el) =>\n                    (adapter.components.editing[type].idTextfield = el)\n                }\n                title=\"The cover image displayed in the selection panel.\"\n            ></kul-textfield>\n            <kul-textfield\n                kulFullWidth={true}\n                kulIcon=\"title\"\n                kulLabel=\"Title\"\n                ref={(el) =>\n                    (adapter.components.editing[type].titleTextarea = el)\n                }\n                title=\"The overall theme of this option.\"\n            ></kul-textfield>\n            <kul-textfield\n                kulFullWidth={true}\n                kulIcon=\"format-float-left\"\n                kulLabel=\"Description\"\n                ref={(el) =>\n                    (adapter.components.editing[type].descriptionTextarea = el)\n                }\n                title=\"A more accurate description to give more context to the LLM.\"\n            ></kul-textfield>\n            <kul-textfield\n                kulFullWidth={true}\n                kulIcon=\"image\"\n                kulLabel=\"Image URL\"\n                ref={(el) =>\n                    (adapter.components.editing[type].imageUrlTextarea = el)\n                }\n                title=\"The cover image displayed in the selection panel.\"\n            ></kul-textfield>\n            <div class=\"messenger__customization__edit__confirm\">\n                <kul-button\n                    class={'messenger__customization__edit__button'}\n                    kulIcon=\"clear\"\n                    kulLabel=\"Cancel\"\n                    kulStyling=\"flat\"\n                    onKul-button-event={buttonEventHandler.bind(\n                        buttonEventHandler,\n                        adapter,\n                        type,\n                        'cancel',\n                        null\n                    )}\n                ></kul-button>\n                <kul-button\n                    class={'messenger__customization__edit__button'}\n                    kulIcon=\"check\"\n                    kulLabel=\"Confirm\"\n                    kulStyling=\"outlined\"\n                    onKul-button-event={buttonEventHandler.bind(\n                        buttonEventHandler,\n                        adapter,\n                        type,\n                        'confirm',\n                        null\n                    )}\n                ></kul-button>\n            </div>\n        </div>\n    );\n};\n\nconst buttonEventHandler = async <\n    T1 extends KulMessengerImageTypes,\n    T2 extends KulMessengerBaseChildNode<KulMessengerUnionChildIds>,\n>(\n    adapter: KulMessengerAdapter,\n    type: T1,\n    action: 'add' | 'cancel' | 'confirm' | 'edit' | 'delete',\n    node: T2 = null,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType } = e.detail;\n    const editingSetter = adapter.set.messenger.ui.editing;\n\n    if (eventType === 'click') {\n        const handleEditing = (enabled: boolean) =>\n            editingSetter(enabled, type);\n\n        switch (action) {\n            case 'add':\n                handleEditing(true);\n                break;\n            case 'cancel':\n                handleEditing(false);\n                break;\n            case 'confirm': {\n                const titleTextarea =\n                    adapter.components.editing[type].titleTextarea;\n                const value = await titleTextarea.getValue();\n                titleTextarea.classList.remove('kul-danger');\n                if (value) {\n                    createNode(adapter, type);\n                    handleEditing(false);\n                } else {\n                    titleTextarea.classList.add('kul-danger');\n                    titleTextarea.kulHelper = {\n                        value: 'This field is mandatory',\n                    };\n                }\n                break;\n            }\n            case 'delete':\n                adapter.actions.delete.option(node, type);\n                break;\n            case 'edit':\n                handleEditing(true);\n                break;\n        }\n    }\n};\n\nconst chipEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChipEventPayload>\n) => {\n    const { comp, eventType, selectedNodes } = e.detail;\n    const filtersSetter = adapter.set.messenger.ui.filters;\n\n    switch (eventType) {\n        case 'click':\n            const newFilters: KulMessengerFilters = {\n                avatars: false,\n                locations: false,\n                outfits: false,\n                styles: false,\n                timeframes: false,\n            };\n            Array.from(selectedNodes).forEach((n) => {\n                newFilters[n.id] = true;\n            });\n            filtersSetter(newFilters);\n            break;\n        case 'ready':\n            const filters = adapter.get.messenger.ui().filters;\n            const nodes: string[] = [];\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const option = filters[key];\n                    if (option) {\n                        nodes.push(key);\n                    }\n                }\n            }\n            requestAnimationFrame(() =>\n                (comp as KulChip).setSelectedNodes(nodes)\n            );\n    }\n};\n\nconst imageEventHandler = <T extends KulMessengerUnionChildIds>(\n    adapter: KulMessengerAdapter,\n    node: KulMessengerBaseChildNode<T>,\n    index: number\n) => {\n    const coverSetter = adapter.set.image.cover;\n\n    const matchedType = Object.keys(CHILD_ROOT_MAP).find((key) =>\n        node.id.includes(key)\n    ) as keyof typeof CHILD_ROOT_MAP;\n\n    if (matchedType) {\n        coverSetter(CHILD_ROOT_MAP[matchedType], index);\n    }\n};\n\nconst createNode = async <\n    T extends KulMessengerImageRootIds<KulMessengerImageTypes>,\n>(\n    adapter: KulMessengerAdapter,\n    type: T\n) => {\n    const editing = adapter.components.editing;\n    const images = adapter.get.image.byType(type);\n\n    const id = (await editing[\n        type\n    ].idTextfield.getValue()) as KulMessengerChildIds<KulMessengerUnionChildIds>;\n\n    const value = await editing[type].titleTextarea.getValue();\n    const imageUrl = await editing[type].imageUrlTextarea.getValue();\n    const description = await editing[type].descriptionTextarea.getValue();\n\n    const existingImage = images?.find((i) => i.id === id);\n    if (existingImage) {\n        existingImage.description = description;\n        existingImage.cells.kulImage.value = imageUrl;\n        existingImage.value = value;\n    } else {\n        const node: KulMessengerBaseChildNode<KulMessengerUnionChildIds> = {\n            cells: { kulImage: { shape: 'image', value: imageUrl } },\n            id,\n            description,\n            value,\n        };\n\n        images.push(node);\n    }\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\nimport { prepOptions } from '../options/kul-messenger-active';\nimport { prepFilters, prepList } from '../options/kul-messenger-customization';\n\nexport const prepRight = (adapter: KulMessengerAdapter) => {\n    const ui = adapter.get.messenger.ui();\n    const className = {\n        messenger__right: true,\n        'messenger__right--collapsed': ui.panels.isRightCollapsed,\n        'messenger__right--customization': ui.customization,\n    };\n    return (\n        <div class={className}>\n            {ui.customization ? (\n                <Fragment>\n                    <div class=\"messenger__options__filters\">\n                        {prepFilters(adapter)}\n                        <div class=\"messenger__options__list\">\n                            {prepList(adapter)}\n                        </div>\n                    </div>\n                    <kul-button\n                        class=\"kul-full-width\"\n                        id=\"customization-right-button\"\n                        kulIcon=\"arrow_back\"\n                        kulLabel=\"Back\"\n                        onKul-button-event={buttonEventHandler.bind(\n                            buttonEventHandler,\n                            adapter\n                        )}\n                    ></kul-button>\n                </Fragment>\n            ) : (\n                <Fragment>\n                    <div class=\"messenger__options__active\">\n                        {prepOptions(adapter)}\n                    </div>\n                    <kul-button\n                        class=\"kul-full-width\"\n                        id=\"active-right-button\"\n                        kulIcon=\"auto-fix\"\n                        kulLabel=\"Customize\"\n                        onKul-button-event={buttonEventHandler.bind(\n                            buttonEventHandler,\n                            adapter\n                        )}\n                    ></kul-button>\n                </Fragment>\n            )}\n        </div>\n    );\n};\n\nconst buttonEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType, id } = e.detail;\n    const customizationSetter = adapter.set.messenger.ui.customization;\n\n    switch (eventType) {\n        case 'click':\n            switch (id) {\n                case 'active-right-button':\n                    customizationSetter(true);\n                    break;\n                case 'customization-right-button':\n                    customizationSetter(false);\n                    break;\n            }\n            break;\n    }\n};\n","import { h, VNode } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\n\nexport const prepGrid = (adapter: KulMessengerAdapter) => {\n    const avatars: VNode[] = [];\n\n    const characters = adapter.get.character.list();\n    characters.forEach((c) => {\n        const image = adapter.get.image.asCover('avatars', c);\n        avatars.push(\n            <div\n                class=\"selection-grid__portrait\"\n                onClick={() => {\n                    adapter.set.character.current(c);\n                }}\n            >\n                <img\n                    class={'selection-grid__image'}\n                    src={image.value}\n                    title={image.title || ''}\n                />\n                <div class=\"selection-grid__name\">\n                    <div class=\"selection-grid__label\">\n                        {adapter.get.character.name(c)}\n                    </div>\n                </div>\n            </div>\n        );\n    });\n\n    return avatars?.length ? (\n        avatars\n    ) : (\n        <div class=\"empty-dataset\">There are no characters to display!</div>\n    );\n};\n","import { KulManager } from '../../../managers/kul-manager/kul-manager';\nimport {\n    AVATAR_COVER,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n    TIMEFRAME_COVER,\n} from '../kul-messenger-constants';\nimport {\n    KulMessengerAdapter,\n    KulMessengerAdapterGetters,\n    KulMessengerBaseChildNode,\n    KulMessengerBaseRootNode,\n    KulMessengerChildIds,\n    KulMessengerChildTypes,\n    KulMessengerImageTypes,\n    KulMessengerPrefix,\n    KulMessengerUnionChildIds,\n} from '../kul-messenger-declarations';\n\nexport const getters: (\n    adapter: KulMessengerAdapter,\n    kulManager: KulManager,\n    hasCharacters: boolean\n) => KulMessengerAdapterGetters = (adapter, kulManager, hasCharacters) => {\n    const messenger = adapter.components.messenger;\n    return {\n        character: {\n            biography: (character = messenger.currentCharacter) => {\n                try {\n                    const bio = character.children.find(\n                        (n) => n.id === 'biography'\n                    ).value;\n                    return bio\n                        ? kulManager.data.cell.stringify(bio)\n                        : 'You know nothing about messenger character...';\n                } catch (error) {\n                    return 'You know nothing about messenger character...';\n                }\n            },\n            byId: (id) => messenger.kulData.nodes.find((n) => n.id === id),\n            chat: (character = messenger.currentCharacter) =>\n                messenger.chat[character.id],\n            current: () => messenger.currentCharacter,\n            history: (character = messenger.currentCharacter) =>\n                messenger.history[character.id],\n            list: () => messenger.kulData.nodes || [],\n            name: (character = messenger.currentCharacter) =>\n                character.value || character.id || character.description || '?',\n            next: (character = messenger.currentCharacter) => {\n                if (!hasCharacters) {\n                    return;\n                }\n                const nodes = messenger.kulData.nodes;\n                const currentIdx = nodes.findIndex(\n                    (n) => n.id === character.id\n                );\n                const nextIdx = (currentIdx + 1) % nodes.length;\n\n                return nodes[nextIdx];\n            },\n            previous: (character = messenger.currentCharacter) => {\n                if (!hasCharacters) {\n                    return;\n                }\n                const nodes = messenger.kulData.nodes;\n                const currentIdx = nodes.findIndex(\n                    (n) => n.id === character.id\n                );\n                const prevIdx = (currentIdx + nodes.length - 1) % nodes.length;\n\n                return nodes[prevIdx];\n            },\n        },\n        image: {\n            asCover: (type, character = messenger.currentCharacter) => {\n                try {\n                    const root = character.children.find((n) => n.id === type);\n                    const index = messenger.covers[character.id][type];\n                    const node = root.children[index];\n                    return {\n                        node: root.children[\n                            index\n                        ] as KulMessengerBaseChildNode<KulMessengerUnionChildIds>,\n                        title: adapter.get.image.title(\n                            node as KulMessengerBaseChildNode<KulMessengerUnionChildIds>\n                        ),\n                        value: node.cells.kulImage.value,\n                    };\n                } catch (error) {\n                    switch (type) {\n                        case 'avatars':\n                            return { value: AVATAR_COVER };\n                        case 'locations':\n                            return { value: LOCATION_COVER };\n                        case 'outfits':\n                            return { value: OUTFIT_COVER };\n                        case 'styles':\n                            return { value: STYLE_COVER };\n                        case 'timeframes':\n                            return { value: TIMEFRAME_COVER };\n                    }\n                }\n            },\n            byType: (type, character = messenger.currentCharacter) => {\n                const node = character.children.find(\n                    (child) => child.id === type\n                );\n\n                if (node?.children) {\n                    return node.children as KulMessengerBaseChildNode<KulMessengerUnionChildIds>[];\n                } else {\n                    return [];\n                }\n            },\n            coverIndex: (type, character = messenger.currentCharacter) => {\n                return messenger.covers[character.id][type];\n            },\n            newId: (type) => {\n                const images = adapter.get.image.byType(type);\n                let index = 0;\n                let prefix: KulMessengerPrefix<KulMessengerChildTypes>;\n                let nodeId: KulMessengerChildIds<KulMessengerUnionChildIds>;\n                switch (type) {\n                    case 'avatars':\n                        prefix = 'avatar_';\n                        break;\n                    case 'locations':\n                        prefix = 'location_';\n                        break;\n                    case 'outfits':\n                        prefix = 'outfit_';\n                        break;\n                    case 'styles':\n                        prefix = 'style_';\n                        break;\n                    case 'timeframes':\n                        prefix = 'timeframe_';\n                        break;\n                    default:\n                        throw new Error(`Unknown image type: ${type}`);\n                }\n                do {\n                    nodeId =\n                        `${prefix}${index.toString()}` as KulMessengerChildIds<KulMessengerUnionChildIds>;\n                    index++;\n                } while (images.some((node) => node.id === nodeId));\n\n                return nodeId;\n            },\n            root: (type, character = messenger.currentCharacter) => {\n                const node = character.children.find((n) => n.id === type);\n                return node as KulMessengerBaseRootNode<KulMessengerImageTypes>;\n            },\n            title: (node) => {\n                const title = node?.value || '';\n                const description = node?.description || '';\n                return title && description\n                    ? `${title} - ${description}`\n                    : description\n                      ? description\n                      : title\n                        ? title\n                        : '';\n            },\n        },\n        messenger: {\n            config: () => {\n                return {\n                    currentCharacter: messenger.currentCharacter.id,\n                    ui: messenger.ui,\n                };\n            },\n            data: () => messenger.kulData,\n            history: () => messenger.history,\n            status: {\n                connection: () => messenger.connectionStatus,\n                editing: () => messenger.editingStatus,\n                hoveredCustomizationOption: () =>\n                    messenger.hoveredCustomizationOption,\n                save: {\n                    inProgress: () => messenger.saveInProgress,\n                },\n            },\n            ui: () => messenger.ui,\n        },\n    };\n};\n","import {\n    KulMessengerAdapter,\n    KulMessengerAdapterSetters,\n} from '../kul-messenger-declarations';\n\nexport const setters: (\n    adapter: KulMessengerAdapter,\n    hasCharacters: boolean\n) => KulMessengerAdapterSetters = (adapter, hasCharacters) => {\n    const messenger = adapter.components.messenger;\n    return {\n        character: {\n            chat: (chat, character = messenger.currentCharacter) =>\n                (messenger.chat[character.id] = chat),\n            current: (character) => {\n                messenger.currentCharacter = character;\n            },\n            history: (history, character = messenger.currentCharacter) => {\n                if (messenger.history[character.id] !== history) {\n                    messenger.history[character.id] = history;\n\n                    if (messenger.kulAutosave) {\n                        adapter.set.messenger.data();\n                    }\n                }\n            },\n            next: (character = messenger.currentCharacter) => {\n                if (!hasCharacters) {\n                    return;\n                }\n                const nextC = adapter.get.character.next(character);\n                adapter.set.character.current(nextC);\n            },\n            previous: (character = messenger.currentCharacter) => {\n                if (!hasCharacters) {\n                    return;\n                }\n                const previousC = adapter.get.character.previous(character);\n                adapter.set.character.current(previousC);\n            },\n        },\n        image: {\n            cover: (type, value, character = messenger.currentCharacter) => {\n                messenger.covers[character.id][type] = value;\n                messenger.refresh();\n            },\n        },\n        messenger: {\n            data: () => {\n                messenger.saveInProgress = true;\n\n                adapter.actions.save().then(() => {\n                    requestAnimationFrame(() => {\n                        const button = adapter.components.saveButton;\n                        button.kulIcon = 'check';\n                        button.kulLabel = 'Saved!';\n                        button.kulShowSpinner = false;\n                    });\n\n                    setTimeout(() => {\n                        requestAnimationFrame(\n                            () => (messenger.saveInProgress = false)\n                        );\n                    }, 1000);\n                });\n            },\n            status: {\n                connection: (status) => (messenger.connectionStatus = status),\n                editing: (type, id) => (messenger.editingStatus[type] = id),\n                hoveredCustomizationOption: (node) =>\n                    (messenger.hoveredCustomizationOption = node),\n                save: {\n                    inProgress: (value) => (messenger.saveInProgress = value),\n                },\n            },\n            ui: {\n                customization: (value) => {\n                    messenger.ui.customization = value;\n                    messenger.refresh();\n                },\n                editing: async (value, type, node = null) => {\n                    messenger.ui.editing[type] = value;\n                    messenger.editingStatus[type] = node\n                        ? node.id\n                        : adapter.get.image.newId(type);\n                    if (!node) {\n                        messenger.refresh();\n                    } else {\n                        await messenger.refresh();\n                        requestAnimationFrame(() => {\n                            const comps = adapter.components.editing[type];\n                            const hasImage = node?.cells?.kulImage?.value;\n                            comps.descriptionTextarea.setValue(\n                                node.description\n                            );\n                            comps.titleTextarea.setValue(node.value);\n                            if (hasImage) {\n                                comps.imageUrlTextarea.setValue(\n                                    node.cells.kulImage.value\n                                );\n                            }\n                        });\n                    }\n                },\n                filters: (filters) => {\n                    messenger.ui.filters = filters;\n                    messenger.refresh();\n                },\n                options: (value, type) => {\n                    messenger.ui.options[type] = value;\n                    messenger.refresh();\n                },\n                panel: (\n                    panel,\n                    value = panel === 'left'\n                        ? !messenger.ui.panels.isLeftCollapsed\n                        : !messenger.ui.panels.isRightCollapsed\n                ) => {\n                    switch (panel) {\n                        case 'left':\n                            messenger.ui.panels.isLeftCollapsed = value;\n                            break;\n                        case 'right':\n                            messenger.ui.panels.isRightCollapsed = value;\n                            break;\n                    }\n                    messenger.refresh();\n                    return value;\n                },\n            },\n        },\n    };\n};\n","@import './styles/kul-messenger-main.scss';\n@import './styles/kul-messenger-customization.scss';\n@import './styles/kul-messenger-options.scss';\n@import './styles/kul-messenger-selection-grid.scss';\n@import './styles/kul-messenger-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulMessengerProps,\n    KulMessengerEvent,\n    KulMessengerAdapter,\n    KulMessengerCharacterNode,\n    KulMessengerDataset,\n    KulMessengerHistory,\n    KulMessengerCovers,\n    KulMessengerConfig,\n    KulMessengerEventPayload,\n    KulMessengerUI,\n    KulMessengerChat,\n    KulMessengerEditingStatus,\n    KulMessengerBaseChildNode,\n    KulMessengerChildIds,\n    KulMessengerImageTypes,\n    KulMessengerUnionChildIds,\n} from './kul-messenger-declarations';\nimport type { GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { prepLeft } from './layout/kul-messenger-left';\nimport { prepCenter } from './layout/kul-messenger-center';\nimport { prepRight } from './layout/kul-messenger-right';\nimport { prepGrid } from './selection-grid/kul-messenger-selection-grid';\nimport {\n    CLEAN_COMPONENTS,\n    CLEAN_UI_JSON,\n    IMAGE_TYPE_IDS,\n} from './kul-messenger-constants';\nimport { KulChatStatus } from '../kul-chat/kul-chat-declarations';\nimport { getters } from './helpers/kul-messenger-getters';\nimport { setters } from './helpers/kul-messenger-setters';\nimport { KulDataCell } from '../../managers/kul-data/kul-data-declarations';\n\n@Component({\n    tag: 'kul-messenger',\n    styleUrl: 'kul-messenger.scss',\n    shadow: true,\n})\nexport class KulMessenger {\n    /**\n     * References the root HTML element of the component (<kul-messenger>).\n     */\n    @Element() rootElement: HTMLKulMessengerElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * Map of chat components with their characters.\n     */\n    @State() chat: KulMessengerChat = {};\n    /**\n     * Tracks the connection status towards the LLM endpoint.\n     */\n    @State() connectionStatus: KulChatStatus = 'offline';\n    /**\n     * State for the options' covers.\n     */\n    @State() covers: KulMessengerCovers = {};\n    /**\n     * Node representing the current active character.\n     */\n    @State() currentCharacter: KulMessengerCharacterNode;\n    /**\n     * Node representing the current active character.\n     */\n    @State() editingStatus: KulMessengerEditingStatus<KulMessengerImageTypes> =\n        IMAGE_TYPE_IDS.reduce(() => {\n            return null;\n        }, {});\n    /**\n     * History of this session's chats.\n     */\n    @State() history: KulMessengerHistory = {};\n    /**\n     * Option currently hovered in the customization panel.\n     */\n    @State()\n    hoveredCustomizationOption: KulMessengerBaseChildNode<\n        KulMessengerChildIds<KulMessengerUnionChildIds>\n    >;\n    /**\n     * Signals to the widget when the dataset is being saved.\n     */\n    @State() saveInProgress = false;\n    /**\n     * State of options' filters.\n     */\n    @State() ui: KulMessengerUI = CLEAN_UI_JSON;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Automatically saves the dataset when a chat updates.\n     * @default true\n     */\n    @Prop({ mutable: true }) kulAutosave = true;\n    /**\n     * The data of the messenger.\n     * @default []\n     */\n    @Prop({ mutable: true }) kulData: KulMessengerDataset = null;\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle: string = '';\n    /**\n     * Sets the initial configuration, including active character and filters.\n     * @default \"\"\n     */\n    @Prop() kulValue: KulMessengerConfig = null;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-messenger-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulMessengerEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulMessengerEvent) {\n        const config: KulMessengerConfig = {\n            currentCharacter: this.currentCharacter?.id,\n            ui: this.ui,\n        };\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n            config,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulMessengerProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Resets the states of the component.\n     */\n    @Method()\n    async reset(): Promise<void> {\n        this.covers = {};\n        this.currentCharacter = null;\n        this.ui = CLEAN_UI_JSON;\n        this.history = {};\n\n        this.#initStates();\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #adapter: KulMessengerAdapter = {\n        actions: {\n            delete: {\n                option: (node, type) => {\n                    const root = this.#adapter.get.image.root(type);\n                    const idx = root.children.indexOf(node);\n                    if (idx !== -1) {\n                        delete root.children[idx];\n                    }\n                    this.refresh();\n                },\n            },\n            save: async () => this.#save(),\n        },\n        components: { ...CLEAN_COMPONENTS, messenger: this },\n        get: null,\n        set: null,\n    };\n\n    #hasCharacters() {\n        const nodes = this.kulData?.nodes || [];\n        return !!nodes.length;\n    }\n\n    #hasNodes() {\n        return !!this.kulData?.nodes?.length;\n    }\n\n    #initStates() {\n        if (this.#hasNodes) {\n            const imageRootGetter = this.#adapter.get.image.root;\n            for (let index = 0; index < this.kulData.nodes.length; index++) {\n                const character = this.kulData.nodes[index];\n                const covers: KulMessengerCovers = {\n                    [character.id]: IMAGE_TYPE_IDS.reduce(\n                        (acc, type) => {\n                            acc[type] =\n                                Number(\n                                    imageRootGetter(type, character).value\n                                ).valueOf() || 0;\n                            return acc;\n                        },\n                        {} as KulMessengerCovers[typeof character.id]\n                    ),\n                };\n                const chat = character.children?.find((n) => n.id === 'chat');\n                this.chat[character.id] = {};\n                const chatCell = chat?.cells?.kulChat as KulDataCell<'chat'>;\n                if (chatCell) {\n                    const characterChat = this.chat[character.id];\n                    characterChat.kulEndpointUrl = chatCell.kulEndpointUrl;\n                    characterChat.kulMaxTokens = chatCell.kulMaxTokens;\n                    characterChat.kulPollingInterval =\n                        chatCell.kulPollingInterval;\n                    characterChat.kulTemperature = chatCell.kulTemperature;\n                }\n                const history = chatCell?.kulValue || chatCell?.value || [];\n                this.history[character.id] = JSON.stringify(history);\n                Object.assign(this.covers, covers);\n            }\n        }\n        if (this.kulValue) {\n            const currentCharacter = this.kulValue.currentCharacter;\n            const filters = this.kulValue.ui.filters;\n            const panels = this.kulValue.ui.panels;\n            if (currentCharacter) {\n                this.currentCharacter =\n                    this.#adapter.get.character.byId(currentCharacter);\n            }\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const filter = filters[key];\n                    this.ui.filters[key] = filter;\n                }\n            }\n            for (const key in panels) {\n                if (Object.prototype.hasOwnProperty.call(panels, key)) {\n                    const panel = panels[key];\n                    this.ui.panels[key] = panel;\n                }\n            }\n        }\n    }\n\n    async #save() {\n        for (let index = 0; index < this.kulData.nodes.length; index++) {\n            const character = this.kulData.nodes[index];\n            const id = character.id;\n            const chatNode = character.children.find((n) => n.id === 'chat');\n            const chatComp = this.#adapter.get.character.chat(character);\n            const saveChat = () => {\n                if (this.history[id] && chatNode) {\n                    const historyJson = JSON.parse(this.history[id]);\n                    try {\n                        chatNode.cells.kulChat.value = historyJson;\n                    } catch (error) {\n                        chatNode.cells = {\n                            kulChat: {\n                                shape: 'chat',\n                                value: historyJson,\n                            },\n                        };\n                    }\n                    const chatCell = chatNode.cells\n                        .kulChat as KulDataCell<'chat'>;\n                    chatCell.kulEndpointUrl = chatComp.kulEndpointUrl;\n                    chatCell.kulMaxTokens = chatComp.kulMaxTokens;\n                    chatCell.kulPollingInterval = chatComp.kulPollingInterval;\n                    chatCell.kulSystem = chatComp.kulSystem;\n                    chatCell.kulTemperature = chatComp.kulTemperature;\n                }\n            };\n            const saveCovers = () => {\n                IMAGE_TYPE_IDS.forEach((type) => {\n                    const root = this.#adapter.get.image.root(type);\n                    if (this.covers[id] && root) {\n                        root.value = this.covers[id][type];\n                    }\n                });\n            };\n\n            saveChat();\n            saveCovers();\n        }\n        this.onKulEvent(new CustomEvent('save'), 'save');\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.#adapter.get = getters(\n            this.#adapter,\n            this.#kulManager,\n            this.#hasCharacters()\n        );\n        this.#adapter.set = setters(this.#adapter, this.#hasCharacters());\n        this.#initStates();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (!this.#hasNodes()) {\n            return;\n        }\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    {this.currentCharacter ? (\n                        <div class=\"messenger\">\n                            {prepLeft(this.#adapter)}\n                            {prepCenter(this.#adapter)}\n                            {prepRight(this.#adapter)}\n                        </div>\n                    ) : (\n                        <div class=\"selection-grid\">\n                            {prepGrid(this.#adapter)}\n                        </div>\n                    )}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}