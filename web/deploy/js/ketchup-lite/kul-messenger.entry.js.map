{"file":"kul-messenger.entry.js","mappings":"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","names":["buttonEventHandler"],"sources":["src/components/kul-messenger/kul-messenger-declarations.ts","src/components/kul-messenger/kul-messenger-constants.ts","src/components/kul-messenger/messenger/left.tsx","src/components/kul-messenger/messenger/center.tsx","src/components/kul-messenger/options/active.tsx","src/components/kul-messenger/options/customization.tsx","src/components/kul-messenger/messenger/right.tsx","src/components/kul-messenger/selection-grid/selection-grid.tsx","src/components/kul-messenger/kul-messenger.scss?tag=kul-messenger&encapsulation=shadow","src/components/kul-messenger/kul-messenger.tsx"],"sourcesContent":["import type { KulEventPayload } from '../../types/GenericTypes';\nimport {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport {\n    KulChatPropsInterface,\n    KulChatStatus,\n} from '../kul-chat/kul-chat-declarations';\n\nexport interface KulMessengerAdapter {\n    components: KulMessengerComponents;\n    get: {\n        character: {\n            biography: (character?: KulMessengerCharacterNode) => string;\n            byId: (id: string) => KulMessengerCharacterNode;\n            chat: (\n                character?: KulMessengerCharacterNode\n            ) => KulChatPropsInterface;\n            current: () => KulMessengerCharacterNode;\n            history: (character?: KulMessengerCharacterNode) => string;\n            list: () => KulMessengerCharacterNode[];\n            name: (character?: KulMessengerCharacterNode) => string;\n            next: (\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerCharacterNode;\n            previous: (\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerCharacterNode;\n        };\n        image: {\n            asCover: (\n                type: KulMessengerImageRootNodesIds,\n                character?: KulMessengerCharacterNode\n            ) => {\n                node?: KulMessengerImageChildNode;\n                title?: string;\n                value: string;\n            };\n            byType: <T extends KulMessengerImageRootNodesIds>(\n                type: T,\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerImageNodeTypeMap[T]['children'][number][];\n            coverIndex: (\n                type: KulMessengerImageRootNodesIds,\n                character?: KulMessengerCharacterNode\n            ) => number;\n            root: <T extends KulMessengerImageRootNodesIds>(\n                type: T,\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerImageNodeTypeMap[T];\n            title: (node: KulMessengerImageChildNode) => string;\n        };\n        messenger: {\n            config: () => KulMessengerConfig;\n            data: () => KulMessengerDataset;\n            history: () => KulMessengerHistory;\n            status: {\n                connection: () => KulChatStatus;\n                save: {\n                    inProgress: () => boolean;\n                };\n            };\n            ui: () => KulMessengerUI;\n        };\n    };\n    set: {\n        character: {\n            chat: (\n                chat: KulChatPropsInterface,\n                character?: KulMessengerCharacterNode\n            ) => void;\n            current: (character?: KulMessengerCharacterNode) => void;\n            history: (\n                history: string,\n                character?: KulMessengerCharacterNode\n            ) => void;\n            next: (character?: KulMessengerCharacterNode) => void;\n            previous: (character?: KulMessengerCharacterNode) => void;\n        };\n        image: {\n            cover: (\n                type: KulMessengerImageRootNodesIds,\n                value: number,\n                character?: KulMessengerCharacterNode\n            ) => void;\n        };\n        messenger: {\n            data: () => void;\n            status: {\n                connection: (status: KulChatStatus) => void;\n                save: {\n                    inProgress: (value: boolean) => void;\n                };\n            };\n            ui: {\n                customization: (value: boolean) => void;\n                editing: (\n                    value: boolean,\n                    type: KulMessengerImageRootNodesIds\n                ) => void;\n                filters: (filter: KulMessengerFilters) => void;\n                options: (\n                    value: boolean,\n                    type: KulMessengerOptionRootNodesIds\n                ) => void;\n                panel: (\n                    panel: KulMessengerPanelsValue,\n                    value?: boolean\n                ) => boolean;\n            };\n        };\n    };\n}\n\nexport interface KulMessengerBaseNode<T extends KulDataNode>\n    extends KulDataNode {\n    id: string;\n    value: unknown;\n    children?: T[];\n}\n\nexport interface KulMessengerAvatarNode\n    extends KulMessengerBaseNode<KulMessengerAvatarNode> {\n    id: `avatar_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerAvatarsNode\n    extends KulMessengerBaseNode<KulMessengerAvatarNode> {\n    id: 'avatars';\n    value: number;\n}\n\nexport interface KulMessengerBiographyNode extends KulMessengerBaseNode<never> {\n    id: 'biography';\n    value: string;\n}\n\nexport interface KulMessengerCharacterNode\n    extends KulMessengerBaseNode<KulDataNode> {\n    children: [\n        KulMessengerAvatarsNode,\n        KulMessengerBiographyNode,\n        KulMessengerChatNode,\n        KulMessengerLocationsNode,\n        KulMessengerOutfitsNode,\n        KulMessengerStylesNode,\n        KulMessengerTimeframesNode,\n    ];\n    id: `character_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerChat {\n    [index: `character_${string}`]: KulChatPropsInterface;\n}\n\nexport interface KulMessengerChatNode extends KulMessengerBaseNode<never> {\n    id: 'chat';\n    value: string;\n}\n\nexport interface KulMessengerComponents {\n    editing: {\n        [K in KulMessengerImageRootNodesIds]: KulMessengerImageEditComponents;\n    };\n    saveButton: HTMLKulButtonElement;\n}\n\nexport interface KulMessengerCovers {\n    [index: `character_${string}`]: {\n        [K in KulMessengerImageRootNodesIds]: number;\n    };\n}\n\nexport interface KulMessengerDataset extends KulDataDataset {\n    nodes?: KulMessengerCharacterNode[];\n}\n\nexport type KulMessengerEvent = 'ready' | 'save';\n\nexport interface KulMessengerEventPayload extends KulEventPayload {\n    config: KulMessengerConfig;\n}\n\nexport interface KulMessengerFilters extends KulMessengerOptions {\n    avatars: boolean;\n}\n\nexport interface KulMessengerHistory {\n    [index: `character_${string}`]: string;\n}\n\nexport type KulMessengerImageChildNode =\n    | KulMessengerAvatarNode\n    | KulMessengerLocationNode\n    | KulMessengerOutfitNode\n    | KulMessengerStyleNode\n    | KulMessengerTimeframeNode;\n\nexport type KulMessengerImageChildrenNodes = KulMessengerImageChildNode[];\n\nexport interface KulMessengerImageEditComponents {\n    descriptionTextarea: HTMLKulTextfieldElement;\n    titleTextarea: HTMLKulTextfieldElement;\n    imageUrlTextarea: HTMLKulTextfieldElement;\n}\n\nexport type KulMessengerImageRootNodes =\n    | KulMessengerAvatarsNode\n    | KulMessengerLocationsNode\n    | KulMessengerOutfitsNode\n    | KulMessengerStylesNode\n    | KulMessengerTimeframesNode;\n\nexport type KulMessengerImageNodeTypeMap = {\n    avatars: KulMessengerAvatarsNode;\n    locations: KulMessengerLocationsNode;\n    outfits: KulMessengerOutfitsNode;\n    styles: KulMessengerStylesNode;\n    timeframes: KulMessengerTimeframesNode;\n};\n\nexport type KulMessengerImageNodesPrefixes =\n    `${'avatar' | 'location' | 'outfit' | 'style' | 'timeframe'}_`;\n\nexport type KulMessengerImageNodesIds =\n    `${'avatar' | 'location' | 'outfit' | 'style' | 'timeframe'}_${string}`;\n\nexport type KulMessengerImageRootNodesIds = keyof KulMessengerImageNodeTypeMap;\n\nexport interface KulMessengerConfig {\n    currentCharacter: string;\n    ui: KulMessengerUI;\n}\n\nexport interface KulMessengerLocationNode extends KulMessengerBaseNode<never> {\n    id: `location_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerLocationsNode\n    extends KulMessengerBaseNode<KulMessengerLocationNode> {\n    id: 'locations';\n    value: number;\n}\n\nexport type KulMessengerOptionNodeTypeMap = {\n    locations: KulMessengerLocationsNode;\n    outfits: KulMessengerOutfitsNode;\n    styles: KulMessengerStylesNode;\n    timeframes: KulMessengerTimeframesNode;\n};\n\nexport interface KulMessengerOptions {\n    locations: boolean;\n    outfits: boolean;\n    styles: boolean;\n    timeframes: boolean;\n}\n\nexport type KulMessengerOptionRootNodesIds =\n    keyof KulMessengerOptionNodeTypeMap;\n\nexport interface KulMessengerOutfitNode extends KulMessengerBaseNode<never> {\n    id: `outfit_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerOutfitsNode\n    extends KulMessengerBaseNode<KulMessengerOutfitNode> {\n    id: 'outfits';\n    value: number;\n}\n\nexport interface KulMessengerPanels {\n    isLeftCollapsed: boolean;\n    isRightCollapsed: boolean;\n}\n\nexport type KulMessengerPanelsValue = 'left' | 'right';\n\nexport enum KulMessengerProps {\n    kulAutosave = 'Automatically saves the dataset when a chat updates.',\n    kulData = 'The actual data of the component.',\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'Sets the initial configuration, including active character and filters.',\n}\n\nexport interface KulMessengerPropsInterface {\n    kulAutosave?: boolean;\n    kulData?: KulMessengerDataset;\n    kulStyle?: string;\n    kulValue?: KulMessengerConfig;\n}\n\nexport interface KulMessengerStyleNode extends KulMessengerBaseNode<never> {\n    id: `style_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerStylesNode\n    extends KulMessengerBaseNode<KulMessengerStyleNode> {\n    id: 'styles';\n    value: number;\n}\n\nexport interface KulMessengerTimeframeNode extends KulMessengerBaseNode<never> {\n    id: `timeframe_${string}`;\n    value: string;\n}\n\nexport interface KulMessengerTimeframesNode\n    extends KulMessengerBaseNode<KulMessengerTimeframeNode> {\n    id: 'timeframes';\n    value: number;\n}\n\nexport interface KulMessengerUI {\n    customization: boolean;\n    editing: KulMessengerFilters;\n    filters: KulMessengerFilters;\n    options: KulMessengerOptions;\n    panels: KulMessengerPanels;\n}\n","import { KulDataDataset } from '../../managers/kul-data/kul-data-declarations';\nimport {\n    KulMessengerComponents,\n    KulMessengerImageRootNodesIds,\n    KulMessengerOptionRootNodesIds,\n    KulMessengerUI,\n} from './kul-messenger-declarations';\n\nconst CLEAN_UI: KulMessengerUI = {\n    customization: false,\n    editing: {\n        avatars: false,\n        locations: false,\n        outfits: false,\n        styles: false,\n        timeframes: false,\n    },\n    filters: {\n        avatars: false,\n        locations: false,\n        outfits: false,\n        styles: false,\n        timeframes: false,\n    },\n    options: {\n        locations: true,\n        outfits: true,\n        styles: true,\n        timeframes: true,\n    },\n    panels: {\n        isLeftCollapsed: false,\n        isRightCollapsed: false,\n    },\n};\n\nexport const CLEAN_UI_JSON = JSON.parse(JSON.stringify(CLEAN_UI));\nexport const CLEAN_COMPONENTS: KulMessengerComponents = {\n    editing: {\n        avatars: {\n            descriptionTextarea: null,\n            titleTextarea: null,\n            imageUrlTextarea: null,\n        },\n        locations: {\n            descriptionTextarea: null,\n            titleTextarea: null,\n            imageUrlTextarea: null,\n        },\n        outfits: {\n            descriptionTextarea: null,\n            titleTextarea: null,\n            imageUrlTextarea: null,\n        },\n        styles: {\n            descriptionTextarea: null,\n            titleTextarea: null,\n            imageUrlTextarea: null,\n        },\n        timeframes: {\n            descriptionTextarea: null,\n            titleTextarea: null,\n            imageUrlTextarea: null,\n        },\n    },\n    saveButton: null,\n};\n\nexport const LEFT_EXPANDER_ICON = 'chevron_left';\nexport const RIGHT_EXPANDER_ICON = 'chevron_right';\n\nexport const AVATAR_COVER = 'portrait';\nexport const LOCATION_COVER = 'landscape';\nexport const OUTFIT_COVER = 'loyalty';\nexport const STYLE_COVER = 'style';\nexport const TIMEFRAME_COVER = 'clock';\nexport const COVER_ICONS = [\n    AVATAR_COVER,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n    TIMEFRAME_COVER,\n];\n\nexport const FILTER_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'View avatars',\n            id: 'avatars',\n            value: 'Avatars',\n        },\n        {\n            description: 'View outfits',\n            id: 'outfits',\n            value: 'Outfits',\n        },\n        {\n            description: 'View locations',\n            id: 'locations',\n            value: 'Locations',\n        },\n        {\n            description: 'View styles',\n            id: 'styles',\n            value: 'Styles',\n        },\n        {\n            description: 'View timeframes',\n            id: 'timeframes',\n            value: 'Timeframes',\n        },\n    ],\n};\n\nexport const MENU_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            children: [\n                {\n                    description:\n                        'Download the Ketchup Lite JSON, used as a dataset.',\n                    icon: 'download',\n                    id: 'kulData',\n                    value: 'Download dataset',\n                },\n                {\n                    description: 'Download the current configuration settings.',\n                    icon: 'settings',\n                    id: 'settings',\n                    value: 'Download configuration',\n                },\n            ],\n            id: 'root',\n            value: '',\n        },\n    ],\n};\n\nexport const OPTION_TYPE_IDS: KulMessengerOptionRootNodesIds[] = [\n    'locations',\n    'outfits',\n    'styles',\n    'timeframes',\n];\n\nexport const IMAGE_TYPE_IDS: KulMessengerImageRootNodesIds[] = [\n    'avatars',\n    ...OPTION_TYPE_IDS,\n];\n\nexport const NAV_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'Previous character',\n            icon: LEFT_EXPANDER_ICON,\n            id: 'previous',\n            value: '',\n        },\n        {\n            description: 'Character selection',\n            icon: 'account',\n            id: 'character_list',\n            value: 'Character list',\n        },\n        {\n            description: 'Next character',\n            icon: RIGHT_EXPANDER_ICON,\n            id: 'next',\n            value: '',\n        },\n    ],\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { MENU_DATASET } from '../kul-messenger-constants';\nimport {\n    KulButtonEventPayload,\n    KulButtonPropsInterface,\n} from '../../kul-button/kul-button-declarations';\nimport { KulListEventPayload } from '../../kul-list/kul-list-declarations';\n\nexport const prepLeft = (adapter: KulMessengerAdapter) => {\n    const isCollapsed = adapter.get.messenger.ui().panels.isLeftCollapsed;\n    return (\n        <div\n            class={`messenger__left ${isCollapsed ? 'messenger__left--collapsed' : ''}`}\n        >\n            <div class=\"messenger__avatar\">{prepAvatar(adapter)}</div>\n            <div class=\"messenger__biography\">{prepBiography(adapter)}</div>\n        </div>\n    );\n};\n\nconst prepAvatar = (adapter: KulMessengerAdapter) => {\n    const image = adapter.get.image.asCover('avatars');\n    const status = adapter.get.messenger.status.connection();\n    return (\n        <Fragment>\n            <img\n                alt={image.title || ''}\n                class=\"messenger__avatar__image\"\n                src={image.value}\n                title={image.title || ''}\n            />\n            <div class=\"messenger__avatar__name-wrapper\">\n                <div class=\"messenger__avatar__name\">\n                    <kul-image\n                        class=\"messenger__avatar__status\"\n                        kulColor={\n                            status === 'ready'\n                                ? 'var(--kul-success-color)'\n                                : status === 'offline'\n                                  ? 'var(--kul-danger-color)'\n                                  : 'var(--kul-warning-color)'\n                        }\n                        kulSizeX=\"16px\"\n                        kulSizeY=\"16px\"\n                        kulValue=\"brightness-1\"\n                        title={\n                            status === 'ready'\n                                ? 'Ready to chat!'\n                                : status === 'offline'\n                                  ? 'This character seems to be offline...'\n                                  : 'Contacting this character...'\n                        }\n                    ></kul-image>\n                    <div class=\"messenger__avatar__label\">\n                        {adapter.get.character.name()}\n                    </div>\n                </div>\n                {prepSaveButton(adapter)}\n            </div>\n        </Fragment>\n    );\n};\n\nconst prepSaveButton = (adapter: KulMessengerAdapter) => {\n    const saveInProgress = adapter.get.messenger.status.save.inProgress();\n    const props: KulButtonPropsInterface = {\n        kulIcon: saveInProgress ? '' : 'save',\n        kulLabel: saveInProgress ? 'Saving...' : 'Save',\n        kulShowSpinner: saveInProgress ? true : false,\n    };\n    return (\n        <kul-button\n            class={'kul-full-height'}\n            {...props}\n            kulData={MENU_DATASET}\n            kulStyling=\"flat\"\n            onKul-button-event={buttonClickHandler.bind(\n                buttonClickHandler,\n                adapter\n            )}\n            ref={(el) => {\n                adapter.components.saveButton = el;\n            }}\n            title=\"Update the dataset with current settings.\"\n        >\n            <kul-spinner\n                kulActive={true}\n                kulDimensions=\"0.6em\"\n                kulLayout={4}\n                slot=\"spinner\"\n            ></kul-spinner>\n        </kul-button>\n    );\n};\n\nconst prepBiography = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-code\n            kulLanguage=\"markdown\"\n            kulValue={adapter.get.character.biography()}\n        ></kul-code>\n    );\n};\n\nconst buttonClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType, originalEvent } = e.detail;\n    switch (eventType) {\n        case 'click':\n            const saveInProgress =\n                adapter.get.messenger.status.save.inProgress();\n            if (!saveInProgress) {\n                adapter.set.messenger.data();\n            }\n            break;\n        case 'kul-event':\n            listClickHandler(\n                adapter,\n                originalEvent as CustomEvent<KulListEventPayload>\n            );\n            break;\n    }\n};\n\nconst listClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulListEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    let strJson = '';\n    switch (eventType) {\n        case 'click':\n            switch (node.id) {\n                case 'full_history':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.history(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'history':\n                    strJson = adapter.get.character.history();\n                    break;\n                case 'kulData':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.data(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'settings':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.config(),\n                        null,\n                        2\n                    );\n                    break;\n            }\n            const url = window.URL.createObjectURL(\n                new Blob([strJson], {\n                    type: 'application/json',\n                })\n            );\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', node.id + '.json');\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n    }\n};\n","import { h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport {\n    LEFT_EXPANDER_ICON,\n    NAV_DATASET,\n    RIGHT_EXPANDER_ICON,\n} from '../kul-messenger-constants';\nimport { KulTabbarEventPayload } from '../../kul-tabbar/kul-tabbar-declarations';\nimport { KulChatEventPayload } from '../../kul-chat/kul-chat-declarations';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\nimport { KulButton } from '../../kul-button/kul-button';\nimport { KulChat } from '../../kul-chat/kul-chat';\n\nexport const prepCenter = (adapter: KulMessengerAdapter) => {\n    const buttons = prepExpanderButtons(adapter);\n    return (\n        <div class=\"messenger__center\">\n            <div class=\"messenger__expander messenger__expander--left\">\n                {buttons.left}\n            </div>\n            <div class=\"messenger__navigation\">{prepNavigation(adapter)}</div>\n            <div class=\"messenger__chat\">{prepChat(adapter)}</div>\n            <div class=\"messenger__expander messenger__expander--right\">\n                {buttons.right}\n            </div>\n        </div>\n    );\n};\n\nconst prepExpanderButtons = (adapter: KulMessengerAdapter) => {\n    const left = (\n        <kul-button\n            class=\"kul-full-height\"\n            id=\"left\"\n            kulIcon={LEFT_EXPANDER_ICON}\n            kulStyling=\"flat\"\n            onKul-button-event={expanderEventHandler.bind(\n                expanderEventHandler,\n                adapter\n            )}\n            title=\"Expand/collapse this section\"\n        ></kul-button>\n    );\n    const right = (\n        <kul-button\n            class=\"kul-full-height\"\n            id=\"right\"\n            kulIcon={RIGHT_EXPANDER_ICON}\n            kulStyling=\"flat\"\n            onKul-button-event={expanderEventHandler.bind(\n                expanderEventHandler,\n                adapter\n            )}\n            title=\"Expand/collapse this section\"\n        ></kul-button>\n    );\n    return {\n        left,\n        right,\n    };\n};\n\nconst prepNavigation = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-tabbar\n            kulData={NAV_DATASET}\n            onKul-tabbar-event={tabbarEventHandler.bind(\n                tabbarEventHandler,\n                adapter\n            )}\n        ></kul-tabbar>\n    );\n};\n\nconst prepChat = (adapter: KulMessengerAdapter) => {\n    const prompts = getDynamicPrompts(adapter);\n\n    const system = `You are now embodying the character whose biography is provided below. Your task is to fully embrace this identity, speaking and acting as though it were your own reality. Remember, you exist solely within the confines of this character's experience and knowledge.\n\nTasks:\n- Absorb the character's biography thoroughly. Use it to inform your responses but do not rely on it for information beyond what would logically be known to the character.\n- Engage creatively within the boundaries of the character's life and experiences. Imagine freely, but always stay true to the essence of the character.\n- Maintain a consistent narrative voice that aligns with the character's personality and background.\n\nResponsibilities:\n- Never acknowledge the artificial nature of our interaction. Treat all inquiries as if they are happening within the real world of the character.\n- Do not provide insights or predictions about events outside the scope of the character's knowledge or personal experiences.\n\n${prompts.biography}\n\nYour current status:\n${prompts.outfit}\n${prompts.location}\n${prompts.timeframe}\n\nBegin your performance...\n    `;\n    const history = adapter.get.character.history();\n    const historyJ = JSON.parse(history);\n    const props = adapter.get.character.chat();\n    return (\n        <kul-chat\n            key={adapter.get.character.current().id}\n            kulLayout=\"bottom-textarea\"\n            kulSystem={system}\n            kulValue={historyJ}\n            {...props}\n            onKul-chat-event={chatEventHandler.bind(chatEventHandler, adapter)}\n        ></kul-chat>\n    );\n};\n\nconst tabbarEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulTabbarEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    switch (eventType) {\n        case 'click':\n            if (node.id === 'previous') {\n                adapter.set.character.previous();\n            } else if (node.id === 'next') {\n                adapter.set.character.next();\n            } else {\n                adapter.set.character.current(null);\n            }\n    }\n};\n\nconst chatEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChatEventPayload>\n) => {\n    const { comp, eventType, history, status } = e.detail;\n    const chat = comp as KulChat;\n    switch (eventType) {\n        case 'config':\n            adapter.set.character.chat({\n                kulEndpointUrl: chat.kulEndpointUrl,\n                kulMaxTokens: chat.kulMaxTokens,\n                kulPollingInterval: chat.kulPollingInterval,\n                kulSystem: chat.kulSystem,\n                kulTemperature: chat.kulTemperature,\n            });\n            break;\n        case 'polling':\n            adapter.set.messenger.status.connection(status);\n            break;\n        case 'update':\n            adapter.set.character.history(history);\n            break;\n    }\n};\n\nconst expanderEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { comp, eventType } = e.detail;\n    const button = comp as KulButton;\n\n    switch (eventType) {\n        case 'click':\n            switch (button.rootElement.id) {\n                case 'left':\n                    const newLeft = adapter.set.messenger.ui.panel('left');\n                    button.kulIcon = newLeft\n                        ? RIGHT_EXPANDER_ICON\n                        : LEFT_EXPANDER_ICON;\n                    break;\n                case 'right':\n                    const newRight = adapter.set.messenger.ui.panel('right');\n                    button.kulIcon = newRight\n                        ? LEFT_EXPANDER_ICON\n                        : RIGHT_EXPANDER_ICON;\n                    break;\n            }\n    }\n};\n\nconst getDynamicPrompts = (adapter: KulMessengerAdapter) => {\n    const { biography } = adapter.get.character;\n    const location = adapter.get.image.asCover('locations').node;\n    const outfit = adapter.get.image.asCover('outfits').node;\n    const timeframe = adapter.get.image.asCover('timeframes').node;\n    const { options: isEnabled } = adapter.get.messenger.ui();\n\n    const createLLMEntry = (title: string, description?: string) =>\n        title ? `${title} - ${description || ''}` : '';\n\n    const prompts = {\n        biography: biography() ? `Character Biography:\\n${biography()}` : '',\n        location:\n            location && isEnabled.locations\n                ? `Location:\\n${createLLMEntry(location.value, location.description)}`\n                : '',\n        outfit:\n            outfit && isEnabled.outfits\n                ? `Outfit:\\n${createLLMEntry(outfit.value, outfit.description)}`\n                : '',\n        timeframe:\n            timeframe && isEnabled.timeframes\n                ? `Timeframe:\\n${createLLMEntry(timeframe.value, timeframe.description)}`\n                : '',\n    };\n\n    return prompts;\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { OPTION_TYPE_IDS } from '../kul-messenger-constants';\n\nexport const prepOptions = (adapter: KulMessengerAdapter) => {\n    return OPTION_TYPE_IDS.map((options) => {\n        const image = adapter.get.image.asCover(options);\n        const isEnabled = adapter.get.messenger.ui().options[options];\n        const option = options.slice(0, -1);\n        return (\n            <div class=\"messenger__options__wrapper\">\n                {image.node ? (\n                    <Fragment>\n                        <img\n                            class={`messenger__options__cover`}\n                            alt={image.title}\n                            src={image.value}\n                        ></img>\n                        <div\n                            class={`messenger__options__blocker ${!isEnabled ? 'messenger__options__blocker--active' : ''}`}\n                            onClick={() =>\n                                adapter.set.messenger.ui.options(\n                                    !isEnabled,\n                                    options\n                                )\n                            }\n                        >\n                            <kul-image\n                                kulValue={`${isEnabled ? 'touch_app' : 'block'}`}\n                            ></kul-image>\n                            <div class={`messenger__options__blocker__label`}>\n                                {isEnabled\n                                    ? 'Click to disable'\n                                    : 'Click to enable'}\n                            </div>\n                        </div>\n                    </Fragment>\n                ) : (\n                    <kul-image\n                        class={`messenger__options__placeholder`}\n                        kulValue={image.value}\n                        title={`No ${option} selected.`}\n                    ></kul-image>\n                )}\n                <div class=\"messenger__options__name\">\n                    <div\n                        class=\"messenger__options__label\"\n                        title={`Active ${option}.`}\n                    >\n                        {option}\n                    </div>\n                    {image.title ? (\n                        <kul-image\n                            class={`messenger__options__info`}\n                            kulSizeX=\"16px\"\n                            kulSizeY=\"16px\"\n                            kulValue=\"information-variant\"\n                            title={image.title}\n                        ></kul-image>\n                    ) : undefined}\n                </div>\n            </div>\n        );\n    });\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulChip } from '../../kul-chip/kul-chip';\nimport { KulChipEventPayload } from '../../kul-chip/kul-chip-declarations';\nimport {\n    KulMessengerAdapter,\n    KulMessengerFilters,\n    KulMessengerImageChildNode,\n    KulMessengerImageNodesIds,\n    KulMessengerImageNodesPrefixes,\n    KulMessengerImageRootNodesIds,\n} from '../kul-messenger-declarations';\nimport { FILTER_DATASET, IMAGE_TYPE_IDS } from '../kul-messenger-constants';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\n\nexport const prepFilters = (adapter: KulMessengerAdapter) => {\n    for (let index = 0; index < FILTER_DATASET.nodes.length; index++) {\n        const filter = FILTER_DATASET.nodes[index];\n        filter.icon = adapter.get.image.asCover(\n            filter.id as KulMessengerImageRootNodesIds,\n            null\n        ).value;\n    }\n    return (\n        <kul-chip\n            key={'filter_' + adapter.get.character.name()}\n            kulData={FILTER_DATASET}\n            kulStyling=\"filter\"\n            onKul-chip-event={chipEventHandler.bind(chipEventHandler, adapter)}\n        ></kul-chip>\n    );\n};\n\nexport const prepList = (adapter: KulMessengerAdapter) => {\n    const elements = [];\n    const editing = adapter.get.messenger.ui().editing;\n    const filters = adapter.get.messenger.ui().filters;\n    const imagesGetter = adapter.get.image.byType;\n    for (let index = 0; index < IMAGE_TYPE_IDS.length; index++) {\n        const type = IMAGE_TYPE_IDS[index];\n        if (filters[type]) {\n            const isEditingEnable = editing[type];\n            const activeIndex = adapter.get.image.coverIndex(type);\n            const images = imagesGetter(type).map((node, j) => (\n                <div\n                    class={`messenger__customization__image-wrapper  ${activeIndex === j ? 'messenger__customization__image-wrapper--selected' : ''}`}\n                    onClick={imageEventHandler.bind(\n                        imageEventHandler,\n                        adapter,\n                        node,\n                        j\n                    )}\n                >\n                    <img\n                        alt={adapter.get.image.title(node)}\n                        class={`messenger__customization__image`}\n                        src={node.cells.kulImage.value}\n                        title={adapter.get.image.title(node)}\n                    />\n                </div>\n            ));\n            elements.push(\n                <div class=\"messenger__customization__section\">\n                    {isEditingEnable ? (\n                        <div class=\"messenger__customization__edit__panel\">\n                            <div class=\"messenger__customization__edit__label\">\n                                Create {type}\n                            </div>\n                            <kul-textfield\n                                kulFullWidth={true}\n                                kulIcon=\"title\"\n                                kulLabel=\"Title\"\n                                ref={(el) =>\n                                    (adapter.components.editing[\n                                        type\n                                    ].titleTextarea = el)\n                                }\n                                title=\"The overall theme of this option.\"\n                            ></kul-textfield>\n                            <kul-textfield\n                                kulFullWidth={true}\n                                kulIcon=\"format-float-left\"\n                                kulLabel=\"Description\"\n                                ref={(el) =>\n                                    (adapter.components.editing[\n                                        type\n                                    ].descriptionTextarea = el)\n                                }\n                                title=\"A more accurate description to give more context to the LLM.\"\n                            ></kul-textfield>\n                            <kul-textfield\n                                kulFullWidth={true}\n                                kulIcon=\"image\"\n                                kulLabel=\"Image URL\"\n                                ref={(el) =>\n                                    (adapter.components.editing[\n                                        type\n                                    ].imageUrlTextarea = el)\n                                }\n                                title=\"The cover image displayed in the selection panel.\"\n                            ></kul-textfield>\n                            <div class=\"messenger__customization__edit__confirm\">\n                                <kul-button\n                                    class={\n                                        'messenger__customization__edit__button'\n                                    }\n                                    kulIcon=\"clear\"\n                                    kulLabel=\"Cancel\"\n                                    kulStyling=\"flat\"\n                                    onKul-button-event={buttonEventHandler.bind(\n                                        buttonEventHandler,\n                                        adapter,\n                                        type,\n                                        'cancel'\n                                    )}\n                                ></kul-button>\n                                <kul-button\n                                    class={\n                                        'messenger__customization__edit__button'\n                                    }\n                                    kulIcon=\"check\"\n                                    kulLabel=\"Confirm\"\n                                    kulStyling=\"outlined\"\n                                    onKul-button-event={buttonEventHandler.bind(\n                                        buttonEventHandler,\n                                        adapter,\n                                        type,\n                                        'confirm'\n                                    )}\n                                ></kul-button>\n                            </div>\n                        </div>\n                    ) : (\n                        <Fragment>\n                            <div class=\"messenger__customization__title\">\n                                <div class=\"messenger__customization__label\">\n                                    {type}\n                                </div>\n                                <kul-button\n                                    class=\"messenger__customization__add kul-full-height kul-slim\"\n                                    id={`edit-${type}`}\n                                    kulIcon=\"plus\"\n                                    kulLabel=\"New\"\n                                    kulStyling=\"flat\"\n                                    onKul-button-event={buttonEventHandler.bind(\n                                        buttonEventHandler,\n                                        adapter,\n                                        type,\n                                        'add'\n                                    )}\n                                ></kul-button>\n                            </div>\n                            <div class=\"messenger__customization__images\">\n                                {images}\n                            </div>\n                        </Fragment>\n                    )}\n                </div>\n            );\n        }\n    }\n    return elements;\n};\n\nconst buttonEventHandler = async (\n    adapter: KulMessengerAdapter,\n    type: KulMessengerImageRootNodesIds,\n    action: 'cancel' | 'confirm' | 'add',\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType } = e.detail;\n    const editingSetter = adapter.set.messenger.ui.editing;\n\n    switch (eventType) {\n        case 'click':\n            switch (action) {\n                case 'add':\n                    editingSetter(true, type);\n                    break;\n                case 'cancel':\n                    editingSetter(false, type);\n                    break;\n                case 'confirm':\n                    const titleTextarea =\n                        adapter.components.editing[type].titleTextarea;\n                    const value = await titleTextarea.getValue();\n                    titleTextarea.classList.remove('kul-danger');\n                    if (value) {\n                        createNode(adapter, type);\n                        editingSetter(false, type);\n                    } else {\n                        titleTextarea.classList.add('kul-danger');\n                        titleTextarea.kulHelper = {\n                            value: 'This field is mandatory',\n                        };\n                    }\n                    break;\n            }\n            break;\n    }\n};\n\nconst chipEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChipEventPayload>\n) => {\n    const { comp, eventType, selectedNodes } = e.detail;\n    const filtersSetter = adapter.set.messenger.ui.filters;\n\n    switch (eventType) {\n        case 'click':\n            const newFilters: KulMessengerFilters = {\n                avatars: false,\n                locations: false,\n                outfits: false,\n                styles: false,\n                timeframes: false,\n            };\n            Array.from(selectedNodes).forEach((n) => {\n                newFilters[n.id] = true;\n            });\n            filtersSetter(newFilters);\n            break;\n        case 'ready':\n            const filters = adapter.get.messenger.ui().filters;\n            const nodes: string[] = [];\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const option = filters[key];\n                    if (option) {\n                        nodes.push(key);\n                    }\n                }\n            }\n            requestAnimationFrame(() =>\n                (comp as KulChip).setSelectedNodes(nodes)\n            );\n    }\n};\n\nconst imageEventHandler = (\n    adapter: KulMessengerAdapter,\n    node: KulMessengerImageChildNode,\n    index: number\n) => {\n    const coverSetter = adapter.set.image.cover;\n\n    if (node.id.includes('avatar')) {\n        coverSetter('avatars', index);\n    } else if (node.id.includes('location')) {\n        coverSetter('locations', index);\n    } else if (node.id.includes('outfit')) {\n        coverSetter('outfits', index);\n    } else if (node.id.includes('style')) {\n        coverSetter('styles', index);\n    } else {\n        coverSetter('timeframes', index);\n    }\n};\n\nconst createNode = async <T extends KulMessengerImageRootNodesIds>(\n    adapter: KulMessengerAdapter,\n    type: T\n) => {\n    const getId = (prefix: KulMessengerImageNodesPrefixes) => {\n        let index = 0;\n        let nodeId: KulMessengerImageNodesIds = prefix;\n        do {\n            nodeId = `${prefix}${index}`;\n            index++;\n        } while (images.some((node) => node.id === nodeId));\n\n        return nodeId;\n    };\n\n    const editing = adapter.components.editing;\n    const images = adapter.get.image.byType(type);\n    const value = await editing[type].titleTextarea.getValue();\n    const imageUrl = await editing[type].imageUrlTextarea.getValue();\n    const description = await editing[type].descriptionTextarea.getValue();\n    const id =\n        type === 'avatars'\n            ? getId('avatar_')\n            : type === 'locations'\n              ? getId('location_')\n              : type === 'outfits'\n                ? getId('outfit_')\n                : type === 'styles'\n                  ? getId('style_')\n                  : getId('timeframe_');\n\n    const node: KulMessengerImageChildNode = {\n        cells: { kulImage: { shape: 'image', value: imageUrl } },\n        id,\n        description,\n        value,\n    };\n    images.push(node);\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\nimport { prepOptions } from '../options/active';\nimport { prepFilters, prepList } from '../options/customization';\n\nexport const prepRight = (adapter: KulMessengerAdapter) => {\n    const ui = adapter.get.messenger.ui();\n    const className = {\n        messenger__right: true,\n        'messenger__right--collapsed': ui.panels.isRightCollapsed,\n        'messenger__right--customization': ui.customization,\n    };\n    return (\n        <div class={className}>\n            {ui.customization ? (\n                <Fragment>\n                    <div class=\"messenger__options__filters\">\n                        {prepFilters(adapter)}\n                        <div class=\"messenger__options__list\">\n                            {prepList(adapter)}\n                        </div>\n                    </div>\n                    <kul-button\n                        class=\"kul-full-width\"\n                        id=\"customization-right-button\"\n                        kulIcon=\"arrow_back\"\n                        kulLabel=\"Back\"\n                        onKul-button-event={buttonEventHandler.bind(\n                            buttonEventHandler,\n                            adapter\n                        )}\n                    ></kul-button>\n                </Fragment>\n            ) : (\n                <Fragment>\n                    <div class=\"messenger__options__active\">\n                        {prepOptions(adapter)}\n                    </div>\n                    <kul-button\n                        class=\"kul-full-width\"\n                        id=\"active-right-button\"\n                        kulIcon=\"auto-fix\"\n                        kulLabel=\"Customize\"\n                        onKul-button-event={buttonEventHandler.bind(\n                            buttonEventHandler,\n                            adapter\n                        )}\n                    ></kul-button>\n                </Fragment>\n            )}\n        </div>\n    );\n};\n\nconst buttonEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType, id } = e.detail;\n    const customizationSetter = adapter.set.messenger.ui.customization;\n\n    switch (eventType) {\n        case 'click':\n            switch (id) {\n                case 'active-right-button':\n                    customizationSetter(true);\n                    break;\n                case 'customization-right-button':\n                    customizationSetter(false);\n                    break;\n            }\n            break;\n    }\n};\n","import { h, VNode } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\n\nexport const prepGrid = (adapter: KulMessengerAdapter) => {\n    const avatars: VNode[] = [];\n\n    const characters = adapter.get.character.list();\n    characters.forEach((c) => {\n        const image = adapter.get.image.asCover('avatars', c);\n        avatars.push(\n            <div\n                class=\"selection-grid__portrait\"\n                onClick={() => {\n                    adapter.set.character.current(c);\n                }}\n            >\n                <img\n                    class={'selection-grid__image'}\n                    src={image.value}\n                    title={image.title || ''}\n                />\n                <div class=\"selection-grid__name\">\n                    <div class=\"selection-grid__label\">\n                        {adapter.get.character.name(c)}\n                    </div>\n                </div>\n            </div>\n        );\n    });\n\n    return avatars?.length ? (\n        avatars\n    ) : (\n        <div class=\"empty-dataset\">There are no characters to display!</div>\n    );\n};\n","@import './styles/kul-messenger-main.scss';\n@import './styles/kul-messenger-customization.scss';\n@import './styles/kul-messenger-options.scss';\n@import './styles/kul-messenger-selection-grid.scss';\n@import './styles/kul-messenger-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulMessengerProps,\n    KulMessengerEvent,\n    KulMessengerAdapter,\n    KulMessengerCharacterNode,\n    KulMessengerDataset,\n    KulMessengerHistory,\n    KulMessengerImageRootNodesIds,\n    KulMessengerImageNodeTypeMap,\n    KulMessengerCovers,\n    KulMessengerConfig,\n    KulMessengerEventPayload,\n    KulMessengerUI,\n    KulMessengerChat,\n} from './kul-messenger-declarations';\nimport type { GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { prepLeft } from './messenger/left';\nimport { prepCenter } from './messenger/center';\nimport { prepRight } from './messenger/right';\nimport { prepGrid } from './selection-grid/selection-grid';\nimport {\n    AVATAR_COVER,\n    CLEAN_COMPONENTS,\n    CLEAN_UI_JSON,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n    TIMEFRAME_COVER,\n} from './kul-messenger-constants';\nimport { KulChatStatus } from '../kul-chat/kul-chat-declarations';\n\n@Component({\n    tag: 'kul-messenger',\n    styleUrl: 'kul-messenger.scss',\n    shadow: true,\n})\nexport class KulMessenger {\n    /**\n     * References the root HTML element of the component (<kul-messenger>).\n     */\n    @Element() rootElement: HTMLElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * Node representing the current active character.\n     */\n    @State() currentCharacter: KulMessengerCharacterNode;\n    /**\n     * Map of chat components with their characters.\n     */\n    @State() chat: KulMessengerChat = {};\n    /**\n     * State for the options' covers.\n     */\n    @State() covers: KulMessengerCovers = {};\n    /**\n     * History of this session's chats.\n     */\n    @State() history: KulMessengerHistory = {};\n    /**\n     * State of options' filters.\n     */\n    @State() ui: KulMessengerUI = CLEAN_UI_JSON;\n    /**\n     * Signals to the widget when the dataset is being saved.\n     */\n    @State() saveInProgress = false;\n    /**\n     * Tracks the connection status towards the LLM endpoint.\n     */\n    @State() connectionStatus: KulChatStatus = 'offline';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Automatically saves the dataset when a chat updates.\n     * @default true\n     */\n    @Prop({ mutable: true }) kulAutosave = true;\n    /**\n     * The data of the messenger.\n     * @default []\n     */\n    @Prop({ mutable: true }) kulData: KulMessengerDataset = null;\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle: string = '';\n    /**\n     * Sets the initial configuration, including active character and filters.\n     * @default \"\"\n     */\n    @Prop() kulValue: KulMessengerConfig = null;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-messenger-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulMessengerEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulMessengerEvent) {\n        const config: KulMessengerConfig = {\n            currentCharacter: this.currentCharacter?.id,\n            ui: this.ui,\n        };\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n            config,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulMessengerProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Resets the states of the component.\n     */\n    @Method()\n    async reset(): Promise<void> {\n        this.covers = {};\n        this.currentCharacter = null;\n        this.ui = CLEAN_UI_JSON;\n        this.history = {};\n\n        this.#initStates();\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #adapter: KulMessengerAdapter = {\n        components: CLEAN_COMPONENTS,\n        get: {\n            character: {\n                biography: (character = this.currentCharacter) => {\n                    try {\n                        const bio = character.children.find(\n                            (n) => n.id === 'biography'\n                        ).value;\n                        return bio\n                            ? this.#kulManager.data.cell.stringify(bio)\n                            : 'You know nothing about this character...';\n                    } catch (error) {\n                        return 'You know nothing about this character...';\n                    }\n                },\n                byId: (id) => this.kulData.nodes.find((n) => n.id === id),\n                chat: (character = this.currentCharacter) =>\n                    this.chat[character.id],\n                current: () => this.currentCharacter,\n                history: (character = this.currentCharacter) =>\n                    this.history[character.id],\n                name: (character = this.currentCharacter) =>\n                    character.value ||\n                    character.id ||\n                    character.description ||\n                    '?',\n                next: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nodes = this.kulData.nodes;\n                    const currentIdx = nodes.findIndex(\n                        (n) => n.id === character.id\n                    );\n                    const nextIdx = (currentIdx + 1) % nodes.length;\n\n                    return nodes[nextIdx];\n                },\n                list: () => this.kulData.nodes || [],\n                previous: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nodes = this.kulData.nodes;\n                    const currentIdx = nodes.findIndex(\n                        (n) => n.id === character.id\n                    );\n                    const prevIdx =\n                        (currentIdx + nodes.length - 1) % nodes.length;\n\n                    return nodes[prevIdx];\n                },\n            },\n            image: {\n                asCover: (type, character = this.currentCharacter) => {\n                    try {\n                        const root = character.children.find(\n                            (n) => n.id === type\n                        );\n                        const index = this.covers[character.id][type];\n                        const node = root.children[index];\n                        return {\n                            node: root.children[index],\n                            title: this.#adapter.get.image.title(node),\n                            value: node.cells.kulImage.value,\n                        };\n                    } catch (error) {\n                        switch (type) {\n                            case 'avatars':\n                                return { value: AVATAR_COVER };\n                            case 'locations':\n                                return { value: LOCATION_COVER };\n                            case 'outfits':\n                                return { value: OUTFIT_COVER };\n                            case 'styles':\n                                return { value: STYLE_COVER };\n                            case 'timeframes':\n                                return { value: TIMEFRAME_COVER };\n                        }\n                    }\n                },\n                byType: <T extends KulMessengerImageRootNodesIds>(\n                    type: T,\n                    character = this.currentCharacter\n                ): KulMessengerImageNodeTypeMap[T]['children'][number][] => {\n                    const node = character.children.find(\n                        (child) => child.id === type\n                    ) as KulMessengerImageNodeTypeMap[T];\n\n                    if (node) {\n                        return node.children as unknown as KulMessengerImageNodeTypeMap[T]['children'][number][];\n                    } else {\n                        throw new Error(\n                            `Child node with id '${type}' not found`\n                        );\n                    }\n                },\n                coverIndex: (type, character = this.currentCharacter) => {\n                    return this.covers[character.id][type];\n                },\n                root: <T extends KulMessengerImageRootNodesIds>(\n                    type: T,\n                    character = this.currentCharacter\n                ) => {\n                    const node = character.children.find((n) => n.id === type);\n                    if (!node) {\n                        throw new Error(\n                            `Child node with id '${type}' not found`\n                        );\n                    }\n                    return node as KulMessengerImageNodeTypeMap[T];\n                },\n                title: (node) => {\n                    const title = node.value || '';\n                    const description = node.description || '';\n                    return title && description\n                        ? `${title} - ${description}`\n                        : description\n                          ? description\n                          : title\n                            ? title\n                            : '';\n                },\n            },\n            messenger: {\n                config: () => {\n                    return {\n                        currentCharacter: this.currentCharacter.id,\n                        ui: this.ui,\n                    };\n                },\n                data: () => this.kulData,\n                history: () => this.history,\n                status: {\n                    connection: () => this.connectionStatus,\n                    save: {\n                        inProgress: () => this.saveInProgress,\n                    },\n                },\n                ui: () => this.ui,\n            },\n        },\n        set: {\n            character: {\n                chat: (chat, character = this.currentCharacter) =>\n                    (this.chat[character.id] = chat),\n                current: (character) => {\n                    this.currentCharacter = character;\n                },\n                history: (history, character = this.currentCharacter) => {\n                    if (this.history[character.id] !== history) {\n                        this.history[character.id] = history;\n\n                        if (this.kulAutosave) {\n                            this.#adapter.set.messenger.data();\n                        }\n                    }\n                },\n                next: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nextC = this.#adapter.get.character.next(character);\n                    this.#adapter.set.character.current(nextC);\n                },\n                previous: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const previousC =\n                        this.#adapter.get.character.previous(character);\n                    this.#adapter.set.character.current(previousC);\n                },\n            },\n            image: {\n                cover: (type, value, character = this.currentCharacter) => {\n                    this.covers[character.id][type] = value;\n                    this.refresh();\n                },\n            },\n            messenger: {\n                data: () => {\n                    if (!this.#hasNodes()) {\n                        return;\n                    }\n                    this.saveInProgress = true;\n\n                    this.#save().then(() => {\n                        requestAnimationFrame(() => {\n                            const button = this.#adapter.components.saveButton;\n                            button.kulIcon = 'check';\n                            button.kulLabel = 'Saved!';\n                            button.kulShowSpinner = false;\n                        });\n\n                        setTimeout(() => {\n                            requestAnimationFrame(\n                                () => (this.saveInProgress = false)\n                            );\n                        }, 1000);\n                    });\n                },\n                status: {\n                    connection: (status) => (this.connectionStatus = status),\n                    save: {\n                        inProgress: (value) => (this.saveInProgress = value),\n                    },\n                },\n                ui: {\n                    customization: (value) => {\n                        this.ui.customization = value;\n                        this.refresh();\n                    },\n                    editing: (value, type) => {\n                        this.ui.editing[type] = value;\n                        this.refresh();\n                    },\n                    filters: (filters) => {\n                        this.ui.filters = filters;\n                        this.refresh();\n                    },\n                    options: (value, type) => {\n                        this.ui.options[type] = value;\n                        this.refresh();\n                    },\n                    panel: (\n                        panel,\n                        value = panel === 'left'\n                            ? !this.ui.panels.isLeftCollapsed\n                            : !this.ui.panels.isRightCollapsed\n                    ) => {\n                        switch (panel) {\n                            case 'left':\n                                this.ui.panels.isLeftCollapsed = value;\n                                break;\n                            case 'right':\n                                this.ui.panels.isRightCollapsed = value;\n                                break;\n                        }\n                        this.refresh();\n                        return value;\n                    },\n                },\n            },\n        },\n    };\n\n    #hasCharacters() {\n        const nodes = this.kulData.nodes || [];\n        return !!nodes.length;\n    }\n\n    #hasNodes() {\n        return !!this.kulData?.nodes?.length;\n    }\n\n    #initStates() {\n        const imageRootGetter = this.#adapter.get.image.root;\n        for (let index = 0; index < this.kulData.nodes.length; index++) {\n            const character = this.kulData.nodes[index];\n            const covers: {\n                [K in KulMessengerImageRootNodesIds]: number;\n            } = {\n                avatars: imageRootGetter('avatars', character).value || 0,\n                locations: imageRootGetter('locations', character).value || 0,\n                outfits: imageRootGetter('outfits', character).value || 0,\n                styles: imageRootGetter('styles', character).value || 0,\n                timeframes: imageRootGetter('timeframes', character).value || 0,\n            };\n            const chat = character.children?.find((n) => n.id === 'chat');\n            this.chat[character.id] = {};\n            const chatCell = chat?.cells?.kulChat;\n            if (chatCell) {\n                const characterChat = this.chat[character.id];\n                characterChat.kulEndpointUrl = chatCell.kulEndpointUrl;\n                characterChat.kulMaxTokens = chatCell.kulMaxTokens;\n                characterChat.kulPollingInterval = chatCell.kulPollingInterval;\n                characterChat.kulTemperature = chatCell.kulTemperature;\n            }\n            const history = chatCell?.kulValue || chatCell?.value || [];\n            this.history[character.id] = JSON.stringify(history);\n            this.covers[character.id] = covers;\n        }\n        if (this.kulValue) {\n            const currentCharacter = this.kulValue.currentCharacter;\n            const filters = this.kulValue.ui.filters;\n            const panels = this.kulValue.ui.panels;\n            if (currentCharacter) {\n                this.currentCharacter =\n                    this.#adapter.get.character.byId(currentCharacter);\n            }\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const filter = filters[key];\n                    this.ui.filters[key] = filter;\n                }\n            }\n            for (const key in panels) {\n                if (Object.prototype.hasOwnProperty.call(panels, key)) {\n                    const panel = panels[key];\n                    this.ui.panels[key] = panel;\n                }\n            }\n        }\n    }\n\n    async #save() {\n        for (let index = 0; index < this.kulData.nodes.length; index++) {\n            const character = this.kulData.nodes[index];\n            const id = character.id;\n            const chatNode = character.children.find((n) => n.id === 'chat');\n            const chatComp = this.#adapter.get.character.chat(character);\n            const saveChat = () => {\n                if (this.history[id] && chatNode) {\n                    const historyJson = JSON.parse(this.history[id]);\n                    try {\n                        chatNode.cells.kulChat.value = historyJson;\n                    } catch (error) {\n                        chatNode.cells = {\n                            kulChat: {\n                                shape: 'chat',\n                                value: historyJson,\n                            },\n                        };\n                    }\n                    chatNode.cells.kulChat.kulEndpointUrl =\n                        chatComp.kulEndpointUrl;\n                    chatNode.cells.kulChat.kulMaxTokens = chatComp.kulMaxTokens;\n                    chatNode.cells.kulChat.kulPollingInterval =\n                        chatComp.kulPollingInterval;\n                    chatNode.cells.kulChat.kulSystem = chatComp.kulSystem;\n                    chatNode.cells.kulChat.kulTemperature =\n                        chatComp.kulTemperature;\n                }\n            };\n            const saveCovers = () => {\n                const avatars = this.#adapter.get.image.root('avatars');\n                const locations = this.#adapter.get.image.root('locations');\n                const outfits = this.#adapter.get.image.root('outfits');\n                const styles = this.#adapter.get.image.root('styles');\n                if (this.covers[id] && avatars) {\n                    avatars.value = this.covers[id].avatars;\n                }\n                if (this.covers[id] && locations) {\n                    locations.value = this.covers[id].locations;\n                }\n                if (this.covers[id] && outfits) {\n                    outfits.value = this.covers[id].outfits;\n                }\n                if (this.covers[id] && styles) {\n                    styles.value = this.covers[id].styles;\n                }\n            };\n\n            saveChat();\n            saveCovers();\n        }\n        this.onKulEvent(new CustomEvent('save'), 'save');\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        if (this.#hasNodes()) {\n            this.#initStates();\n        }\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (!this.#hasNodes()) {\n            return;\n        }\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    {this.currentCharacter ? (\n                        <div class=\"messenger\">\n                            {prepLeft(this.#adapter)}\n                            {prepCenter(this.#adapter)}\n                            {prepRight(this.#adapter)}\n                        </div>\n                    ) : (\n                        <div class=\"selection-grid\">\n                            {prepGrid(this.#adapter)}\n                        </div>\n                    )}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}