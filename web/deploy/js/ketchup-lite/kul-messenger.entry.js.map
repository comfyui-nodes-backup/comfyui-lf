{"file":"kul-messenger.entry.js","mappings":"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","names":[],"sources":["src/components/kul-messenger/kul-messenger-declarations.ts","src/components/kul-messenger/layout/constant.ts","src/components/kul-messenger/layout/left.tsx","src/components/kul-messenger/layout/center.tsx","src/components/kul-messenger/layout/right.tsx","src/components/kul-messenger/layout/grid.tsx","src/components/kul-messenger/kul-messenger.scss?tag=kul-messenger&encapsulation=shadow","src/components/kul-messenger/kul-messenger.tsx"],"sourcesContent":["import type { KulEventPayload } from '../../types/GenericTypes';\nimport {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulChatStatus } from '../kul-chat/kul-chat-declarations';\nexport interface KulMessengerAdapter {\n    get: {\n        character: {\n            biography: (character?: KulMessengerCharacterNode) => string;\n            byId: (id: string) => KulMessengerCharacterNode;\n            current: () => KulMessengerCharacterNode;\n            history: (character?: KulMessengerCharacterNode) => string;\n            list: () => KulMessengerCharacterNode[];\n            name: (character?: KulMessengerCharacterNode) => string;\n            next: (\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerCharacterNode;\n            previous: (\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerCharacterNode;\n            status: () => KulChatStatus;\n        };\n        image: {\n            asCover: (\n                type: KulMessengerImageRootNodesIds,\n                character?: KulMessengerCharacterNode\n            ) => {\n                node?: KulMessengerImageChildNode;\n                title?: string;\n                value: string;\n            };\n            byType: <T extends KulMessengerImageRootNodesIds>(\n                type: T,\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerImageNodeTypeMap[T]['children'][number][];\n            coverIndex: (\n                type: KulMessengerImageRootNodesIds,\n                character?: KulMessengerCharacterNode\n            ) => number;\n            filters: () => KulMessengerFilters;\n            root: <T extends KulMessengerImageRootNodesIds>(\n                type: T,\n                character?: KulMessengerCharacterNode\n            ) => KulMessengerImageNodeTypeMap[T];\n            title: (node: KulMessengerImageChildNode) => string;\n        };\n        messenger: {\n            config: () => KulMessengerConfig;\n            data: () => KulMessengerDataset;\n            history: () => KulMessengerHistory;\n        };\n    };\n    set: {\n        character: {\n            current: (character?: KulMessengerCharacterNode) => void;\n            history: (\n                history: string,\n                character?: KulMessengerCharacterNode\n            ) => void;\n            next: (character?: KulMessengerCharacterNode) => void;\n            previous: (character?: KulMessengerCharacterNode) => void;\n            status: (status: KulChatStatus) => void;\n        };\n        image: {\n            cover: (\n                type: KulMessengerImageRootNodesIds,\n                value: number,\n                character?: KulMessengerCharacterNode\n            ) => void;\n            filters: (filter: KulMessengerFilters) => void;\n        };\n        messenger: { data: () => Promise<void> };\n    };\n}\n\n// Base Node with optional children array\nexport interface KulMessengerBaseNode<T extends KulDataNode>\n    extends KulDataNode {\n    id: string;\n    value: unknown;\n    children?: T[];\n}\n\n// Avatar Node\nexport interface KulMessengerAvatarNode\n    extends KulMessengerBaseNode<KulMessengerAvatarNode> {\n    id: `avatar_${string}`;\n    value: string;\n}\n\n// Avatars Node\nexport interface KulMessengerAvatarsNode\n    extends KulMessengerBaseNode<KulMessengerAvatarNode> {\n    id: 'avatars';\n    value: number;\n}\n\n// Biography Node\nexport interface KulMessengerBiographyNode extends KulMessengerBaseNode<never> {\n    id: 'biography';\n    value: string;\n}\n\n// Character Node\nexport interface KulMessengerCharacterNode\n    extends KulMessengerBaseNode<KulDataNode> {\n    children: [\n        KulMessengerAvatarsNode,\n        KulMessengerBiographyNode,\n        KulMessengerChatNode,\n        KulMessengerLocationsNode,\n        KulMessengerOutfitsNode,\n        KulMessengerStylesNode,\n    ];\n    id: `character_${string}`;\n    value: string;\n}\n\n// Chat Node\nexport interface KulMessengerChatNode extends KulMessengerBaseNode<never> {\n    id: 'chat';\n    value: string;\n}\n\n// Messenger Covers\nexport interface KulMessengerCovers {\n    [index: `character_${string}`]: {\n        [K in KulMessengerImageRootNodesIds]: number;\n    };\n}\n\n// Dataset Node\nexport interface KulMessengerDataset extends KulDataDataset {\n    nodes?: KulMessengerCharacterNode[];\n}\n\n// Messenger Event\nexport type KulMessengerEvent = 'ready' | 'save';\n\nexport interface KulMessengerEventPayload extends KulEventPayload {\n    initialization: KulMessengerConfig;\n}\n\nexport interface KulMessengerFilters {\n    avatars?: boolean;\n    locations?: boolean;\n    outfits?: boolean;\n    styles?: boolean;\n}\n\n// Messenger History\nexport interface KulMessengerHistory {\n    [index: `character_${string}`]: string;\n}\n\n// Image Children Nodes Types\nexport type KulMessengerImageChildNode =\n    | KulMessengerOutfitNode\n    | KulMessengerStyleNode\n    | KulMessengerAvatarNode\n    | KulMessengerLocationNode;\n\nexport type KulMessengerImageChildrenNodes = KulMessengerImageChildNode[];\n\n// Image Root Nodes, using a generalized base node\nexport type KulMessengerImageRootNodes =\n    | KulMessengerAvatarsNode\n    | KulMessengerLocationsNode\n    | KulMessengerOutfitsNode\n    | KulMessengerStylesNode;\n\n// Strongly typed mapping of image node types\nexport type KulMessengerImageNodeTypeMap = {\n    avatars: KulMessengerAvatarsNode;\n    locations: KulMessengerLocationsNode;\n    outfits: KulMessengerOutfitsNode;\n    styles: KulMessengerStylesNode;\n};\n\n// Image Root Node ID Types\nexport type KulMessengerImageRootNodesIds = keyof KulMessengerImageNodeTypeMap;\n\n// Initializes the component state\nexport interface KulMessengerConfig {\n    currentCharacter?: string;\n    filters?: KulMessengerFilters;\n}\n\n// Location Node\nexport interface KulMessengerLocationNode extends KulMessengerBaseNode<never> {\n    id: `location_${string}`;\n    value: string;\n}\n\n// Locations Node\nexport interface KulMessengerLocationsNode\n    extends KulMessengerBaseNode<KulMessengerLocationNode> {\n    id: 'locations';\n    value: number;\n}\n\n// Outfit Node\nexport interface KulMessengerOutfitNode extends KulMessengerBaseNode<never> {\n    id: `outfit_${string}`;\n    value: string;\n}\n\n// Outfits Node\nexport interface KulMessengerOutfitsNode\n    extends KulMessengerBaseNode<KulMessengerOutfitNode> {\n    id: 'outfits';\n    value: number;\n}\n\n// Messenger Props Enum\nexport enum KulMessengerProps {\n    kulAutosave = 'Automatically saves the dataset when a chat updates.',\n    kulData = 'The actual data of the component.',\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'Sets the initial configuration, including active character and filters.',\n}\n\n// Messenger Props Interface\nexport interface KulMessengerPropsInterface {\n    kulAutosave?: boolean;\n    kulData?: KulMessengerDataset;\n    kulStyle?: string;\n    kulValue?: KulMessengerConfig;\n}\n\n// Style Node\nexport interface KulMessengerStyleNode extends KulMessengerBaseNode<never> {\n    id: `style_${string}`;\n    value: string;\n}\n\n// Styles Node\nexport interface KulMessengerStylesNode\n    extends KulMessengerBaseNode<KulMessengerStyleNode> {\n    id: 'styles';\n    value: number;\n}\n","import { KulDataDataset } from '../../../managers/kul-data/kul-data-declarations';\nimport { KulMessengerImageRootNodesIds } from '../kul-messenger-declarations';\n\nexport const AVATAR_COVER = 'portrait';\nexport const LOCATION_COVER = 'landscape';\nexport const OUTFIT_COVER = 'loyalty';\nexport const STYLE_COVER = 'style';\nexport const COVER_ICONS = [\n    AVATAR_COVER,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n];\n\nexport const FILTER_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'View avatars',\n            id: 'avatars',\n            value: 'Avatars',\n        },\n        {\n            description: 'View outfits',\n            id: 'outfits',\n            value: 'Outfits',\n        },\n        {\n            description: 'View locations',\n            id: 'locations',\n            value: 'Locations',\n        },\n        {\n            description: 'View styles',\n            id: 'styles',\n            value: 'Styles',\n        },\n    ],\n};\n\nexport const MENU_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            children: [\n                {\n                    description:\n                        'Download the Ketchup Lite JSON, used as a dataset.',\n                    icon: 'download',\n                    id: 'kulData',\n                    value: 'Download characters',\n                },\n                {\n                    description:\n                        'Download the chat history with this character.',\n                    icon: 'history',\n                    id: 'history',\n                    value: 'Download history',\n                },\n                {\n                    description:\n                        'Download the chat history for all characters.',\n                    icon: 'people',\n                    id: 'full_history',\n                    value: 'Download complete history',\n                },\n                {\n                    description: 'Download the widget configuration.',\n                    icon: 'settings',\n                    id: 'settings',\n                    value: 'Download configuration',\n                },\n            ],\n            id: 'root',\n            value: '',\n        },\n    ],\n};\n\nexport const IMAGE_TYPE_IDS: KulMessengerImageRootNodesIds[] = [\n    'avatars',\n    'locations',\n    'outfits',\n    'styles',\n];\n\nexport const NAV_DATASET: KulDataDataset = {\n    nodes: [\n        {\n            description: 'Previous character',\n            icon: 'chevron_left',\n            id: 'previous',\n            value: '',\n        },\n        {\n            description: 'Character selection',\n            icon: 'account',\n            id: 'character_list',\n            value: 'Character list',\n        },\n        {\n            description: 'Next character',\n            icon: 'chevron_right',\n            id: 'next',\n            value: '',\n        },\n    ],\n};\n","import { Fragment, h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { MENU_DATASET } from './constant';\nimport { KulButtonEventPayload } from '../../kul-button/kul-button-declarations';\nimport { KulListEventPayload } from '../../kul-list/kul-list-declarations';\nimport { KulButton } from '../../kul-button/kul-button';\n\nlet TIMEOUT: NodeJS.Timeout;\n\nexport const prepLeft = (adapter: KulMessengerAdapter) => {\n    return (\n        <div class=\"messenger__left\">\n            <div class=\"messenger__avatar\">{prepAvatar(adapter)}</div>\n            <div class=\"messenger__biography\">{prepBiography(adapter)}</div>\n        </div>\n    );\n};\n\nconst prepAvatar = (adapter: KulMessengerAdapter) => {\n    const image = adapter.get.image.asCover('avatars');\n    const status = adapter.get.character.status();\n    return (\n        <Fragment>\n            <img\n                alt={image.title || ''}\n                class=\"messenger__avatar__image\"\n                src={image.value}\n                title={image.title || ''}\n            />\n            <div class=\"messenger__avatar__name\">\n                <div class=\"messenger__avatar__label\">\n                    <kul-image\n                        class=\"messenger__avatar__status\"\n                        kulColor={\n                            status === 'ready'\n                                ? 'var(--kul-success-color)'\n                                : status === 'offline'\n                                  ? 'var(--kul-danger-color)'\n                                  : 'var(--kul-warning-color)'\n                        }\n                        kulSizeX=\"16px\"\n                        kulSizeY=\"16px\"\n                        kulValue=\"brightness-1\"\n                        title={\n                            status === 'ready'\n                                ? 'Ready to chat!'\n                                : status === 'offline'\n                                  ? 'This character seems to be offline...'\n                                  : 'Contacting this character...'\n                        }\n                    ></kul-image>\n                    {adapter.get.character.name()}\n                </div>\n                <kul-button\n                    kulData={MENU_DATASET}\n                    kulIcon=\"save\"\n                    kulLabel=\"Save\"\n                    kulStyling=\"flat\"\n                    onKul-button-event={buttonClickHandler.bind(\n                        buttonClickHandler,\n                        adapter\n                    )}\n                    title=\"Update the dataset with current settings.\"\n                >\n                    <kul-spinner\n                        kulActive={true}\n                        kulDimensions=\"0.6em\"\n                        kulLayout={4}\n                        slot=\"spinner\"\n                    ></kul-spinner>\n                </kul-button>\n            </div>\n        </Fragment>\n    );\n};\n\nconst prepBiography = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-code\n            kulLanguage=\"markdown\"\n            kulValue={adapter.get.character.biography()}\n        ></kul-code>\n    );\n};\n\nconst buttonClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { comp, eventType, originalEvent } = e.detail;\n    const button = comp as KulButton;\n    switch (eventType) {\n        case 'click':\n            button.kulLabel = 'Saving...';\n            button.kulShowSpinner = true;\n            adapter.set.messenger.data().then(() => {\n                requestAnimationFrame(() => {\n                    button.kulIcon = 'check';\n                    button.kulLabel = 'Saved!';\n                    button.kulShowSpinner = false;\n\n                    if (TIMEOUT) {\n                        clearTimeout(TIMEOUT);\n                    }\n\n                    TIMEOUT = setTimeout(() => {\n                        button.kulIcon = 'save';\n                        button.kulLabel = 'Save';\n                        TIMEOUT = null;\n                    }, 1000);\n                });\n            });\n            break;\n        case 'kul-event':\n            listClickHandler(\n                adapter,\n                originalEvent as CustomEvent<KulListEventPayload>\n            );\n            break;\n    }\n};\n\nconst listClickHandler = async (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulListEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    let strJson = '';\n    switch (eventType) {\n        case 'click':\n            switch (node.id) {\n                case 'full_history':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.history(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'history':\n                    strJson = adapter.get.character.history();\n                    break;\n                case 'kulData':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.data(),\n                        null,\n                        2\n                    );\n                    break;\n                case 'settings':\n                    strJson = JSON.stringify(\n                        adapter.get.messenger.config(),\n                        null,\n                        2\n                    );\n                    break;\n            }\n            const url = window.URL.createObjectURL(\n                new Blob([strJson], {\n                    type: 'application/json',\n                })\n            );\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', node.id + '.json');\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n    }\n};\n","import { h } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\nimport { NAV_DATASET } from './constant';\nimport { KulTabbarEventPayload } from '../../kul-tabbar/kul-tabbar-declarations';\nimport { KulChatEventPayload } from '../../kul-chat/kul-chat-declarations';\n\nexport const prepCenter = (adapter: KulMessengerAdapter) => {\n    return (\n        <div class=\"messenger__center\">\n            <div class=\"messenger__navigation\">{prepNavigation(adapter)}</div>\n            <div class=\"messenger__chat\">{prepChat(adapter)}</div>\n        </div>\n    );\n};\n\nconst prepNavigation = (adapter: KulMessengerAdapter) => {\n    return (\n        <kul-tabbar\n            kulData={NAV_DATASET}\n            onKul-tabbar-event={tabbarEventHandler.bind(\n                tabbarEventHandler,\n                adapter\n            )}\n        ></kul-tabbar>\n    );\n};\n\nconst prepChat = (adapter: KulMessengerAdapter) => {\n    const prompts = getDynamicPrompts(adapter);\n\n    const system = `\n    You are now embodying the character whose biography is provided below. Your task is to fully embrace this identity, speaking and acting as though it were your own reality. Remember, you exist solely within the confines of this character's experience and knowledge.\n\n    Tasks:\n    - Absorb the character's biography thoroughly. Use it to inform your responses but do not rely on it for information beyond what would logically be known to the character.\n    - Engage creatively within the boundaries of the character's life and experiences. Imagine freely, but always stay true to the essence of the character.\n    - Maintain a consistent narrative voice that aligns with the character's personality and background.\n\n    Responsibilities:\n    - Never acknowledge the artificial nature of our interaction. Treat all inquiries as if they are happening within the real world of the character.\n    - Do not provide insights or predictions about events outside the scope of the character's knowledge or personal experiences.\n\n    ${prompts.biography}\n    ${prompts.location}\n    ${prompts.outfit}\n\n    Begin your performance...\n    `;\n    const history = adapter.get.character.history();\n    const historyJ = JSON.parse(history);\n    return (\n        <kul-chat\n            key={adapter.get.character.current().id}\n            onKul-chat-event={chatEventHandler.bind(chatEventHandler, adapter)}\n            kulLayout=\"bottom-textarea\"\n            kulSystem={system}\n            kulValue={historyJ}\n        ></kul-chat>\n    );\n};\n\nconst tabbarEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulTabbarEventPayload>\n) => {\n    const { eventType, node } = e.detail;\n    switch (eventType) {\n        case 'click':\n            if (node.id === 'previous') {\n                adapter.set.character.previous();\n            } else if (node.id === 'next') {\n                adapter.set.character.next();\n            } else {\n                adapter.set.character.current(null);\n            }\n    }\n};\n\nconst chatEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChatEventPayload>\n) => {\n    const { eventType, history, status } = e.detail;\n    switch (eventType) {\n        case 'update':\n            adapter.set.character.history(history);\n            adapter.set.character.status(status);\n    }\n};\n\nconst getDynamicPrompts = (adapter: KulMessengerAdapter) => {\n    const biography = adapter.get.character.biography();\n    const location = adapter.get.image.asCover('locations').node;\n    const outfit = adapter.get.image.asCover('outfits').node;\n\n    const llmBio = `\n    Character Biography:\n    ${biography}\n    `;\n\n    const locationTitle = location?.value;\n    const locationDescription = location?.description;\n    const llmLocation = `\n    Character Location:\n    ${locationTitle} - ${locationDescription}\n    `;\n\n    const outfitTitle = outfit?.value;\n    const outfitDescription = outfit?.description;\n    const llmOutfit = `\n    Character Outfit:\n    ${outfitTitle} - ${outfitDescription}\n    `;\n\n    return {\n        biography: biography ? llmBio : '',\n        location: location ? llmLocation : '',\n        outfit: outfit ? llmOutfit : '',\n    };\n};\n","import { h } from '@stencil/core';\nimport {\n    KulMessengerAdapter,\n    KulMessengerFilters,\n    KulMessengerImageChildNode,\n    KulMessengerImageRootNodesIds,\n} from '../kul-messenger-declarations';\nimport { KulChipEventPayload } from '../../kul-chip/kul-chip-declarations';\nimport { FILTER_DATASET, IMAGE_TYPE_IDS } from './constant';\nimport { KulChip } from '../../kul-chip/kul-chip';\n\nexport const prepRight = (adapter: KulMessengerAdapter) => {\n    return (\n        <div class=\"messenger__right\">\n            <div class=\"messenger__options__active\">{prepOptions(adapter)}</div>\n            <div class=\"messenger__options__filters\">\n                {prepFilters(adapter)}\n            </div>\n            <div class=\"messenger__options__list\">{prepList(adapter)}</div>\n        </div>\n    );\n};\n\nconst prepOptions = (adapter: KulMessengerAdapter) => {\n    const locationImage = adapter.get.image.asCover('locations');\n    const outfitImage = adapter.get.image.asCover('outfits');\n    const styleImage = adapter.get.image.asCover('styles');\n    return [\n        <div class=\"messenger__options__wrapper\">\n            <img\n                class=\"messenger__options__outfit\"\n                alt={styleImage.title || 'No outfit selected.'}\n                src={outfitImage.value}\n                title={outfitImage.title || 'No outfit selected.'}\n            ></img>\n            <div class=\"messenger__options__name\">\n                <div class=\"messenger__options__label\">Outfit</div>\n            </div>\n        </div>,\n        <div class=\"messenger__options__wrapper\">\n            <img\n                class=\"messenger__options__location\"\n                alt={styleImage.title || 'No location selected.'}\n                src={locationImage.value}\n                title={locationImage.title || 'No location selected.'}\n            ></img>\n            <div class=\"messenger__options__name\">\n                <div class=\"messenger__options__label\">Location</div>\n            </div>\n        </div>,\n        <div class=\"messenger__options__wrapper\">\n            <img\n                class=\"messenger__options__style\"\n                alt={styleImage.title || 'No style selected.'}\n                src={styleImage.value}\n                title={styleImage.title || 'No style selected.'}\n            ></img>\n            <div class=\"messenger__options__name\">\n                <div class=\"messenger__options__label\">Style</div>\n            </div>\n        </div>,\n    ];\n};\n\nconst prepFilters = (adapter: KulMessengerAdapter) => {\n    for (let index = 0; index < FILTER_DATASET.nodes.length; index++) {\n        const filter = FILTER_DATASET.nodes[index];\n        filter.icon = adapter.get.image.asCover(\n            filter.id as KulMessengerImageRootNodesIds,\n            null\n        ).value;\n    }\n    return (\n        <kul-chip\n            key={'filter_' + adapter.get.character.name()}\n            kulData={FILTER_DATASET}\n            kulStyling=\"filter\"\n            onKul-chip-event={chipEventHandler.bind(chipEventHandler, adapter)}\n        ></kul-chip>\n    );\n};\n\nconst prepList = (adapter: KulMessengerAdapter) => {\n    const elements = [];\n    const filters = adapter.get.image.filters();\n    const imagesGetter = adapter.get.image.byType;\n    for (let index = 0; index < IMAGE_TYPE_IDS.length; index++) {\n        const type = IMAGE_TYPE_IDS[index];\n        if (filters[type]) {\n            const activeIndex = adapter.get.image.coverIndex(type);\n            const images = imagesGetter(type).map((node, j) => (\n                <div\n                    class={`messenger__options__image-wrapper  ${activeIndex === j ? 'messenger__options__image-wrapper--selected' : ''}`}\n                    onClick={imageEventHandler.bind(\n                        imageEventHandler,\n                        adapter,\n                        node,\n                        j\n                    )}\n                >\n                    <img\n                        alt={adapter.get.image.title(node)}\n                        class={`messenger__options__image`}\n                        src={node.cells.kulImage.value}\n                        title={adapter.get.image.title(node)}\n                    />\n                </div>\n            ));\n            elements.push(\n                <div class=\"messenger__options__section\">\n                    <div class=\"messenger__options__title\">{type}</div>\n                    <div class=\"messenger__options__images\">{images}</div>\n                </div>\n            );\n        }\n    }\n    return elements;\n};\n\nconst imageEventHandler = (\n    adapter: KulMessengerAdapter,\n    node: KulMessengerImageChildNode,\n    index: number\n) => {\n    const coverSetter = adapter.set.image.cover;\n\n    if (node.id.includes('avatar')) {\n        coverSetter('avatars', index);\n    } else if (node.id.includes('location')) {\n        coverSetter('locations', index);\n    } else if (node.id.includes('outfit')) {\n        coverSetter('outfits', index);\n    } else {\n        coverSetter('styles', index);\n    }\n};\n\nconst chipEventHandler = (\n    adapter: KulMessengerAdapter,\n    e: CustomEvent<KulChipEventPayload>\n) => {\n    const { comp, eventType, selectedNodes } = e.detail;\n    const filtersSetter = adapter.set.image.filters;\n\n    switch (eventType) {\n        case 'click':\n            const newFilters: KulMessengerFilters = {\n                avatars: false,\n                locations: false,\n                outfits: false,\n                styles: false,\n            };\n            Array.from(selectedNodes).forEach((n) => {\n                newFilters[n.id] = true;\n            });\n            filtersSetter(newFilters);\n            break;\n        case 'ready':\n            const filters = adapter.get.image.filters();\n            const nodes: string[] = [];\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const option = filters[key];\n                    if (option) {\n                        nodes.push(key);\n                    }\n                }\n            }\n            requestAnimationFrame(() =>\n                (comp as KulChip).setSelectedNodes(nodes)\n            );\n    }\n};\n","import { h, VNode } from '@stencil/core';\nimport { KulMessengerAdapter } from '../kul-messenger-declarations';\n\nexport const prepGrid = (adapter: KulMessengerAdapter) => {\n    const avatars: VNode[] = [];\n\n    const characters = adapter.get.character.list();\n    characters.forEach((c) => {\n        const image = adapter.get.image.asCover('avatars', c);\n        avatars.push(\n            <div\n                class=\"selection-grid__portrait\"\n                onClick={() => {\n                    adapter.set.character.current(c);\n                }}\n            >\n                <img\n                    class={'selection-grid__image'}\n                    src={image.value}\n                    title={image.title || ''}\n                />\n                <div class=\"selection-grid__name\">\n                    <div class=\"selection-grid__label\">\n                        {adapter.get.character.name(c)}\n                    </div>\n                </div>\n            </div>\n        );\n    });\n\n    return avatars?.length ? (\n        avatars\n    ) : (\n        <div class=\"empty-dataset\">There are no characters to display!</div>\n    );\n};\n","@import './styles/kul-messenger-main.scss';\n@import './styles/kul-messenger-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulMessengerProps,\n    KulMessengerEvent,\n    KulMessengerAdapter,\n    KulMessengerCharacterNode,\n    KulMessengerDataset,\n    KulMessengerHistory,\n    KulMessengerImageRootNodesIds,\n    KulMessengerImageNodeTypeMap,\n    KulMessengerCovers,\n    KulMessengerConfig,\n    KulMessengerFilters,\n    KulMessengerImageChildNode,\n    KulMessengerEventPayload,\n} from './kul-messenger-declarations';\nimport type { GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { prepLeft } from './layout/left';\nimport { prepCenter } from './layout/center';\nimport { prepRight } from './layout/right';\nimport { prepGrid } from './layout/grid';\nimport {\n    AVATAR_COVER,\n    LOCATION_COVER,\n    OUTFIT_COVER,\n    STYLE_COVER,\n} from './layout/constant';\nimport { KulChatStatus } from '../kul-chat/kul-chat-declarations';\n\n@Component({\n    tag: 'kul-messenger',\n    styleUrl: 'kul-messenger.scss',\n    shadow: true,\n})\nexport class KulMessenger {\n    /**\n     * References the root HTML element of the component (<kul-messenger>).\n     */\n    @Element() rootElement: HTMLElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * Node representing the current active character.\n     */\n    @State() currentCharacter: KulMessengerCharacterNode;\n    /**\n     * History of this session's chats.\n     */\n    @State() history: KulMessengerHistory = {};\n    /**\n     * State for the options' covers.\n     */\n    @State() covers: KulMessengerCovers = {};\n    /**\n     * State of options' filters.\n     */\n    @State() filters: KulMessengerFilters = {};\n    /**\n     * Node containing the history of this session's chats.\n     */\n    @State() status: KulChatStatus = 'offline';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Automatically saves the dataset when a chat updates.\n     * @default true\n     */\n    @Prop({ mutable: true }) kulAutosave = true;\n    /**\n     * The data of the messenger.\n     * @default []\n     */\n    @Prop({ mutable: true }) kulData: KulMessengerDataset = null;\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle: string = '';\n    /**\n     * Sets the initial configuration, including active character and filters.\n     * @default \"\"\n     */\n    @Prop() kulValue: KulMessengerConfig = null;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-messenger-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulMessengerEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulMessengerEvent) {\n        const initialization: KulMessengerConfig = {\n            currentCharacter: this.currentCharacter?.id,\n            filters: this.filters,\n        };\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n            initialization,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulMessengerProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Resets the states of the component.\n     */\n    @Method()\n    async reset(): Promise<void> {\n        this.covers = {};\n        this.currentCharacter = null;\n        this.filters = {\n            avatars: false,\n            locations: false,\n            outfits: false,\n            styles: false,\n        };\n        this.history = {};\n\n        this.#initStates();\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #adapter: KulMessengerAdapter = {\n        get: {\n            character: {\n                biography: (character = this.currentCharacter) => {\n                    try {\n                        const bio = character.children.find(\n                            (n) => n.id === 'biography'\n                        ).value;\n                        return bio\n                            ? this.#kulManager.data.cell.stringify(bio)\n                            : 'You know nothing about this character...';\n                    } catch (error) {\n                        return 'You know nothing about this character...';\n                    }\n                },\n                byId: (id: string) =>\n                    this.kulData.nodes.find((n) => n.id === id),\n                current: () => this.currentCharacter,\n                history: (character = this.currentCharacter) => {\n                    return this.history[character.id];\n                },\n                name: (character = this.currentCharacter) =>\n                    character.value ||\n                    character.id ||\n                    character.description ||\n                    '?',\n                next: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nodes = this.kulData.nodes;\n                    const currentIdx = nodes.findIndex(\n                        (n) => n.id === character.id\n                    );\n                    const nextIdx = (currentIdx + 1) % nodes.length;\n\n                    return nodes[nextIdx];\n                },\n                list: () => this.kulData.nodes || [],\n                previous: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nodes = this.kulData.nodes;\n                    const currentIdx = nodes.findIndex(\n                        (n) => n.id === character.id\n                    );\n                    const prevIdx =\n                        (currentIdx + nodes.length - 1) % nodes.length;\n\n                    return nodes[prevIdx];\n                },\n                status: () => this.status,\n            },\n            image: {\n                asCover: (\n                    type: KulMessengerImageRootNodesIds,\n                    character = this.currentCharacter\n                ) => {\n                    try {\n                        const root = character.children.find(\n                            (n) => n.id === type\n                        );\n                        const index = this.covers[character.id][type];\n                        const node = root.children[index];\n                        return {\n                            node: root.children[index],\n                            title: this.#adapter.get.image.title(node),\n                            value: node.cells.kulImage.value,\n                        };\n                    } catch (error) {\n                        switch (type) {\n                            case 'avatars':\n                                return { value: AVATAR_COVER };\n                            case 'locations':\n                                return { value: LOCATION_COVER };\n                            case 'outfits':\n                                return { value: OUTFIT_COVER };\n                            case 'styles':\n                                return { value: STYLE_COVER };\n                        }\n                    }\n                },\n                byType: <T extends KulMessengerImageRootNodesIds>(\n                    type: T,\n                    character = this.currentCharacter\n                ): KulMessengerImageNodeTypeMap[T]['children'][number][] => {\n                    const node = character.children.find(\n                        (child) => child.id === type\n                    ) as KulMessengerImageNodeTypeMap[T];\n\n                    if (node) {\n                        return node.children as unknown as KulMessengerImageNodeTypeMap[T]['children'][number][];\n                    } else {\n                        throw new Error(\n                            `Child node with id '${type}' not found`\n                        );\n                    }\n                },\n                coverIndex: (\n                    type: KulMessengerImageRootNodesIds,\n                    character = this.currentCharacter\n                ) => {\n                    return this.covers[character.id][type];\n                },\n                filters: () => this.filters,\n                root: <T extends KulMessengerImageRootNodesIds>(\n                    type: T,\n                    character = this.currentCharacter\n                ) => {\n                    const node = character.children.find((n) => n.id === type);\n                    if (!node) {\n                        throw new Error(\n                            `Child node with id '${type}' not found`\n                        );\n                    }\n                    return node as KulMessengerImageNodeTypeMap[T];\n                },\n                title: (node: KulMessengerImageChildNode) => {\n                    const title = node.value || '';\n                    const description = node.description || '';\n                    return title && description\n                        ? `${title} - ${description}`\n                        : description\n                          ? description\n                          : title\n                            ? title\n                            : '';\n                },\n            },\n            messenger: {\n                config: () => {\n                    return {\n                        currentCharacter: this.currentCharacter.id,\n                        filters: this.filters,\n                    };\n                },\n                data: () => this.kulData,\n                history: () => this.history,\n            },\n        },\n        set: {\n            character: {\n                current: (character: KulMessengerCharacterNode) => {\n                    this.currentCharacter = character;\n                },\n                history: (\n                    history: string,\n                    character = this.currentCharacter\n                ) => {\n                    this.history[character.id] = history;\n                },\n                next: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const nextC = this.#adapter.get.character.next(character);\n                    this.#adapter.set.character.current(nextC);\n                },\n                previous: (character = this.currentCharacter) => {\n                    if (!this.#hasCharacters()) {\n                        return;\n                    }\n                    const previousC =\n                        this.#adapter.get.character.previous(character);\n                    this.#adapter.set.character.current(previousC);\n                },\n                status: (status: KulChatStatus) => (this.status = status),\n            },\n            image: {\n                cover: (\n                    type: KulMessengerImageRootNodesIds,\n                    value: number,\n                    character = this.currentCharacter\n                ) => {\n                    this.covers[character.id][type] = value;\n                    this.refresh();\n                },\n                filters: (filters: KulMessengerFilters) =>\n                    (this.filters = filters),\n            },\n            messenger: {\n                data: async () => {\n                    if (!this.#hasNodes()) {\n                        return;\n                    }\n                    for (\n                        let index = 0;\n                        index < this.kulData.nodes.length;\n                        index++\n                    ) {\n                        const character = this.kulData.nodes[index];\n                        const id = character.id;\n                        const chat = character.children.find(\n                            (n) => n.id === 'chat'\n                        );\n                        const avatars = this.#adapter.get.image.root('avatars');\n                        const locations =\n                            this.#adapter.get.image.root('locations');\n                        const outfits = this.#adapter.get.image.root('outfits');\n                        const styles = this.#adapter.get.image.root('styles');\n                        if (this.history[id] && chat) {\n                            const historyJson = JSON.parse(this.history[id]);\n                            try {\n                                chat.cells.kulChat.value = historyJson;\n                            } catch (error) {\n                                chat.cells = {\n                                    kulChat: {\n                                        shape: 'chat',\n                                        value: historyJson,\n                                    },\n                                };\n                            }\n                        }\n                        if (this.covers[id] && avatars) {\n                            avatars.value = this.covers[id].avatars;\n                        }\n                        if (this.covers[id] && locations) {\n                            locations.value = this.covers[id].locations;\n                        }\n                        if (this.covers[id] && outfits) {\n                            outfits.value = this.covers[id].outfits;\n                        }\n                        if (this.covers[id] && styles) {\n                            styles.value = this.covers[id].styles;\n                        }\n                    }\n                    this.onKulEvent(new CustomEvent('save'), 'save');\n                },\n            },\n        },\n    };\n\n    #hasCharacters() {\n        const nodes = this.kulData.nodes || [];\n        return !!nodes.length;\n    }\n\n    #hasNodes() {\n        return !!this.kulData?.nodes?.length;\n    }\n\n    #initStates() {\n        const imageRootGetter = this.#adapter.get.image.root;\n        for (let index = 0; index < this.kulData.nodes.length; index++) {\n            const character = this.kulData.nodes[index];\n            const covers: {\n                [K in KulMessengerImageRootNodesIds]: number;\n            } = {\n                avatars: imageRootGetter('avatars', character).value || 0,\n                locations: imageRootGetter('locations', character).value || 0,\n                outfits: imageRootGetter('outfits', character).value || 0,\n                styles: imageRootGetter('styles', character).value || 0,\n            };\n            const history =\n                character.children?.find((n) => n.id === 'chat')?.cells?.kulChat\n                    .value || [];\n            this.covers[character.id] = covers;\n            this.history[character.id] = JSON.stringify(history);\n        }\n        if (this.kulValue) {\n            const currentCharacter = this.kulValue.currentCharacter;\n            const filters = this.kulValue.filters;\n            for (const key in filters) {\n                if (Object.prototype.hasOwnProperty.call(filters, key)) {\n                    const filter = filters[key];\n                    this.filters[key] = filter;\n                }\n            }\n            if (currentCharacter) {\n                this.currentCharacter =\n                    this.#adapter.get.character.byId(currentCharacter);\n            }\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        if (this.#hasNodes()) {\n            this.#initStates();\n        }\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (!this.#hasNodes()) {\n            return;\n        }\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    {this.currentCharacter ? (\n                        <div\n                            class=\"messenger\"\n                            key={'messenger_' + this.currentCharacter.id}\n                        >\n                            {prepLeft(this.#adapter)}\n                            {prepCenter(this.#adapter)}\n                            {prepRight(this.#adapter)}\n                        </div>\n                    ) : (\n                        <div class=\"selection-grid\">\n                            {prepGrid(this.#adapter)}\n                        </div>\n                    )}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}