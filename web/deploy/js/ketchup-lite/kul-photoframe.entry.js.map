{"file":"kul-photoframe.entry.js","mappings":"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","names":[],"sources":["src/components/kul-photoframe/kul-photoframe-declarations.ts","src/components/kul-photoframe/kul-photoframe.scss?tag=kul-photoframe&encapsulation=shadow","src/components/kul-photoframe/kul-photoframe.tsx"],"sourcesContent":["import { GenericObject, KulEventPayload } from \"../../types/GenericTypes\";\n\n//#region Events\nexport type KulPhotoframeEvent = \"load\" | \"ready\" | \"unmount\";\nexport interface KulPhotoframeEventPayload\n  extends KulEventPayload<\"KulPhotoframe\", KulPhotoframeEvent> {\n  isPlaceholder?: boolean;\n}\n//#endregion\n\n//#region Props\nexport enum KulPhotoframeProps {\n  kulPlaceholder = \"Html attributes of the picture before the component enters the viewport.\",\n  kulStyle = \"Custom style of the component.\",\n  kulThreshold = \"Percentage of the component's dimensions entering the viewport (0.1 => 1)\",\n  kulValue = \"Html attributes of the picture after the component enters the viewport.\",\n}\nexport interface KulPhotoframePropsInterface {\n  kulPlaceholder?: GenericObject;\n  kulStyle?: string;\n  kulThreshold?: number;\n  kulValue?: GenericObject;\n}\n//#endregion\n","@import \"styles/kup-photoframe-main.scss\";\n@import \"styles/kup-photoframe-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Prop,\n  State,\n} from \"@stencil/core\";\nimport { Method } from \"@stencil/core/internal\";\n\nimport {\n  KulPhotoframeEventPayload,\n  KulPhotoframeEvent,\n  KulPhotoframeProps,\n} from \"./kul-photoframe-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { GenericObject } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-photoframe\",\n  styleUrl: \"kul-photoframe.scss\",\n  shadow: true,\n})\nexport class KulPhotoframe {\n  /**\n   * References the root HTML element of the component (<kul-photoframe>).\n   */\n  @Element() rootElement: HTMLKulPhotoframeElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * A boolean that flags when the component enters the viewport for the first time to trigger a new render.\n   * @default false\n   */\n  @State() isInViewport = false;\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Html attributes of the picture before the component enters the viewport.\n   * @default null\n   */\n  @Prop() kulPlaceholder: GenericObject = null;\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * Percentage of the component dimensions entering the viewport (0.1 => 1).\n   * @default 0.25\n   */\n  @Prop() kulThreshold = 0.25;\n  /**\n   * Html attributes of the picture after the component enters the viewport.\n   * @default null\n   */\n  @Prop() kulValue: GenericObject = null;\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #intObserver: IntersectionObserver;\n  #kulManager = kulManagerInstance();\n  #placeholderEl: HTMLImageElement;\n  #valueEl: HTMLImageElement;\n  #renderValue = false;\n  #wrapperEl: HTMLElement;\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-photoframe-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulPhotoframeEventPayload>;\n\n  onKulEvent(\n    e: Event | CustomEvent,\n    eventType: KulPhotoframeEvent,\n    isPlaceholder = false,\n  ) {\n    this.kulEvent.emit({\n      comp: this,\n      id: this.rootElement.id,\n      originalEvent: e,\n      eventType,\n      isPlaceholder,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's props values.\n   * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n   * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulPhotoframeProps, descriptions);\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #setObserver(): void {\n    const callback = (entries: IntersectionObserverEntry[]) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          this.isInViewport = true;\n          this.#intObserver.unobserve(this.rootElement);\n        }\n      });\n    };\n    const options: IntersectionObserverInit = {\n      threshold: this.kulThreshold,\n    };\n    this.#intObserver = new IntersectionObserver(callback, options);\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n    this.#setObserver();\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    if (this.isInViewport && !this.#renderValue) {\n      this.#renderValue = true;\n    }\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div\n          id={KUL_WRAPPER_ID}\n          ref={(el) => {\n            this.#wrapperEl = el;\n          }}\n        >\n          <img\n            {...this.kulPlaceholder}\n            class=\"placeholder\"\n            ref={(el) => (this.#placeholderEl = el)}\n            onLoad={(e) => {\n              if (\n                this.#placeholderEl.naturalWidth >\n                this.#placeholderEl.naturalHeight\n              ) {\n                this.#wrapperEl.classList.add(\"horizontal\");\n              } else {\n                this.#wrapperEl.classList.add(\"vertical\");\n              }\n              this.#intObserver.observe(this.rootElement);\n              this.#placeholderEl.classList.add(\"placeholder--loaded\");\n              this.onKulEvent(e, \"load\", true);\n            }}\n          ></img>\n          {this.#renderValue ? (\n            <img\n              {...this.kulValue}\n              class=\"value\"\n              ref={(el) => (this.#valueEl = el)}\n              onLoad={(e) => {\n                this.#placeholderEl.classList.add(\"placeholder--fade-out\");\n                this.#valueEl.classList.add(\"value--fade-in\");\n                this.onKulEvent(e, \"load\");\n              }}\n            ></img>\n          ) : null}\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n    this.#intObserver?.unobserve(this.rootElement);\n  }\n}\n"],"version":3}