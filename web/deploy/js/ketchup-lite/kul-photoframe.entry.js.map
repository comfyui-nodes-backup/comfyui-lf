{"file":"kul-photoframe.entry.js","mappings":"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","names":[],"sources":["src/components/kul-photoframe/kul-photoframe-declarations.ts","src/components/kul-photoframe/kul-photoframe.scss?tag=kul-photoframe&encapsulation=shadow","src/components/kul-photoframe/kul-photoframe.tsx"],"sourcesContent":["import { GenericObject, KulEventPayload } from '../../components';\n\nexport type KulPhotoframeEvent = 'load' | 'ready';\n\nexport interface KulPhotoframeEventPayload extends KulEventPayload {\n    isPlaceholder?: boolean;\n}\n\nexport enum KulPhotoframeProps {\n    kulPlaceholder = 'Html attributes of the picture before the component enters the viewport.',\n    kulStyle = 'Custom style of the component.',\n    kulThreshold = \"Percentage of the component's dimensions entering the viewport (0.1 => 1)\",\n    kulValue = 'Html attributes of the picture after the component enters the viewport.',\n}\n\nexport interface KulPhotoframePropsInterface {\n    kulPlaceholder?: GenericObject;\n    kulStyle?: string;\n    kulThreshold?: number;\n    kulValue?: GenericObject;\n}\n","@import 'styles/kup-photoframe-main.scss';\n@import 'styles/kup-photoframe-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { Method } from '@stencil/core/internal';\nimport { GenericObject } from '../../types/GenericTypes';\nimport {\n    KulPhotoframeEventPayload,\n    KulPhotoframeEvent,\n    KulPhotoframeProps,\n} from './kul-photoframe-declarations';\nimport { KulDebugComponentInfo } from '../../components';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { getProps } from '../../utils/componentUtils';\n\n@Component({\n    tag: 'kul-photoframe',\n    styleUrl: 'kul-photoframe.scss',\n    shadow: true,\n})\nexport class KulPhotoframe {\n    /**\n     * References the root HTML element of the component (<kul-photoframe>).\n     */\n    @Element() rootElement: HTMLKulPhotoframeElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * A boolean that flags when the component enters the viewport for the first time to trigger a new render.\n     * @default false\n     */\n    @State() isInViewport = false;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Html attributes of the picture before the component enters the viewport.\n     * @default null\n     */\n    @Prop() kulPlaceholder: GenericObject = null;\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Percentage of the component dimensions entering the viewport (0.1 => 1).\n     * @default 0.25\n     */\n    @Prop() kulThreshold = 0.25;\n    /**\n     * Html attributes of the picture after the component enters the viewport.\n     * @default null\n     */\n    @Prop() kulValue: GenericObject = null;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #intObserver: IntersectionObserver;\n    #kulManager = kulManagerInstance();\n    #placeholderEl: HTMLImageElement;\n    #valueEl: HTMLImageElement;\n    #renderValue = false;\n    #wrapperEl: HTMLElement;\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-photoframe-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulPhotoframeEventPayload>;\n\n    onKulEvent(\n        e: Event | CustomEvent,\n        eventType: KulPhotoframeEvent,\n        isPlaceholder = false\n    ) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n            isPlaceholder,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulPhotoframeProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #setObserver(): void {\n        const callback = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting) {\n                    this.isInViewport = true;\n                    this.#intObserver.unobserve(this.rootElement);\n                }\n            });\n        };\n        const options: IntersectionObserverInit = {\n            threshold: this.kulThreshold,\n        };\n        this.#intObserver = new IntersectionObserver(callback, options);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.#setObserver();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (this.isInViewport && !this.#renderValue) {\n            this.#renderValue = true;\n        }\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div\n                    id={KUL_WRAPPER_ID}\n                    ref={(el) => {\n                        this.#wrapperEl = el;\n                    }}\n                >\n                    <img\n                        {...this.kulPlaceholder}\n                        class=\"placeholder\"\n                        ref={(el) => (this.#placeholderEl = el)}\n                        onLoad={(e) => {\n                            if (\n                                this.#placeholderEl.naturalWidth >\n                                this.#placeholderEl.naturalHeight\n                            ) {\n                                this.#wrapperEl.classList.add('horizontal');\n                            } else {\n                                this.#wrapperEl.classList.add('vertical');\n                            }\n                            this.#intObserver.observe(this.rootElement);\n                            this.#placeholderEl.classList.add(\n                                'placeholder--loaded'\n                            );\n                            this.onKulEvent(e, 'load', true);\n                        }}\n                    ></img>\n                    {this.#renderValue ? (\n                        <img\n                            {...this.kulValue}\n                            class=\"value\"\n                            ref={(el) => (this.#valueEl = el)}\n                            onLoad={(e) => {\n                                this.#placeholderEl.classList.add(\n                                    'placeholder--fade-out'\n                                );\n                                this.#valueEl.classList.add('value--fade-in');\n                                this.onKulEvent(e, 'load');\n                            }}\n                        ></img>\n                    ) : null}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n        this.#intObserver?.unobserve(this.rootElement);\n    }\n}\n"],"version":3}