{"file":"kul-toggle.entry.js","mappings":";;;;AAmBA;AAEA;AACA,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,uEAAqD,CAAA;IACrD,6EAA2D,CAAA;IAC3D,4HAA0G,CAAA;IAC1G,qGAAmF,CAAA;IACnF,yEAAuD,CAAA;IACvD,wEAAsD,CAAA;AACxD,CAAC,EAPW,cAAc,KAAd,cAAc,QAOzB;AASD;;ACtCA,MAAM,YAAY,GAAG,sqJAAsqJ,CAAC;AAC5rJ,wBAAe,YAAY;;;;;;;;;;;;;;;;;;;MCgCd,SAAS;;;;;;;;QAmEpB,gCAAc,kBAAkB,EAAE,EAAC;QACnC,2CAA4B;yBAvDgB;YAC1C,OAAO,EAAE,CAAC;YACV,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,WAAW,CAAC,GAAG,EAAE;SAC7B;qBAOgC,KAAK;2BAUgB,KAAK;wBAKR,EAAE;+BAKK,KAAK;yBAKX,IAAI;wBAKL,EAAE;wBAKhB,KAAK;;IAwB1C,UAAU,CAAC,CAAsB,EAAE,SAAyB;QAC1D,QAAQ,SAAS;YACf,KAAK,aAAa;gBAChB,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CACnC,CAAiB,EACjB,uBAAA,IAAI,gCAAe,CACpB,CAAC;iBACH;gBACD,MAAM;SACT;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACjB,IAAI,EAAE,IAAI;YACV,SAAS;YACT,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YACvB,aAAa,EAAE,CAAC;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,cAAc,EAAE,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK;SACnD,CAAC,CAAC;KACJ;;;;;;;;IAWD,MAAM,YAAY;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;;IAOD,MAAM,QAAQ,CAAC,YAAsB;QACnC,OAAO,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;KACrD;;;;;IAMD,MAAM,QAAQ;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;IAKD,MAAM,OAAO;QACX,WAAW,CAAC,IAAI,CAAC,CAAC;KACnB;;;;;;IAOD,MAAM,QAAQ,CAAC,KAA+B;QAC5C,uBAAA,IAAI,oDAAa,MAAjB,IAAI,EAAc,KAAK,CAAC,CAAC;KAC1B;;;;;IAMD,MAAM,OAAO,CAAC,KAAa,CAAC;QAC1B,UAAU,CAAC;YACT,IAAI,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3B,EAAE,EAAE,CAAC,CAAC;KACR;;;;IA2BD,iBAAiB;QACf,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;QAED,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACvC;IAED,gBAAgB;QACd,IAAI,uBAAA,IAAI,gCAAe,EAAE;YACvB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAA,IAAI,gCAAe,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACnD,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC1D;IAED,mBAAmB;QACjB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KAC7D;IAED,kBAAkB;QAChB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;KAC5D;IAED,MAAM;QACJ,MAAM,SAAS,GAA4B;YACzC,MAAM,EAAE,IAAI;YACZ,iBAAiB,EAAE,uBAAA,IAAI,6CAAM,MAAV,IAAI,CAAQ;YAC/B,kBAAkB,EAAE,IAAI,CAAC,WAAW;SACrC,CAAC;QACF,MAAM,aAAa,GAA4B;YAC7C,YAAY,EAAE,IAAI;YAClB,uBAAuB,EAAE,IAAI,CAAC,eAAe;SAC9C,CAAC;QACF,QACE,EAAC,IAAI,uDACF,IAAI,CAAC,QAAQ,IACZ,aAAO,EAAE,EAAE,YAAY,IACpB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CACnC,IACN,SAAS,EACb,4DAAK,EAAE,EAAE,cAAc,IACrB,4DAAK,KAAK,EAAE,aAAa,IACvB,4DAAK,KAAK,EAAE,SAAS,IACnB,4DAAK,KAAK,EAAC,eAAe,GAAO,EACjC,4DAAK,KAAK,EAAC,wBAAwB,IACjC,4DAAK,KAAK,EAAC,eAAe,IACxB,4DACE,GAAG,EAAE,CAAC,EAAE;gBACN,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,uBAAA,IAAI,4BAAkB,EAAE,MAAA,CAAC;iBAC1B;aACF,GACI,EACP,8DACE,KAAK,EAAC,wBAAwB,EAC9B,OAAO,EAAE,uBAAA,IAAI,6CAAM,MAAV,IAAI,CAAQ,aACZ,mBAAmB,CAAC,KAAK,EAClC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAC1B,MAAM,EAAE,CAAC,CAAC;gBACR,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;aAC5B,EACD,QAAQ,EAAE,CAAC,CAAC;gBACV,uBAAA,IAAI,oDAAa,MAAjB,IAAI,EAAc,uBAAA,IAAI,6CAAM,MAAV,IAAI,CAAQ,GAAG,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;aACnD,EACD,OAAO,EAAE,CAAC,CAAC;gBACT,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;aAC7B,EACD,aAAa,EAAE,CAAC,CAAC;gBACf,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;aACnC,EACD,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,GACzB,CACL,CACF,CACF,EACN,8DACE,KAAK,EAAC,eAAe,EACrB,OAAO,EAAE,CAAC,CAAC;gBACT,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;aAC9B,IAEA,IAAI,CAAC,QAAQ,CACR,CACJ,CACF,CACD,EACP;KACH;IAED,oBAAoB;QAClB,uBAAA,IAAI,6BAAY,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACzC;;;;IAlHC,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;AAC5C,CAAC,2DAGC,KAA+B,EAC/B,IAAkC,IAAI,WAAW,CAAC,QAAQ,CAAC;IAE3D,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAC9B,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;KAC9B;IACD,IAAI,CAAC,IAAI,CAAC,WAAW,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,EAAE;QAC5D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC9B;AACH,CAAC;;;;;","names":[],"sources":["src/components/kul-toggle/kul-toggle-declarations.ts","src/components/kul-toggle/kul-toggle.scss?tag=kul-toggle&encapsulation=shadow","src/components/kul-toggle/kul-toggle.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\n\n//#region Events\nexport type KulToggleEvent =\n  | \"blur\"\n  | \"change\"\n  | \"focus\"\n  | \"pointerdown\"\n  | \"ready\"\n  | \"unmount\";\nexport interface KulToggleEventPayload\n  extends KulEventPayload<\"KulToggle\", KulToggleEvent> {\n  value: string;\n  valueAsBoolean: boolean;\n}\n//#endregion\n\n//#region States\nexport type KulToggleState = \"off\" | \"on\";\n//#endregion\n\n//#region Props\nexport enum KulToggleProps {\n  kulDisabled = \"When true, the component is disabled.\",\n  kulLabel = \"Defines text to display along with the toggle.\",\n  kulLeadingLabel = \" Defaults at false. When set to true, the label will be displayed before the component\",\n  kulRipple = \"When set to true, the pointerdown event will trigger a ripple effect.\",\n  kulStyle = \"Sets a custom CSS style for the component.\",\n  kulValue = \"If true, the button is marked as checked.\",\n}\nexport interface KulTogglePropsInterface {\n  kulDisabled?: boolean;\n  kulLabel?: string;\n  kulLeadingLabel?: boolean;\n  kulRipple?: boolean;\n  kulStyle?: string;\n  kulValue?: boolean;\n}\n//#endregion\n","@import \"./styles/kul-toggle-main.scss\";\n@import \"./styles/kul-toggle-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulToggleEvent,\n  KulToggleEventPayload,\n  KulToggleProps,\n  KulToggleState,\n} from \"./kul-toggle-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport {\n  KulDataCyAttributes,\n  type GenericObject,\n} from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-toggle\",\n  styleUrl: \"kul-toggle.scss\",\n  shadow: true,\n})\nexport class KulToggle {\n  /**\n   * References the root HTML element of the component (<kul-toggle>).\n   */\n  @Element() rootElement: HTMLKulToggleElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * The value of the component (\"on\" or \"off\").\n   * @default \"\"\n   *\n   * @see KulToggleState - For a list of possible states.\n   */\n  @State() value: KulToggleState = \"off\";\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Defaults at false. When set to true, the component is disabled.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n  /**\n   * Defines text to display along with the toggle.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulLabel = \"\";\n  /**\n   * Defaults at false. When set to true, the label will be displayed before the component.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulLeadingLabel = false;\n  /**\n   * When set to true, the pointerdown event will trigger a ripple effect.\n   * @default true\n   */\n  @Prop({ mutable: true, reflect: true }) kulRipple = true;\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * Sets the initial boolean state of the toggle.\n   * @default false\n   */\n  @Prop({ mutable: false }) kulValue = false;\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n  #rippleSurface: HTMLElement;\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted for various toggle interactions like click, focus, blur.\n   */\n  @Event({\n    eventName: \"kul-toggle-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulToggleEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulToggleEvent) {\n    switch (eventType) {\n      case \"pointerdown\":\n        if (this.kulRipple) {\n          this.#kulManager.theme.ripple.trigger(\n            e as PointerEvent,\n            this.#rippleSurface,\n          );\n        }\n        break;\n    }\n\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n      value: this.value,\n      valueAsBoolean: this.value === \"on\" ? true : false,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's properties and descriptions.\n   * @param {boolean} descriptions - When true, includes descriptions for each property.\n   * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulToggleProps, descriptions);\n  }\n  /**\n   * Used to retrieve the component's current state.\n   * @returns {Promise<KulToggleState>} Promise resolved with the current state of the component.\n   */\n  @Method()\n  async getValue(): Promise<KulToggleState> {\n    return this.value;\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Sets the component's state.\n   * @param {KulToggleState} value - The new state to be set on the component.\n   * @returns {Promise<void>}\n   */\n  @Method()\n  async setValue(value: KulToggleState | boolean): Promise<void> {\n    this.#updateState(value);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #isOn() {\n    return this.value === \"on\" ? true : false;\n  }\n\n  #updateState(\n    value: KulToggleState | boolean,\n    e: CustomEvent<unknown> | Event = new CustomEvent(\"change\"),\n  ) {\n    if (typeof value === \"boolean\") {\n      value = value ? \"on\" : \"off\";\n    }\n    if (!this.kulDisabled && (value === \"off\" || value === \"on\")) {\n      this.value = value;\n      this.onKulEvent(e, \"change\");\n    }\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    if (this.kulValue) {\n      this.value = \"on\";\n    }\n\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    if (this.#rippleSurface) {\n      this.#kulManager.theme.ripple.setup(this.#rippleSurface);\n    }\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    const className: Record<string, boolean> = {\n      toggle: true,\n      \"toggle--checked\": this.#isOn(),\n      \"toggle--disabled\": this.kulDisabled,\n    };\n    const formClassName: Record<string, boolean> = {\n      \"form-field\": true,\n      \"form-field--align-end\": this.kulLeadingLabel,\n    };\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class={formClassName}>\n            <div class={className}>\n              <div class=\"toggle__track\"></div>\n              <div class=\"toggle__thumb-underlay\">\n                <div class=\"toggle__thumb\">\n                  <div\n                    ref={(el) => {\n                      if (this.kulRipple) {\n                        this.#rippleSurface = el;\n                      }\n                    }}\n                  ></div>\n                  <input\n                    class=\"toggle__native-control\"\n                    checked={this.#isOn()}\n                    data-cy={KulDataCyAttributes.INPUT}\n                    disabled={this.kulDisabled}\n                    onBlur={(e) => {\n                      this.onKulEvent(e, \"blur\");\n                    }}\n                    onChange={(e) => {\n                      this.#updateState(this.#isOn() ? \"off\" : \"on\", e);\n                    }}\n                    onFocus={(e) => {\n                      this.onKulEvent(e, \"focus\");\n                    }}\n                    onPointerDown={(e) => {\n                      this.onKulEvent(e, \"pointerdown\");\n                    }}\n                    role=\"toggle\"\n                    type=\"checkbox\"\n                    value={this.value ? \"on\" : \"off\"}\n                  ></input>\n                </div>\n              </div>\n            </div>\n            <label\n              class=\"toggle__label\"\n              onClick={(e) => {\n                this.onKulEvent(e, \"change\");\n              }}\n            >\n              {this.kulLabel}\n            </label>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}