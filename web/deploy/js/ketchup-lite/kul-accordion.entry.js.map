{"file":"kul-accordion.entry.js","mappings":"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","names":[],"sources":["src/components/kul-accordion/kul-accordion-declarations.ts","src/components/kul-accordion/kul-accordion.scss?tag=kul-accordion&encapsulation=shadow","src/components/kul-accordion/kul-accordion.tsx"],"sourcesContent":["import { KulDataDataset } from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulEventPayload } from \"../../types/GenericTypes\";\n\n//#region Events\nexport type KulAccordionEvent = \"click\" | \"pointerdown\" | \"ready\" | \"unmount\";\nexport interface KulAccordionEventPayload\n  extends KulEventPayload<\"KulAccordion\", KulAccordionEvent> {}\n//#endregion\n\n//#region Props\nexport enum KulAccordionProps {\n  kulData = \"Actual data of the accordion.\",\n  kulRipple = \"When set to true, the pointerdown event will trigger a ripple effect.\",\n  kulStyle = \"Sets a custom CSS style for the component.\",\n}\nexport interface KulAccordionPropsInterface {\n  kulData?: KulDataDataset;\n  kulRipple?: boolean;\n  kulStyle?: string;\n}\n//#endregion\n","@import \"./styles/kul-accordion-main.scss\";\n@import \"./styles/kul-accordion-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  getAssetPath,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n} from \"@stencil/core\";\n\nimport {\n  KulAccordionEvent,\n  KulAccordionEventPayload,\n  KulAccordionProps,\n} from \"./kul-accordion-declarations\";\nimport {\n  KulDataDataset,\n  KulDataNode,\n} from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport {\n  KulDataCyAttributes,\n  type GenericObject,\n} from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-accordion\",\n  styleUrl: \"kul-accordion.scss\",\n  shadow: true,\n})\nexport class KulAccordion {\n  /**\n   * References the root HTML element of the component (<kul-accordion>).\n   */\n  @Element() rootElement: HTMLKulAccordionElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * Set of expanded nodes.\n   */\n  @State() expandedNodes: Set<KulDataNode> = new Set();\n  /**\n   * Selected nodes.\n   */\n  @State() selectedNodes: Set<KulDataNode> = new Set();\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Actual data of the accordion.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulData: KulDataDataset = null;\n  /**\n   * When set to true, the pointerdown event will trigger a ripple effect.\n   * @default true\n   */\n  @Prop({ mutable: true, reflect: true }) kulRipple = true;\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n  #rippleSurface: { [id: string]: HTMLElement } = {};\n  #slotsNames: string[] = [];\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-accordion-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulAccordionEventPayload>;\n\n  onKulEvent(\n    e: Event | CustomEvent,\n    eventType: KulAccordionEvent,\n    node?: KulDataNode,\n  ) {\n    switch (eventType) {\n      case \"pointerdown\":\n        if (this.kulRipple) {\n          this.#kulManager.theme.ripple.trigger(\n            e as PointerEvent,\n            this.#rippleSurface[node.id],\n          );\n        }\n        break;\n    }\n\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's properties and descriptions.\n   * @param {boolean} descriptions - When true, includes descriptions for each property.\n   * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulAccordionProps, descriptions);\n  }\n  /**\n   * Returns the selected nodes.\n   * @returns {Promise<KulDataNode[]>} Selected nodes.\n   */\n  @Method()\n  async getSelectedNodes(): Promise<Set<KulDataNode>> {\n    return this.selectedNodes;\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * This method activates or deactivates an node.\n   * @param {string} id - Id of the node.\n   */\n  @Method()\n  async toggleNode(id: string, e?: Event) {\n    const node = this.kulData.nodes.find((n) => n.id === id);\n    if (!node) {\n      return;\n    }\n    if (this.#isExpandible(node)) {\n      if (this.#isExpanded(node)) {\n        this.expandedNodes.delete(node);\n      } else {\n        this.expandedNodes.add(node);\n      }\n    } else if (this.#isSelected(node)) {\n      this.selectedNodes.delete(node);\n    } else {\n      this.selectedNodes.add(node);\n    }\n\n    if (!this.#isExpandible(node)) {\n      this.onKulEvent(e || new CustomEvent(\"click\"), \"click\");\n    }\n    this.refresh();\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #isExpanded(node: KulDataNode): boolean {\n    return this.expandedNodes.has(node);\n  }\n\n  #isExpandible(node: KulDataNode): boolean {\n    return this.#slotsNames.includes(node.id);\n  }\n\n  #isSelected(node: KulDataNode): boolean {\n    return this.selectedNodes.has(node);\n  }\n\n  #prepIcon(icon: string) {\n    const path = getAssetPath(`./assets/svg/${icon}.svg`);\n    const style = {\n      mask: `url('${path}') no-repeat center`,\n      webkitMask: `url('${path}') no-repeat center`,\n    };\n    return <div class={\"node__icon\"} style={style}></div>;\n  }\n\n  #prepAccordion(): VNode[] {\n    const nodes: VNode[] = [];\n    const slots: Array<HTMLElement> = Array.prototype.slice.call(\n      this.rootElement.children,\n      0,\n    );\n    this.#slotsNames = [];\n    for (let index = 0; index < slots.length; index++) {\n      const slot = slots[index];\n      this.#slotsNames.push(slot.slot);\n    }\n\n    for (let i = 0; i < this.kulData.nodes.length; i++) {\n      const node = this.kulData.nodes[i];\n      const isExpanded = this.#isExpanded(node);\n      const isExpandible = this.#isExpandible(node);\n      const isSelected = this.#isSelected(node);\n      const headerClassName = {\n        node__header: true,\n        \"node__header--selected\": !isExpandible && isSelected ? true : false,\n        \"node__header--expanded\": isExpandible && isExpanded ? true : false,\n      };\n      const contentClassname: { [className: string]: boolean } = {\n        node__content: true,\n        \"node__content--selected\": isSelected ? true : false,\n      };\n      nodes.push(\n        <div class=\"node\">\n          <div\n            tabindex=\"1\"\n            title={node.description}\n            class={headerClassName}\n            data-cy={isExpandible ? undefined : KulDataCyAttributes.BUTTON}\n            onClick={(e) => this.toggleNode(node.id, e)}\n            onPointerDown={(e) => {\n              this.onKulEvent(e, \"pointerdown\", node);\n            }}\n          >\n            <div\n              ref={(el) => {\n                if (el && this.kulRipple) {\n                  this.#rippleSurface[node.id] = el;\n                }\n              }}\n            ></div>\n            {node.icon ? this.#prepIcon(node.icon) : null}\n            <span class=\"node__text\">{node.value}</span>\n            {isExpandible ? (\n              <div\n                class={`node__expand ${\n                  isExpanded ? \"node__expand--expanded\" : \"\"\n                } `}\n              ></div>\n            ) : null}\n          </div>\n          {isExpanded ? (\n            <div class={contentClassname}>\n              <slot name={node.id}></slot>\n            </div>\n          ) : null}\n        </div>,\n      );\n    }\n    return nodes;\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    if (Object.keys(this.#rippleSurface).length) {\n      for (const key in this.#rippleSurface) {\n        if (Object.prototype.hasOwnProperty.call(this.#rippleSurface, key)) {\n          const surface = this.#rippleSurface[key];\n          this.#kulManager.theme.ripple.setup(surface);\n        }\n      }\n    }\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    this.#rippleSurface = {};\n\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class=\"accordion\">{this.#prepAccordion()}</div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}