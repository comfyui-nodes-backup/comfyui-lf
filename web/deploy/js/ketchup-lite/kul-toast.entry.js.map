{"file":"kul-toast.entry.js","mappings":"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","names":[],"sources":["src/components/kul-toast/kul-toast-declarations.ts","src/components/kul-toast/kul-toast.scss?tag=kul-toast&encapsulation=shadow","src/components/kul-toast/kul-toast.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\nimport { KulImagePropsInterface } from \"../kul-image/kul-image-declarations\";\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulToastEvent = \"ready\" | \"unmount\";\nexport interface KulToastEventPayload\n  extends KulEventPayload<\"KulToast\", KulToastEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulToastProps {\n  kulCloseCallback = \"Callback invoked when the toast is closed.\",\n  kulCloseIcon = \"Sets the props of the clickable icon used to close the toast.\",\n  kulIcon = \"Sets the props of an optional icon that will be displayed along with the message.\",\n  kulMessage = \"Sets the message of the toast.\",\n  kulStyle = \"Enables customization of the component's style.\",\n  kulTimer = \"When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).\",\n}\nexport interface KulToastPropsInterface {\n  kulCloseCallback?: () => void;\n  kulCloseIcon?: KulImagePropsInterface;\n  kulIcon?: KulImagePropsInterface;\n  kulMessage?: string;\n  kulStyle?: string;\n  kulTimer?: number;\n}\n","@import \"./styles/kul-toast-main.scss\";\n@import \"./styles/kul-toast-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulToastEvent,\n  KulToastEventPayload,\n  KulToastProps,\n} from \"./kul-toast-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { GenericObject } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\nimport { KulImagePropsInterface } from \"../kul-image/kul-image-declarations\";\n\n@Component({\n  tag: \"kul-toast\",\n  styleUrl: \"kul-toast.scss\",\n  shadow: true,\n})\nexport class KulToast {\n  /**\n   * References the root HTML element of the component (<kul-toast>).\n   */\n  @Element() rootElement: HTMLKulToastElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Sets the props of the clickable icon used to close the toast.\n   * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }\n   */\n  @Prop({ mutable: true })\n  kulCloseIcon: KulImagePropsInterface = {\n    kulSizeX: \"18px\",\n    kulSizeY: \"18px\",\n    kulValue: \"clear\",\n  };\n  /**\n   * Callback invoked when the toast is closed.\n   * @default () => void\n   */\n  @Prop() kulCloseCallback: () => void = () => {\n    this.rootElement.remove();\n  };\n  /**\n   *  Sets the props of an optional icon that will be displayed along with the message.\n   * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }\n   */\n  @Prop({ mutable: true, reflect: true }) kulIcon: KulImagePropsInterface = {\n    kulSizeX: \"18px\",\n    kulSizeY: \"18px\",\n    kulValue: \"info\",\n  };\n  /**\n   * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).\n   * @default ''\n   */\n  @Prop() kulTimer: number = null;\n  /**\n   * Sets the message of the toast.\n   * @default 'Wow, such empty.'\n   */\n  @Prop({ mutable: true, reflect: true }) kulMessage = \"Wow, such empty.\";\n  /**\n   * Enables customization of the component's style.\n   * @default \"\" - No custom style applied by default.\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-toast-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulToastEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulToastEvent) {\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Retrieves the debug information reflecting the current state of the component.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves to a KulDebugLifecycleInfo object containing debug information.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Retrieves the properties of the component, with optional descriptions.\n   * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n   * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulToastProps, descriptions);\n  }\n  /**\n   * Triggers a re-render of the component to reflect any state changes.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    if (this.kulTimer) {\n      setTimeout(() => {}, this.kulTimer);\n    }\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class=\"toast\">\n            <div\n              class={`toast__accent ${\n                this.kulTimer ? \"toast__accent--temporary\" : \"\"\n              }`}\n            ></div>\n            <div class=\"toast__message-wrapper\">\n              {this.kulIcon ? (\n                <div class=\"toast__icon\">\n                  <kul-image {...this.kulIcon}></kul-image>\n                </div>\n              ) : undefined}\n              {this.kulMessage ? (\n                <div class=\"toast__message\">{this.kulMessage}</div>\n              ) : undefined}\n              {this.kulCloseIcon ? (\n                <div\n                  class=\"toast__icon toast__icon--close\"\n                  onClick={() => this.kulCloseCallback()}\n                >\n                  <kul-image {...this.kulCloseIcon}></kul-image>\n                </div>\n              ) : undefined}\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}