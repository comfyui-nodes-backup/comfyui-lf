{"file":"kul-toast.entry.js","mappings":"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","names":[],"sources":["src/components/kul-toast/kul-toast-declarations.ts","src/components/kul-toast/kul-toast.scss?tag=kul-toast&encapsulation=shadow","src/components/kul-toast/kul-toast.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\nimport { KulToast } from './kul-toast';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulToastEvent = 'ready' | 'unmount';\nexport interface KulToastEventPayload\n    extends KulEventPayload<KulToast, KulToastEvent, Event | CustomEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulToastProps {\n    kulCloseCallback = 'Callback invoked when the toast is closed.',\n    kulCloseIcon = 'Sets the props of the clickable icon used to close the toast.',\n    kulIcon = 'Sets the props of an optional icon that will be displayed along with the message.',\n    kulMessage = 'Sets the message of the toast.',\n    kulStyle = \"Enables customization of the component's style.\",\n    kulTimer = 'When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).',\n}\nexport interface KulToastPropsInterface {\n    kulCloseCallback?: () => void;\n    kulCloseIcon?: KulImagePropsInterface;\n    kulIcon?: KulImagePropsInterface;\n    kulMessage?: string;\n    kulStyle?: string;\n    kulTimer?: number;\n}\n","@import './styles/kul-toast-main.scss';\n@import './styles/kul-toast-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulToastEvent,\n    KulToastEventPayload,\n    KulToastProps,\n} from './kul-toast-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { GenericObject, KulEventPayload } from '../../types/GenericTypes';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\nimport { KulToastCustomEvent } from '../../components';\n\n@Component({\n    tag: 'kul-toast',\n    styleUrl: 'kul-toast.scss',\n    shadow: true,\n})\nexport class KulToast {\n    /**\n     * References the root HTML element of the component (<kul-toast>).\n     */\n    @Element() rootElement: HTMLKulToastElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Sets the props of the clickable icon used to close the toast.\n     * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }\n     */\n    @Prop({ mutable: true })\n    kulCloseIcon: KulImagePropsInterface = {\n        kulSizeX: '18px',\n        kulSizeY: '18px',\n        kulValue: 'clear',\n    };\n    /**\n     * Callback invoked when the toast is closed.\n     * @default () => void\n     */\n    @Prop() kulCloseCallback: () => void = () => {\n        const e = new CustomEvent('unmount');\n        this.onKulEvent(e, 'unmount');\n        this.kulEvent.emit({\n            comp: this,\n            eventType: 'unmount',\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n        this.rootElement.remove();\n    };\n    /**\n     *  Sets the props of an optional icon that will be displayed along with the message.\n     * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }\n     */\n    @Prop({ mutable: true, reflect: true }) kulIcon: KulImagePropsInterface = {\n        kulSizeX: '18px',\n        kulSizeY: '18px',\n        kulValue: 'info',\n    };\n    /**\n     * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).\n     * @default ''\n     */\n    @Prop() kulTimer: number = null;\n    /**\n     * Sets the message of the toast.\n     * @default 'Wow, such empty.'\n     */\n    @Prop({ mutable: true, reflect: true }) kulMessage = 'Wow, such empty.';\n    /**\n     * Enables customization of the component's style.\n     * @default \"\" - No custom style applied by default.\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-toast-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulToastEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulToastEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Retrieves the debug information reflecting the current state of the component.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves to a KulDebugComponentInfo object containing debug information.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Retrieves the properties of the component, with optional descriptions.\n     * @param {boolean} descriptions - If true, returns properties with descriptions; otherwise, returns properties only.\n     * @returns {Promise<GenericObject>} A promise that resolves to an object where each key is a property name, optionally with its description.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulToastProps, descriptions);\n    }\n    /**\n     * Triggers a re-render of the component to reflect any state changes.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        if (this.kulTimer) {\n            setTimeout(() => {}, this.kulTimer);\n        }\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div class=\"toast\">\n                        <div\n                            class={`toast__accent ${\n                                this.kulTimer ? 'toast__accent--temporary' : ''\n                            }`}\n                        ></div>\n                        <div class=\"toast__message-wrapper\">\n                            {this.kulIcon ? (\n                                <div class=\"toast__icon\">\n                                    <kul-image {...this.kulIcon}></kul-image>\n                                </div>\n                            ) : undefined}\n                            {this.kulMessage ? (\n                                <div class=\"toast__message\">\n                                    {this.kulMessage}\n                                </div>\n                            ) : undefined}\n                            {this.kulCloseIcon ? (\n                                <div\n                                    class=\"toast__icon toast__icon--close\"\n                                    onClick={() => this.kulCloseCallback()}\n                                >\n                                    <kul-image\n                                        {...this.kulCloseIcon}\n                                    ></kul-image>\n                                </div>\n                            ) : undefined}\n                        </div>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}