{"file":"kul-switch.entry.js","mappings":"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","names":[],"sources":["src/components/kul-switch/kul-switch-declarations.ts","src/components/kul-switch/kul-switch.scss?tag=kul-switch&encapsulation=shadow","src/components/kul-switch/kul-switch.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\n\nexport type KulSwitchEvent =\n    | 'blur'\n    | 'change'\n    | 'focus'\n    | 'pointerdown'\n    | 'ready';\n\nexport interface KulSwitchEventPayload extends KulEventPayload {\n    value: string;\n}\n\nexport enum KulSwitchProps {\n    kulDisabled = 'When true, the component is disabled.',\n    kulLabel = 'Defines text to display along with the switch.',\n    kulLeadingLabel = ' Defaults at false. When set to true, the label will be displayed before the component',\n    kulRipple = 'When set to true, the pointerdown event will trigger a ripple effect.',\n    kulStyle = 'Sets a custom CSS style for the component.',\n    kulValue = 'If true, the button is marked as checked.',\n}\n\nexport interface KulSwitchPropsInterface {\n    kulDisabled?: boolean;\n    kulLabel?: string;\n    kulLeadingLabel?: boolean;\n    kulRipple?: boolean;\n    kulStyle?: string;\n    kulValue?: boolean;\n}\n\nexport type KulSwitchState = 'off' | 'on';\n","@import './styles/kul-switch-main.scss';\n@import './styles/kul-switch-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulDataCyAttributes,\n    type GenericObject,\n} from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulSwitchEvent,\n    KulSwitchEventPayload,\n    KulSwitchProps,\n    KulSwitchState,\n} from './kul-switch-declarations';\n\n@Component({\n    tag: 'kul-switch',\n    styleUrl: 'kul-switch.scss',\n    shadow: true,\n})\nexport class KulSwitch {\n    /**\n     * References the root HTML element of the component (<kul-switch>).\n     */\n    @Element() rootElement: HTMLKulSwitchElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The value of the component (\"on\" or \"off\").\n     * @default \"\"\n     *\n     * @see KulSwitchState - For a list of possible states.\n     */\n    @State() value: KulSwitchState = 'off';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Defaults at false. When set to true, the component is disabled.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n    /**\n     * Defines text to display along with the switch.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulLabel = '';\n    /**\n     * Defaults at false. When set to true, the label will be displayed before the component.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulLeadingLabel = false;\n    /**\n     * When set to true, the pointerdown event will trigger a ripple effect.\n     * @default true\n     */\n    @Prop({ mutable: true, reflect: true }) kulRipple = true;\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Sets the initial boolean state of the switch.\n     * @default false\n     */\n    @Prop({ mutable: false }) kulValue = false;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n    #rippleSurface: HTMLElement;\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted for various switch interactions like click, focus, blur.\n     */\n    @Event({\n        eventName: 'kul-switch-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulSwitchEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulSwitchEvent) {\n        switch (eventType) {\n            case 'pointerdown':\n                if (this.kulRipple) {\n                    this.#kulManager.theme.ripple.trigger(\n                        e as PointerEvent,\n                        this.#rippleSurface\n                    );\n                }\n                break;\n        }\n\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            value: this.value,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's properties and descriptions.\n     * @param {boolean} descriptions - When true, includes descriptions for each property.\n     * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulSwitchProps, descriptions);\n    }\n    /**\n     * Used to retrieve the component's current state.\n     * @returns {Promise<KulSwitchState>} Promise resolved with the current state of the component.\n     */\n    @Method()\n    async getValue(): Promise<KulSwitchState> {\n        return this.value;\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Sets the component's state.\n     * @param {KulSwitchState} value - The new state to be set on the component.\n     * @returns {Promise<void>}\n     */\n    @Method()\n    async setValue(value: KulSwitchState): Promise<void> {\n        this.#updateState(value);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #isOn() {\n        return this.value === 'on' ? true : false;\n    }\n\n    #updateState(\n        value: KulSwitchState,\n        e: CustomEvent<unknown> | Event = new CustomEvent('change')\n    ) {\n        if (!this.kulDisabled && (value === 'off' || value === 'on')) {\n            this.value = value;\n            this.onKulEvent(e, 'change');\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        if (this.kulValue) {\n            this.value = 'on';\n        }\n\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        if (this.#rippleSurface) {\n            this.#kulManager.theme.ripple.setup(this.#rippleSurface);\n        }\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const className: Record<string, boolean> = {\n            switch: true,\n            'switch--checked': this.#isOn(),\n            'switch--disabled': this.kulDisabled,\n        };\n        const formClassName: Record<string, boolean> = {\n            'form-field': true,\n            'form-field--align-end': this.kulLeadingLabel,\n        };\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div class={formClassName}>\n                        <div class={className}>\n                            <div class=\"switch__track\"></div>\n                            <div class=\"switch__thumb-underlay\">\n                                <div class=\"switch__thumb\">\n                                    <div\n                                        ref={(el) => {\n                                            if (this.kulRipple) {\n                                                this.#rippleSurface = el;\n                                            }\n                                        }}\n                                    ></div>\n                                    <input\n                                        class=\"switch__native-control\"\n                                        checked={this.#isOn()}\n                                        data-cy={KulDataCyAttributes.INPUT}\n                                        disabled={this.kulDisabled}\n                                        onBlur={(e) => {\n                                            this.onKulEvent(e, 'blur');\n                                        }}\n                                        onChange={(e) => {\n                                            this.#updateState(\n                                                this.#isOn() ? 'off' : 'on',\n                                                e\n                                            );\n                                        }}\n                                        onFocus={(e) => {\n                                            this.onKulEvent(e, 'focus');\n                                        }}\n                                        onPointerDown={(e) => {\n                                            this.onKulEvent(e, 'pointerdown');\n                                        }}\n                                        role=\"switch\"\n                                        type=\"checkbox\"\n                                        value={this.value ? 'on' : 'off'}\n                                    ></input>\n                                </div>\n                            </div>\n                        </div>\n                        <label\n                            class=\"switch__label\"\n                            onClick={(e) => {\n                                this.onKulEvent(e, 'change');\n                            }}\n                        >\n                            {this.kulLabel}\n                        </label>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}