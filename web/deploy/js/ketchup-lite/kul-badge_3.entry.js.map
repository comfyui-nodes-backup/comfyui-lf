{"file":"kul-badge.kul-image.kul-spinner.entry.js","mappings":"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","names":[],"sources":["src/components/kul-badge/kul-badge-declarations.ts","src/components/kul-badge/kul-badge.scss?tag=kul-badge&encapsulation=shadow","src/components/kul-badge/kul-badge.tsx","src/components/kul-image/kul-image-declarations.ts","src/components/kul-image/kul-image.scss?tag=kul-image&encapsulation=shadow","src/components/kul-image/kul-image.tsx","src/components/kul-spinner/kul-spinner-declarations.ts","src/components/kul-spinner/kul-spinner.scss?tag=kul-spinner&encapsulation=shadow","src/components/kul-spinner/kul-spinner.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulBadgeEvent = 'click' | 'ready' | 'unmount';\nexport interface KulBadgeEventPayload\n    extends KulEventPayload<'KulBadge', KulBadgeEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulBadgeProps {\n    kulImageProps = 'The props of the image displayed inside the badge.',\n    kulLabel = 'The text displayed inside the badge.',\n    kulStyle = 'Custom style of the component.',\n}\nexport interface KulBadgePropsInterface {\n    kulImageProps?: KulImagePropsInterface;\n    kulLabel?: string;\n    kulStyle?: string;\n}\n","@import './styles/kul-badge-main.scss';\n@import './styles/kul-badge-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulBadgeEvent,\n    KulBadgeEventPayload,\n    KulBadgeProps,\n} from './kul-badge-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KulThemeColorValues } from '../../managers/kul-theme/kul-theme-declarations';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { GenericObject } from '../../types/GenericTypes';\n\n@Component({\n    tag: 'kul-badge',\n    styleUrl: 'kul-badge.scss',\n    shadow: true,\n})\nexport class KulBadge {\n    /**\n     * References the root HTML element of the component (<kul-badge>).\n     */\n    @Element() rootElement: HTMLKulBadgeElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * The props of the image displayed inside the badge.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulImageProps: KulImagePropsInterface = null;\n    /**\n     * The text displayed inside the badge.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: false }) kulLabel = '';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-badge-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulBadgeEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulBadgeEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulBadgeProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        let imageEl: HTMLElement = null;\n        if (!this.kulLabel && this.kulImageProps) {\n            if (!this.kulImageProps.kulColor) {\n                this.kulImageProps.kulColor = `var(${KulThemeColorValues.TEXT_ON_PRIMARY})`;\n            }\n            imageEl = <kul-image {...this.kulImageProps}></kul-image>;\n        }\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div\n                    id={KUL_WRAPPER_ID}\n                    onClick={(e) => this.onKulEvent(e, 'click')}\n                >\n                    {this.kulLabel}\n                    {imageEl}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n","import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulBadgePropsInterface } from '../kul-badge/kul-badge-declarations';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulImageEvent = 'click' | 'load' | 'ready' | 'unmount';\nexport interface KulImageEventPayload\n    extends KulEventPayload<'KulImage', KulImageEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulImageProps {\n    kulBadgeProps = 'Sets the props to show a badge.',\n    kulColor = 'The color of the icon, defaults to the CSS variable --kul-icon-color.',\n    kulShowSpinner = 'When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.',\n    kulSizeX = 'The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).',\n    kulSizeY = 'The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).',\n    kulStyle = 'Custom style of the component.',\n    kulValue = 'Defines the source URL of the image. This property is used to set the image resource that the component should display.',\n}\nexport interface KulImagePropsInterface {\n    kulBadgeProps?: KulBadgePropsInterface;\n    kulColor?: string;\n    kulShowSpinner?: boolean;\n    kulSizeX?: string;\n    kulSizeY?: string;\n    kulStyle?: string;\n    kulValue?: string;\n}\n","@import './styles/kul-image-main.scss';\n@import './styles/kul-image-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    getAssetPath,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport type { GenericMap, GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulImageEvent,\n    KulImageEventPayload,\n    KulImageProps,\n} from './kul-image-declarations';\nimport { KulThemeColorValues } from '../../managers/kul-theme/kul-theme-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport {\n    CSS_VAR_PREFIX,\n    KUL_STYLE_ID,\n    KUL_WRAPPER_ID,\n} from '../../variables/GenericVariables';\nimport { KulBadgePropsInterface } from '../kul-badge/kul-badge-declarations';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\n\n@Component({\n    tag: 'kul-image',\n    assetsDirs: ['assets/svg'],\n    styleUrl: 'kul-image.scss',\n    shadow: true,\n})\nexport class KulImage {\n    /**\n     * References the root HTML element of the component (<kul-image>).\n     */\n    @Element() rootElement: HTMLKulImageElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * This property is used to attach a badge to the component.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulBadgeProps: KulBadgePropsInterface = null;\n    /**\n     * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.\n     * @default KulThemeColorValues.ICON\n     *\n     * @see KulThemeColorValues - For a list of available CSS variable names for color.\n     */\n    @Prop({ mutable: true, reflect: true })\n    kulColor = `var(${KulThemeColorValues.ICON})`;\n    /**\n     * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulShowSpinner = false;\n    /**\n     * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.\n     * @default '100%'\n     */\n    @Prop({ mutable: true, reflect: true }) kulSizeX = '100%';\n    /**\n     * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.\n     * @default '100%'\n     */\n    @Prop({ mutable: true, reflect: true }) kulSizeY = '100%';\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Defines the source URL of the image. This property is used to set the image resource that the component should display.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulValue = '';\n\n    /*-------------------------------------------------*/\n    /*        I n t e r n a l   V a r i a b l e s      */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-image-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulImageEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulImageEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulImageProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    createIcon(): VNode {\n        const classObj: GenericObject<boolean> = {\n            image__icon: true,\n        };\n        const style: GenericMap = {\n            background: this.kulColor\n                ? this.kulColor\n                : `var(${KulThemeColorValues.ICON})`,\n        };\n        if (this.kulValue.indexOf(CSS_VAR_PREFIX) > -1) {\n            const themeIcon = this.kulValue.replace('--', '');\n            classObj['kul-icon'] = true;\n            classObj[themeIcon] = true;\n            const icon =\n                this.#kulManager.theme.list[this.#kulManager.theme.name].icons[\n                    this.kulValue\n                ];\n            const path = getAssetPath(`./assets/svg/${icon}.svg`);\n            style.mask = `url('${path}') no-repeat center`;\n            style.webkitMask = `url('${path}') no-repeat center`;\n        } else {\n            const path = getAssetPath(`./assets/svg/${this.kulValue}.svg`);\n            style.mask = `url('${path}') no-repeat center`;\n            style.webkitMask = `url('${path}') no-repeat center`;\n        }\n\n        return <div class={classObj} style={style}></div>;\n    }\n\n    createImage(): VNode {\n        return (\n            <img\n                onLoad={(e) => {\n                    this.onKulEvent(e, 'load');\n                }}\n                src={this.kulValue}\n            ></img>\n        );\n    }\n\n    isResourceUrl(): boolean {\n        return !!(\n            this.kulValue &&\n            (this.kulValue.indexOf('.') > -1 ||\n                this.kulValue.indexOf('/') > -1 ||\n                this.kulValue.indexOf('\\\\') > -1)\n        );\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        if (!this.kulValue) {\n            this.#kulManager.debug.logs.new(this, 'Empty image.');\n            return;\n        }\n\n        let el: VNode;\n        let feedback: HTMLElement;\n        const isUrl = this.isResourceUrl();\n        let spinnerLayout: number;\n        let style: {\n            '--kul_image_height': string;\n            '--kul_image_width': string;\n        };\n\n        if (isUrl) {\n            style = {\n                '--kul_image_height': this.kulSizeY ? this.kulSizeY : 'auto',\n                '--kul_image_width': this.kulSizeX ? this.kulSizeX : '100%',\n            };\n            el = this.createImage();\n        } else {\n            style = {\n                '--kul_image_height': this.kulSizeY ? this.kulSizeY : '100%',\n                '--kul_image_width': this.kulSizeX ? this.kulSizeX : '100%',\n            };\n            el = this.createIcon();\n        }\n\n        if (this.kulShowSpinner && isUrl) {\n            spinnerLayout = 14;\n            feedback = (\n                <div class=\"spinner\" title=\"Image not loaded yet...\">\n                    <kul-spinner\n                        kulActive={true}\n                        kulDimensions=\"3px\"\n                        kulLayout={spinnerLayout}\n                    ></kul-spinner>\n                </div>\n            );\n        }\n\n        return (\n            <Host style={style}>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                {feedback}\n                <div id={KUL_WRAPPER_ID}>\n                    <div\n                        class=\"image\"\n                        onClick={(e) => {\n                            this.onKulEvent(e, 'click');\n                        }}\n                    >\n                        {el}\n                        {this.kulBadgeProps ? (\n                            <kul-badge {...this.kulBadgeProps}></kul-badge>\n                        ) : undefined}\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n","import { KulEventPayload } from '../../types/GenericTypes';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulSpinnerEvent = 'ready' | 'unmount';\nexport interface KulSpinnerEventPayload\n    extends KulEventPayload<'KulSpinner', KulSpinnerEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulSpinnerProps {\n    kulActive = 'Specifies if the spinner is animating.',\n    kulBarVariant = 'Controls if the component displays as a bar or a spinner.',\n    kulDimensions = 'Defines the width and height of the spinner. In the bar variant, it specifies only the height.',\n    kulFader = 'Applies a blending modal over the component to darken or lighten the view, based on the theme.',\n    kulFaderTimeout = 'Duration needed for the fader to become active.',\n    kulFullScreen = 'Fills the entire viewport when enabled.',\n    kulLayout = 'Selects the spinner layout.',\n    kulStyle = 'Sets a custom style for the component.',\n}\nexport interface KulSpinnerPropsInterface {\n    kulActive: boolean;\n    kulBarVariant: boolean;\n    kulDimensions: string;\n    kulFader: boolean;\n    kulFaderTimeout: number;\n    kulFullScreen: boolean;\n    kulLayout: number;\n    kulStyle: string;\n}\n","@import 'styles/kul-spinner-main.scss';\n@import 'styles/kul-spinner-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport { GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulSpinnerEvent,\n    KulSpinnerEventPayload,\n    KulSpinnerProps,\n} from './kul-spinner-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KulDebugLifecycleInfo } from '../../components';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\n\n@Component({\n    tag: 'kul-spinner',\n    styleUrl: 'kul-spinner.scss',\n    shadow: true,\n})\nexport class KulSpinner {\n    /**\n     * References the root HTML element of the component (<kul-spinner>).\n     */\n    @Element() rootElement: HTMLKulSpinnerElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Specifies if the spinner is animating.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulActive = false;\n    /**\n     * Controls if the component displays as a bar or a spinner.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulBarVariant = false;\n    /**\n     * Defines the width and height of the spinner. In the bar variant, it specifies only the height.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulDimensions = '';\n    /**\n     * Applies a blending modal over the component to darken or lighten the view, based on the theme.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulFader = false;\n    /**\n     * Duration needed for the fader to become active.\n     * @default 3500\n     */\n    @Prop({ mutable: true, reflect: true }) kulFaderTimeout = 3500;\n    /**\n     * Fills the entire viewport when enabled.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulFullScreen = false;\n    /**\n     * Selects the spinner layout.\n     * @default 1\n     */\n    @Prop({ mutable: true, reflect: true }) kulLayout = 1;\n    /**\n     * Sets a custom style for the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    @Event({\n        eventName: 'kul-spinner-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulSpinnerEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulSpinnerEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulSpinnerProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidUpdate() {\n        const root = this.rootElement.shadowRoot;\n        if (root) {\n            root.querySelector('#loading-wrapper-master').classList.remove(\n                'loading-wrapper-big-wait'\n            );\n        }\n    }\n\n    componentDidRender() {\n        const root = this.rootElement.shadowRoot;\n\n        if (root) {\n            if (this.kulFader) {\n                setTimeout(function () {\n                    root.querySelector('#loading-wrapper-master').classList.add(\n                        'loading-wrapper-big-wait'\n                    );\n                }, this.kulFaderTimeout);\n            }\n        }\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        let masterClass = '';\n        let wrapperClass = '';\n        let spinnerClass = '';\n        let spinnerEl: VNode[] = [];\n        let elStyle = undefined;\n\n        if (this.kulBarVariant) {\n            wrapperClass = 'loading-wrapper-master-bar';\n            spinnerClass = 'spinner-bar-v' + this.kulLayout;\n        } else {\n            masterClass += ' spinner-version';\n            wrapperClass = 'loading-wrapper-master-spinner';\n            spinnerClass = 'spinner-v' + this.kulLayout;\n            if (this.kulLayout === 7) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                    <div class=\"sk-spinner-v7-dot\"></div>,\n                ];\n            }\n            if (this.kulLayout === 9) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v9-bounce1\"></div>,\n                    <div class=\"sk-spinner-v9-bounce2\"></div>,\n                ];\n            }\n            if (this.kulLayout === 10) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v10-cube1\"></div>,\n                    <div class=\"sk-spinner-v10-cube2\"></div>,\n                ];\n            }\n            if (this.kulLayout === 12) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v12-dot1\"></div>,\n                    <div class=\"sk-spinner-v12-dot2\"></div>,\n                ];\n            }\n            if (this.kulLayout === 13) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube1\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube2\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube3\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube4\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube5\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube6\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube7\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube8\"></div>,\n                    <div class=\"sk-spinner-v13-cube sk-spinner-v13-cube9\"></div>,\n                ];\n            }\n            if (this.kulLayout === 14) {\n                spinnerEl = [\n                    <div class=\"sk-spinner-v14-circle1 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle2 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle3 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle4 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle5 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle6 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle7 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle8 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle9 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle10 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle11 sk-spinner-v14-circle\"></div>,\n                    <div class=\"sk-spinner-v14-circle12 sk-spinner-v14-circle\"></div>,\n                ];\n            }\n        }\n\n        if (!this.kulFullScreen) {\n            elStyle = {\n                height: '100%',\n                width: '100%',\n            };\n        }\n\n        if (this.kulDimensions) {\n            elStyle = {\n                ...elStyle,\n                fontSize: this.kulDimensions,\n            };\n        } else if (!this.kulBarVariant) {\n            elStyle = {\n                ...elStyle,\n                fontSize: '16px',\n            };\n        } else {\n            elStyle = {\n                ...elStyle,\n                fontSize: '3px',\n            };\n        }\n\n        return (\n            <Host style={elStyle}>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID} style={elStyle}>\n                    <div\n                        id=\"loading-wrapper-master\"\n                        class={masterClass}\n                        style={elStyle}\n                    >\n                        <div id={wrapperClass} style={elStyle}>\n                            <div class={spinnerClass}>{spinnerEl}</div>\n                        </div>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}