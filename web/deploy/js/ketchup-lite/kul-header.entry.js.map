{"file":"kul-header.entry.js","mappings":";;;AASA;AACA;AACA;AACA,IAAY,cAEX;AAFD,WAAY,cAAc;IACtB,6DAA2C,CAAA;AAC/C,CAAC,EAFW,cAAc,KAAd,cAAc;;ACZ1B,MAAM,YAAY,GAAG,+xDAA+xD,CAAC;AACrzD,wBAAe,YAAY;;MC2Bd,SAAS;;;;yBAa0B;YACxC,OAAO,EAAE,CAAC;YACV,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,WAAW,CAAC,GAAG,EAAE;SAC/B;wBAS0B,EAAE;;;;;;IAM7B,WAAW,GAAG,kBAAkB,EAAE,CAAC;;;;;;;IAenC,QAAQ,CAAsC;IAE9C,UAAU,CAAC,CAAsB,EAAE,SAAyB;QACxD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,IAAI;YACV,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YACvB,aAAa,EAAE,CAAC;YAChB,SAAS;SACZ,CAAC,CAAC;KACN;;;;;;;;IAWD,MAAM,YAAY;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;;;;;;IAOD,MAAM,QAAQ,CAAC,YAAsB;QACjC,OAAO,QAAQ,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;KACvD;;;;IAKD,MAAM,OAAO;QACT,WAAW,CAAC,IAAI,CAAC,CAAC;KACrB;;;;IAMD,iBAAiB;QACb,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACzC;IAED,gBAAgB;QACZ,IAAI,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC5D;IAED,mBAAmB;QACf,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KAC/D;IAED,kBAAkB;QACd,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;KAC9D;IAED,MAAM;QACF,QACI,EAAC,IAAI,qDAAC,KAAK,EAAC,QAAQ,IACf,IAAI,CAAC,QAAQ,IACV,aAAO,EAAE,EAAE,YAAY,IAClB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CACrC,IACR,SAAS,EACb,4DAAK,EAAE,EAAE,cAAc,IACnB,+DAAQ,KAAK,EAAC,QAAQ,IAClB,gEAAS,KAAK,EAAC,iBAAiB,IAC5B,6DAAM,IAAI,EAAC,SAAS,GAAQ,CACtB,CACL,CACP,CACH,EACT;KACL;IAED,oBAAoB;QAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAC3C;;;;;;","names":[],"sources":["src/components/kul-header/kul-header-declarations.ts","src/components/kul-header/kul-header.scss?tag=kul-header&encapsulation=shadow","src/components/kul-header/kul-header.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulHeader } from './kul-header';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulHeaderEvent = 'ready';\nexport interface KulHeaderEventPayload\n    extends KulEventPayload<KulHeader, KulHeaderEvent, Event | CustomEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulHeaderProps {\n    kulStyle = 'Custom style of the component.',\n}\nexport interface KulHeaderPropsInterface {\n    kulStyle?: string;\n}\n","@import './styles/kul-header-main.scss';\n@import './styles/kul-header-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulHeaderProps,\n    KulHeaderEvent,\n    KulHeaderEventPayload,\n} from './kul-header-declarations';\nimport type { GenericObject, KulEventPayload } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { KulDebugComponentInfo } from '../../components';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\n\n@Component({\n    tag: 'kul-header',\n    styleUrl: 'kul-header.scss',\n    shadow: true,\n})\nexport class KulHeader {\n    /**\n     * References the root HTML element of the component (<kul-header>).\n     */\n    @Element() rootElement: HTMLKulHeaderElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.\n     * @default \"\"\n     */\n    @Prop() kulStyle: string = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-header-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulHeaderEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulHeaderEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulHeaderProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        return (\n            <Host class=\"header\">\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <header class=\"header\">\n                        <section class=\"header__section\">\n                            <slot name=\"content\"></slot>\n                        </section>\n                    </header>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}