{"file":"kul-compare.entry.js","mappings":"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","names":[],"sources":["src/components/kul-compare/helpers/kul-compare-defaults.ts","src/components/kul-compare/kul-compare-declarations.ts","src/components/kul-compare/kul-compare.scss?tag=kul-compare&encapsulation=shadow","src/components/kul-compare/kul-compare.tsx"],"sourcesContent":["import { KulDataShapeDefaults } from \"../../../managers/kul-data/kul-data-declarations\";\n\nexport const DEFAULTS: (isOverlay: boolean) => {\n  left: KulDataShapeDefaults;\n  right: KulDataShapeDefaults;\n} = (_isOverlay) => {\n  return {\n    left: {\n      image: () => [\n        {\n          htmlProps: { className: \"kul-fit\" },\n          kulSizeX: \"100%\",\n          kulSizeY: \"100%\",\n        },\n      ],\n    },\n    right: {\n      image: () => [\n        {\n          htmlProps: { className: \"kul-fit\" },\n          kulSizeX: \"100%\",\n          kulSizeY: \"100%\",\n        },\n      ],\n    },\n  };\n};\n","import {\n  KulDataDataset,\n  KulDataShapes,\n} from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulEventPayload } from \"../../types/GenericTypes\";\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulCompareEvent = \"kul-event\" | \"ready\" | \"unmount\";\nexport interface KulCompareEventPayload\n  extends KulEventPayload<\"KulCompare\", KulCompareEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulCompareProps {\n  kulData = \"Actual data to compare.\",\n  kulShape = \"Sets the type of shapes to compare.\",\n  kulStyle = \"Sets a custom CSS style for the component.\",\n  kulView = \"Sets the type of view, either styled as a before-after or a side-by-side comparison.\",\n}\nexport interface KulComparePropsInterface {\n  kulData?: KulDataDataset;\n  kulShape?: KulDataShapes;\n  kulStyle?: string;\n  kulView?: KulCompareView;\n}\nexport type KulCompareView = \"overlay\" | \"split\";\n","@import \"./styles/kul-compare-main.scss\";\n@import \"./styles/kul-compare-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  Fragment,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\n\nimport { DEFAULTS } from \"./helpers/kul-compare-defaults\";\nimport {\n  KulCompareEvent,\n  KulCompareEventPayload,\n  KulCompareProps,\n  KulCompareView,\n} from \"./kul-compare-declarations\";\nimport {\n  KulDataCell,\n  KulDataDataset,\n  KulDataNode,\n  KulDataShapes,\n  KulDataShapesMap,\n} from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { type GenericObject } from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\nimport { KulButtonEventPayload } from \"../kul-button/kul-button-declarations\";\n\n@Component({\n  tag: \"kul-compare\",\n  styleUrl: \"kul-compare.scss\",\n  shadow: true,\n})\nexport class KulCompare {\n  /**\n   * References the root HTML element of the component (<kul-compare>).\n   */\n  @Element() rootElement: HTMLKulCompareElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * The shapes of the component.\n   * @default undefined\n   *\n   * @see KulDataShapesMap - For a list of possible shapes.\n   */\n  @State() shapes: KulDataShapesMap = {};\n  /**\n   * State reflecting whether the left panel is open or not.\n   * @default false\n   */\n  @State() isLeftPanelOpened = false;\n  /**\n   * State reflecting whether the right panel is open or not\n   * @default false\n   */\n  @State() isRightPanelOpened = false;\n  /**\n   * Shape on the left.\n   * @default false\n   */\n  @State() leftShape: Partial<KulDataCell<KulDataShapes>>;\n  /**\n   * Shape on the right.\n   * @default false\n   */\n  @State() rightShape: Partial<KulDataCell<KulDataShapes>>;\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Actual data of the compare.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulData: KulDataDataset = null;\n  /**\n   * Sets the type of shapes to compare.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulShape: KulDataShapes = \"image\";\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * Sets the type of view, either styled as a before-after or a side-by-side comparison.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulView: KulCompareView = \"overlay\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-compare-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulCompareEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulCompareEvent) {\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*                 W a t c h e r s                 */\n  /*-------------------------------------------------*/\n\n  @Watch(\"kulData\")\n  @Watch(\"kulShape\")\n  async updateShapes() {\n    try {\n      this.shapes = this.#kulManager.data.cell.shapes.getAll(this.kulData);\n      const shapes = this.#getShapes();\n      this.leftShape = shapes[0];\n      this.rightShape = shapes[1];\n    } catch (error) {\n      this.#kulManager.debug.logs.new(\n        this,\n        \"Error updating shapes: \" + error,\n        \"error\",\n      );\n    }\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's properties and descriptions.\n   * @param {boolean} descriptions - When true, includes descriptions for each property.\n   * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulCompareProps, descriptions);\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #getShapes() {\n    return this.shapes?.[this.kulShape] || [];\n  }\n\n  #hasShapes() {\n    return !!this.shapes?.[this.kulShape];\n  }\n\n  #isOverlay() {\n    return !!(this.kulView === \"overlay\");\n  }\n\n  #prepChangeView(): VNode {\n    const ids = {\n      left: \"toggle-left-panel\",\n      right: \"toggle-right-panel\",\n      view: \"toggle-view\",\n    };\n    const panelIcon = \"close\";\n    const panelIconOff = \"view-sequential\";\n    const styling = \"icon\";\n    const buttonEventHandler: (\n      e: CustomEvent<KulButtonEventPayload>,\n    ) => void = (e) => {\n      const { eventType, id, value } = e.detail;\n\n      switch (eventType) {\n        case \"click\":\n          switch (id) {\n            case ids.left:\n              this.isLeftPanelOpened = value === \"on\" ? true : false;\n              break;\n            case ids.right:\n              this.isRightPanelOpened = value === \"on\" ? true : false;\n              break;\n            case ids.view:\n              this.kulView = value === \"on\" ? \"split\" : \"overlay\";\n              break;\n          }\n          break;\n      }\n    };\n    return (\n      <div class=\"change-view\">\n        <kul-button\n          id={ids.left}\n          kulIcon={panelIcon}\n          kulIconOff={panelIconOff}\n          kulStyling={styling}\n          kulToggable={true}\n          onKul-button-event={buttonEventHandler}\n          title={\n            this.#isOverlay()\n              ? \"Click to open the left panel.\"\n              : \"Click to close the left panel.\"\n          }\n        ></kul-button>\n        <kul-button\n          id={ids.view}\n          kulIcon=\"compare\"\n          kulIconOff=\"book-open\"\n          kulStyling={styling}\n          kulToggable={true}\n          onKul-button-event={buttonEventHandler}\n          title={\n            this.#isOverlay()\n              ? \"Click for split screen comparison.\"\n              : \"Click for overlay comparison\"\n          }\n        ></kul-button>\n        <kul-button\n          id={ids.right}\n          kulIcon={panelIcon}\n          kulIconOff={panelIconOff}\n          kulStyling={styling}\n          kulToggable={true}\n          onKul-button-event={buttonEventHandler}\n          title={\n            this.#isOverlay()\n              ? \"Click to open the right panel.\"\n              : \"Click to close the right panel.\"\n          }\n        ></kul-button>\n      </div>\n    );\n  }\n\n  #prepPanel(side: \"left\" | \"right\"): VNode {\n    const dataset: KulDataDataset = { nodes: [] };\n    const shapes = this.#getShapes();\n    for (let index = 0; index < shapes.length; index++) {\n      const shape = shapes[index];\n      const isCurrentLeft = side === \"left\" && this.leftShape === shape;\n      const isCurrentRight = side === \"right\" && this.rightShape === shape;\n      const strIndex = String(index).valueOf();\n      const node: KulDataNode = {\n        id: strIndex,\n        value: `${this.kulShape} #${strIndex}`,\n      };\n      if (isCurrentLeft || isCurrentRight) {\n        node.icon = \"check\";\n      }\n      dataset.nodes.push(node);\n    }\n\n    return (\n      <kul-tree\n        class={`view__panel view__panel--${side}`}\n        kulData={dataset}\n        onKul-tree-event={(e) => {\n          const { eventType, node } = e.detail;\n\n          switch (eventType) {\n            case \"click\":\n              const shape = this.#getShapes()[parseInt(node.id)];\n              switch (side) {\n                case \"left\":\n                  this.leftShape = shape;\n                  break;\n                case \"right\":\n                  this.rightShape = shape;\n                  break;\n              }\n              break;\n          }\n        }}\n      ></kul-tree>\n    );\n  }\n\n  #prepView(): VNode {\n    const { left, right } = DEFAULTS(this.#isOverlay());\n    const shapes = this.#kulManager.data.cell.shapes.decorate(\n      this.kulShape,\n      [this.leftShape, this.rightShape],\n      async (e) => this.onKulEvent(e, \"kul-event\"),\n      [...left[this.kulShape](), ...right[this.kulShape]()],\n    ).element;\n\n    return (\n      <Fragment>\n        <div class={`view view--${this.kulView}`}>\n          <div class=\"view__left\">{shapes[0]}</div>\n          {this.isLeftPanelOpened ? this.#prepPanel(\"left\") : null}\n          {this.isRightPanelOpened ? this.#prepPanel(\"right\") : null}\n          {this.#isOverlay() ? (\n            <div\n              class=\"view__slider\"\n              onInput={this.#updateOverlayWidth.bind(this)}\n              onTouchStart={this.#updateOverlayWidth.bind(this)}\n            >\n              <input\n                class=\"view__slider__input\"\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value=\"50\"\n              />\n            </div>\n          ) : null}\n          <div class=\"view__right\">{shapes[1]}</div>\n        </div>\n      </Fragment>\n    );\n  }\n\n  #prepCompare(): VNode {\n    if (this.#hasShapes()) {\n      const shapes = this.shapes[this.kulShape];\n      if (shapes?.length > 1) {\n        return (\n          <div class=\"grid\">\n            {this.#prepView()}\n            {this.#prepChangeView()}\n          </div>\n        );\n      }\n    }\n  }\n\n  #updateOverlayWidth(event: InputEvent) {\n    const sliderValue =\n      100 - parseInt((event.target as HTMLInputElement).value);\n    this.rootElement.style.setProperty(\n      \"--kul_compare_overlay_width\",\n      `${sliderValue}%`,\n    );\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n    this.updateShapes();\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class=\"compare\">{this.#prepCompare()}</div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}