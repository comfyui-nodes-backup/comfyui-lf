{"file":"kul-compare.entry.js","mappings":"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","names":[],"sources":["src/components/kul-compare/kul-compare-declarations.ts","src/components/kul-compare/helpers/kul-compare-defaults.ts","src/components/kul-compare/kul-compare.scss?tag=kul-compare&encapsulation=shadow","src/components/kul-compare/kul-compare.tsx"],"sourcesContent":["import {\n    KulDataDataset,\n    KulDataShapes,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulEventPayload } from '../../types/GenericTypes';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulCompareEvent = 'kul-event' | 'ready' | 'unmount';\nexport interface KulCompareEventPayload\n    extends KulEventPayload<'KulCompare', KulCompareEvent> {}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulCompareProps {\n    kulData = 'Actual data to compare.',\n    kulShape = 'Sets the type of shapes to compare.',\n    kulStyle = 'Sets a custom CSS style for the component.',\n    kulView = 'Sets the type of view, either styled as a before-after or a side-by-side comparison.',\n}\nexport interface KulComparePropsInterface {\n    kulData?: KulDataDataset;\n    kulShape?: KulDataShapes;\n    kulStyle?: string;\n    kulView?: KulCompareView;\n}\nexport type KulCompareView = 'overlay' | 'split';\n","import { KulDataShapeDefaults } from '../../../managers/kul-data/kul-data-declarations';\n\nexport const DEFAULTS: (isOverlay: boolean) => {\n    left: KulDataShapeDefaults;\n    right: KulDataShapeDefaults;\n} = (_isOverlay) => {\n    return {\n        left: {\n            image: () => [\n                {\n                    htmlProps: { className: 'kul-fit' },\n                    kulSizeX: '100%',\n                    kulSizeY: '100%',\n                },\n            ],\n        },\n        right: {\n            image: () => [\n                {\n                    htmlProps: { className: 'kul-fit' },\n                    kulSizeX: '100%',\n                    kulSizeY: '100%',\n                },\n            ],\n        },\n    };\n};\n","@import './styles/kul-compare-main.scss';\n@import './styles/kul-compare-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    Fragment,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n    Watch,\n} from '@stencil/core';\nimport { type GenericObject } from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulDataCell,\n    KulDataDataset,\n    KulDataNode,\n    KulDataShapes,\n    KulDataShapesMap,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport {\n    KulCompareEvent,\n    KulCompareEventPayload,\n    KulCompareProps,\n    KulCompareView,\n} from './kul-compare-declarations';\nimport { DEFAULTS } from './helpers/kul-compare-defaults';\nimport { KulButtonEventPayload } from '../kul-button/kul-button-declarations';\n\n@Component({\n    tag: 'kul-compare',\n    styleUrl: 'kul-compare.scss',\n    shadow: true,\n})\nexport class KulCompare {\n    /**\n     * References the root HTML element of the component (<kul-compare>).\n     */\n    @Element() rootElement: HTMLKulCompareElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The shapes of the component.\n     * @default undefined\n     *\n     * @see KulDataShapesMap - For a list of possible shapes.\n     */\n    @State() shapes: KulDataShapesMap = {};\n    /**\n     * The current view of the compare.\n     * @default \"before-after\"\n     */\n    @State() view: KulCompareView = 'overlay';\n    /**\n     * State reflecting whether the left panel is open or not.\n     * @default false\n     */\n    @State() isLeftPanelOpened = false;\n    /**\n     * State reflecting whether the right panel is open or not\n     * @default false\n     */\n    @State() isRightPanelOpened = false;\n    /**\n     * Shape on the left.\n     * @default false\n     */\n    @State() leftShape: Partial<KulDataCell<KulDataShapes>>;\n    /**\n     * Shape on the right.\n     * @default false\n     */\n    @State() rightShape: Partial<KulDataCell<KulDataShapes>>;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Actual data of the compare.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Sets the type of shapes to compare.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulShape: KulDataShapes = 'image';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Sets the type of view, either styled as a before-after or a side-by-side comparison.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulView: KulCompareView = 'overlay';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-compare-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulCompareEventPayload>;\n\n    onKulEvent(e: Event | CustomEvent, eventType: KulCompareEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*                 W a t c h e r s                 */\n    /*-------------------------------------------------*/\n\n    @Watch('kulData')\n    @Watch('kulShape')\n    async updateShapes() {\n        try {\n            this.shapes = this.#kulManager.data.cell.shapes.getAll(\n                this.kulData\n            );\n            const shapes = this.#getShapes();\n            this.leftShape = shapes[0];\n            this.rightShape = shapes[1];\n        } catch (error) {\n            this.#kulManager.debug.logs.new(\n                this,\n                'Error updating shapes: ' + error,\n                'error'\n            );\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's properties and descriptions.\n     * @param {boolean} descriptions - When true, includes descriptions for each property.\n     * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulCompareProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #getShapes() {\n        return this.shapes?.[this.kulShape] || [];\n    }\n\n    #hasShapes() {\n        return !!this.shapes?.[this.kulShape];\n    }\n\n    #isOverlay() {\n        return !!(this.view === 'overlay');\n    }\n\n    #prepChangeView(): VNode {\n        const ids = {\n            left: 'toggle-left-panel',\n            right: 'toggle-right-panel',\n            view: 'toggle-view',\n        };\n        const panelIcon = 'close';\n        const panelIconOff = 'view-sequential';\n        const styling = 'icon';\n        const buttonEventHandler: (\n            e: CustomEvent<KulButtonEventPayload>\n        ) => void = (e) => {\n            const { eventType, id, value } = e.detail;\n\n            switch (eventType) {\n                case 'click':\n                    switch (id) {\n                        case ids.left:\n                            this.isLeftPanelOpened =\n                                value === 'on' ? true : false;\n                            break;\n                        case ids.right:\n                            this.isRightPanelOpened =\n                                value === 'on' ? true : false;\n                            break;\n                        case ids.view:\n                            this.view = value === 'on' ? 'split' : 'overlay';\n                            break;\n                    }\n                    break;\n            }\n        };\n        return (\n            <div class=\"change-view\">\n                <kul-button\n                    id={ids.left}\n                    kulIcon={panelIcon}\n                    kulIconOff={panelIconOff}\n                    kulStyling={styling}\n                    kulToggable={true}\n                    onKul-button-event={buttonEventHandler}\n                    title={\n                        this.#isOverlay()\n                            ? 'Click to open the left panel.'\n                            : 'Click to close the left panel.'\n                    }\n                ></kul-button>\n                <kul-button\n                    id={ids.view}\n                    kulIcon=\"compare\"\n                    kulIconOff=\"book-open\"\n                    kulStyling={styling}\n                    kulToggable={true}\n                    onKul-button-event={buttonEventHandler}\n                    title={\n                        this.#isOverlay()\n                            ? 'Click for split screen comparison.'\n                            : 'Click for overlay comparison'\n                    }\n                ></kul-button>\n                <kul-button\n                    id={ids.right}\n                    kulIcon={panelIcon}\n                    kulIconOff={panelIconOff}\n                    kulStyling={styling}\n                    kulToggable={true}\n                    onKul-button-event={buttonEventHandler}\n                    title={\n                        this.#isOverlay()\n                            ? 'Click to open the right panel.'\n                            : 'Click to close the right panel.'\n                    }\n                ></kul-button>\n            </div>\n        );\n    }\n\n    #prepPanel(side: 'left' | 'right'): VNode {\n        const dataset: KulDataDataset = { nodes: [] };\n        const shapes = this.#getShapes();\n        for (let index = 0; index < shapes.length; index++) {\n            const shape = shapes[index];\n            const isCurrentLeft = side === 'left' && this.leftShape === shape;\n            const isCurrentRight =\n                side === 'right' && this.rightShape === shape;\n            const strIndex = String(index).valueOf();\n            const node: KulDataNode = {\n                id: strIndex,\n                value: `${this.kulShape} #${strIndex}`,\n            };\n            if (isCurrentLeft || isCurrentRight) {\n                node.icon = 'check';\n            }\n            dataset.nodes.push(node);\n        }\n\n        return (\n            <kul-tree\n                class={`view__panel view__panel--${side}`}\n                kulData={dataset}\n                onKul-tree-event={(e) => {\n                    const { eventType, node } = e.detail;\n\n                    switch (eventType) {\n                        case 'click':\n                            const shape = this.#getShapes()[parseInt(node.id)];\n                            switch (side) {\n                                case 'left':\n                                    this.leftShape = shape;\n                                    break;\n                                case 'right':\n                                    this.rightShape = shape;\n                                    break;\n                            }\n                            break;\n                    }\n                }}\n            ></kul-tree>\n        );\n    }\n\n    #prepView(): VNode {\n        const { left, right } = DEFAULTS(this.#isOverlay());\n        const shapes = this.#kulManager.data.cell.shapes.decorate(\n            this.kulShape,\n            [this.leftShape, this.rightShape],\n            async (e) => this.onKulEvent(e, 'kul-event'),\n            [...left[this.kulShape](), ...right[this.kulShape]()]\n        ).element;\n\n        return (\n            <Fragment>\n                <div class={`view view--${this.view}`}>\n                    <div class=\"view__left\">{shapes[0]}</div>\n                    {this.isLeftPanelOpened ? this.#prepPanel('left') : null}\n                    {this.isRightPanelOpened ? this.#prepPanel('right') : null}\n                    {this.#isOverlay() ? (\n                        <div\n                            class=\"view__slider\"\n                            onInput={this.#updateOverlayWidth.bind(this)}\n                            onTouchStart={this.#updateOverlayWidth.bind(this)}\n                        >\n                            <input\n                                class=\"view__slider__input\"\n                                type=\"range\"\n                                min=\"0\"\n                                max=\"100\"\n                                value=\"50\"\n                            />\n                        </div>\n                    ) : null}\n                    <div class=\"view__right\">{shapes[1]}</div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    #prepCompare(): VNode {\n        if (this.#hasShapes()) {\n            const shapes = this.shapes[this.kulShape];\n            if (shapes?.length > 1) {\n                return (\n                    <div class=\"grid\">\n                        {this.#prepView()}\n                        {this.#prepChangeView()}\n                    </div>\n                );\n            }\n        }\n    }\n\n    #updateOverlayWidth(event: InputEvent) {\n        const sliderValue =\n            100 - parseInt((event.target as HTMLInputElement).value);\n        this.rootElement.style.setProperty(\n            '--kul_compare_overlay_width',\n            `${sliderValue}%`\n        );\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.view = this.kulView;\n        this.updateShapes();\n    }\n\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div class=\"compare\">{this.#prepCompare()}</div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}