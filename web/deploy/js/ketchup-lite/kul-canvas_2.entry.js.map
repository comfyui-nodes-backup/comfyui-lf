{"file":"kul-canvas.kul-masonry.entry.js","mappings":"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","names":[],"sources":["src/components/kul-canvas/helpers/kul-canvas-helpers.ts","src/components/kul-canvas/kul-canvas-declarations.ts","src/components/kul-canvas/kul-canvas.scss?tag=kul-canvas&encapsulation=shadow","src/components/kul-canvas/kul-canvas.tsx","src/components/kul-masonry/helpers/kul-masonry-actions.tsx","src/components/kul-masonry/kul-masonry-declarations.ts","src/components/kul-masonry/kul-masonry.scss?tag=kul-masonry&encapsulation=shadow","src/components/kul-masonry/kul-masonry.tsx"],"sourcesContent":["import { KulCanvasPoints } from '../kul-canvas-declarations';\n\n//#region simplifyStroke\nexport const simplifyStroke = (points: KulCanvasPoints, tolerance: number) => {\n    if (points.length <= 2) {\n        return points;\n    }\n\n    const sqTolerance = tolerance * tolerance;\n\n    function getSqDist(p1: KulCanvasPoints[0], p2: KulCanvasPoints[0]): number {\n        const dx = p1.x - p2.x;\n        const dy = p1.y - p2.y;\n        return dx * dx + dy * dy;\n    }\n\n    function simplifyRecursive(\n        start: number,\n        end: number,\n        sqTolerance: number,\n        simplified: KulCanvasPoints\n    ) {\n        let maxSqDist = sqTolerance;\n        let index = -1;\n\n        for (let i = start + 1; i < end; i++) {\n            const sqDist = getSqDist(\n                points[i],\n                getClosestPoint(points[start], points[end], points[i])\n            );\n            if (sqDist > maxSqDist) {\n                index = i;\n                maxSqDist = sqDist;\n            }\n        }\n\n        if (maxSqDist > sqTolerance) {\n            if (index - start > 1)\n                simplifyRecursive(start, index, sqTolerance, simplified);\n            simplified.push(points[index]);\n            if (end - index > 1)\n                simplifyRecursive(index, end, sqTolerance, simplified);\n        }\n    }\n\n    function getClosestPoint(\n        p1: KulCanvasPoints[0],\n        p2: KulCanvasPoints[0],\n        p: KulCanvasPoints[0]\n    ) {\n        const dx = p2.x - p1.x;\n        const dy = p2.y - p1.y;\n        const t = ((p.x - p1.x) * dx + (p.y - p1.y) * dy) / (dx * dx + dy * dy);\n        return { x: p1.x + t * dx, y: p1.y + t * dy };\n    }\n\n    const simplified = [points[0]];\n    simplifyRecursive(0, points.length - 1, sqTolerance, simplified);\n    simplified.push(points[points.length - 1]);\n    return simplified;\n};\n//#endregion\n","import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\n\n//#region Events\nexport type KulCanvasEvent = 'stroke' | 'ready' | 'unmount';\nexport interface KulCanvasEventPayload\n    extends KulEventPayload<'KulCanvas', KulCanvasEvent> {\n    points: Array<{ x: number; y: number }>;\n}\n//#endregion\n\n//#region States\nexport type KulCanvasPoints = Array<{ x: number; y: number }>;\n//#endregion\n\n//#region Props\nexport enum KulCanvasProps {\n    kulBrush = 'The shape of the brush.',\n    kulColor = 'The color of the brush.',\n    kulImageProps = 'The props of the image displayed inside the badge.',\n    kulOpacity = 'The opacity of the brush.',\n    kulPreview = 'Displays the brush track of the current stroke.',\n    kulSize = 'The size of the brush.',\n    kulStrokeTolerance = 'Simplifies the coordinates array by applying the Ramer-Douglas-Peucker algorithm. This prop sets the tolerance of the algorithm (null to disable)',\n    kulStyle = 'Custom style of the component.',\n}\nexport interface KulCanvasPropsInterface {\n    kulBrush?: KulCanvasBrush;\n    kulColor?: string;\n    kulImageProps?: KulImagePropsInterface;\n    kulOpacity?: number;\n    kulPreview?: boolean;\n    kulSize?: number;\n    kulStrokeTolerance?: number;\n    kulStyle?: string;\n}\nexport type KulCanvasBrush = 'round' | 'square';\n//#endregion\n","@import './styles/kul-canvas-main.scss';\n@import './styles/kul-canvas-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { GenericObject } from '../../components';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\nimport { simplifyStroke } from './helpers/kul-canvas-helpers';\nimport {\n    KulCanvasBrush,\n    KulCanvasEvent,\n    KulCanvasEventPayload,\n    KulCanvasPoints,\n    KulCanvasProps,\n} from './kul-canvas-declarations';\n\n@Component({\n    tag: 'kul-canvas',\n    styleUrl: 'kul-canvas.scss',\n    shadow: true,\n})\nexport class KulCanvas {\n    /**\n     * References the root HTML element of the component (<kul-canvas>).\n     */\n    @Element() rootElement: HTMLKulCanvasElement;\n\n    //#region States\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * Indicates whether the user is currently painting.\n     * @default false\n     */\n    @State() isPainting = false;\n    /**\n     * Stores the points of the current stroke.\n     * @default []\n     */\n    @State() points: KulCanvasPoints = [];\n    //#endregion\n\n    //#region Props\n    /**\n     * The shape of the brush.\n     * @default 'round'\n     */\n    @Prop({ mutable: true, reflect: true }) kulBrush: KulCanvasBrush = 'round';\n    /**\n     * The color of the brush.\n     * @default '#ff0000'\n     */\n    @Prop({ mutable: true, reflect: true }) kulColor = '#ff0000';\n    /**\n     * The props of the image displayed inside the badge.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulImageProps: KulImagePropsInterface = null;\n    /**\n     * The opacity of the brush.\n     * @default 1.0\n     */\n    @Prop({ mutable: true, reflect: true }) kulOpacity = 1.0;\n    /**\n     * Displays the brush track of the current stroke.\n     * @default true\n     */\n    @Prop({ mutable: true, reflect: true }) kulPreview = true;\n    /**\n     * Simplifies the coordinates array by applying the Ramer-Douglas-Peucker algorithm.\n     * This prop sets the tolerance of the algorithm (null to disable).\n     * @default null\n     */\n    @Prop({ mutable: true, reflect: true }) kulStrokeTolerance: number = null;\n    /**\n     * The size of the brush.\n     * @default 10\n     */\n    @Prop({ mutable: true, reflect: true }) kulSize = 10;\n    /**\n     * Customizes the style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    //#endregion\n\n    //#region Internal variables\n    #board: HTMLCanvasElement;\n    #boardCtx: CanvasRenderingContext2D;\n    #container: HTMLDivElement;\n    #cursor: HTMLCanvasElement;\n    #cursorCtx: CanvasRenderingContext2D;\n    #image: HTMLKulImageElement;\n    #kulManager = kulManagerInstance();\n    #resizeObserver: ResizeObserver;\n    #resizeTimeout: NodeJS.Timeout;\n    //#endregion\n\n    //#region Events\n    @Event({\n        eventName: 'kul-canvas-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulCanvasEventPayload>;\n    onKulEvent(e: Event | CustomEvent, eventType: KulCanvasEvent) {\n        this.kulEvent.emit({\n            comp: this,\n            id: this.rootElement.id,\n            originalEvent: e,\n            eventType,\n            points:\n                this.kulStrokeTolerance !== null && this.points?.length\n                    ? simplifyStroke(this.points, this.kulStrokeTolerance)\n                    : this.points,\n        });\n    }\n    //#endregion\n\n    //#region Public methods\n    /**\n     * Returns the painting canvas .\n     * @returns {Promise<HTMLCanvasElement>} The painting canvas.\n     */\n    @Method()\n    async getCanvas(): Promise<HTMLCanvasElement> {\n        return this.#board;\n    }\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Returns the image component.\n     */\n    @Method()\n    async getImage(): Promise<HTMLKulImageElement> {\n        return this.#image;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<KulCanvasPropsInterface>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulCanvasProps, descriptions);\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Sets the height of the canvas.\n     */\n    @Method()\n    async setCanvasHeight(value?: number): Promise<void> {\n        if (value !== undefined) {\n            this.#board.height = value;\n            this.#cursor.height = value;\n        } else {\n            const h = this.#container.clientHeight;\n            this.#board.height = h;\n            this.#cursor.height = h;\n        }\n    }\n    /**\n     * Sets the width of the canvas.\n     */\n    @Method()\n    async setCanvasWidth(value?: number): Promise<void> {\n        if (value !== undefined) {\n            this.#board.width = value;\n            this.#cursor.width = value;\n        } else {\n            const w = this.#container.clientWidth;\n            this.#board.width = w;\n            this.#cursor.width = w;\n        }\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n    //#endregion\n\n    //#region Private methods\n    #normalizeCoordinate(event: PointerEvent, rect: DOMRect) {\n        let x = (event.clientX - rect.left) / rect.width;\n        let y = (event.clientY - rect.top) / rect.height;\n\n        x = Math.max(0, Math.min(1, x));\n        y = Math.max(0, Math.min(1, y));\n\n        return { x, y };\n    }\n\n    #getCanvasCoordinate(event: PointerEvent, rect: DOMRect) {\n        let x = event.clientX - rect.left;\n        let y = event.clientY - rect.top;\n\n        x = Math.max(0, Math.min(rect.width, x));\n        y = Math.max(0, Math.min(rect.height, y));\n\n        return { x, y };\n    }\n\n    #setupContext(ctx: CanvasRenderingContext2D, isFill = false) {\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.globalAlpha = this.kulOpacity;\n        if (isFill) {\n            ctx.fillStyle = this.kulColor;\n        } else {\n            ctx.strokeStyle = this.kulColor;\n            ctx.lineWidth = this.kulSize;\n        }\n    }\n\n    #handlePointerDown(e: PointerEvent) {\n        e.preventDefault();\n        this.isPainting = true;\n        this.points = [];\n        this.#addPoint(e);\n\n        this.#board.setPointerCapture(e.pointerId);\n\n        this.#board.addEventListener('pointermove', this.#handlePointerMove);\n        this.#board.addEventListener('pointerup', this.#handlePointerUp);\n    }\n\n    #handlePointerMove = (e: PointerEvent) => {\n        e.preventDefault();\n\n        this.#drawBrushCursor(e);\n\n        if (!this.isPainting) {\n            return;\n        }\n\n        this.#addPoint(e);\n        this.#drawLastSegment();\n    };\n\n    #handlePointerOut = (e: PointerEvent) => {\n        this.#endCapture(e);\n    };\n\n    #handlePointerUp = (e: PointerEvent) => {\n        this.#endCapture(e);\n    };\n\n    #addPoint(e: PointerEvent) {\n        const rect = this.#board.getBoundingClientRect();\n        const { x, y } = this.#normalizeCoordinate(e, rect);\n        this.points.push({ x, y });\n    }\n\n    #endCapture(e: PointerEvent) {\n        e.preventDefault();\n        this.isPainting = false;\n\n        this.#boardCtx.clearRect(0, 0, this.#board.width, this.#board.height);\n\n        this.#board.releasePointerCapture(e.pointerId);\n\n        this.#board.removeEventListener('pointermove', this.#handlePointerMove);\n        this.#board.removeEventListener('pointerup', this.#handlePointerUp);\n    }\n\n    #drawBrushCursor(event: PointerEvent) {\n        this.#cursorCtx.clearRect(\n            0,\n            0,\n            this.#cursor.width,\n            this.#cursor.height\n        );\n\n        const rect = this.#board.getBoundingClientRect();\n        const { x, y } = this.#getCanvasCoordinate(event, rect);\n\n        this.#setupContext(this.#cursorCtx, true);\n        this.#drawBrushShape(this.#cursorCtx, x, y, true);\n    }\n\n    #drawBrushShape(\n        ctx: CanvasRenderingContext2D,\n        x: number,\n        y: number,\n        isFill = true\n    ) {\n        ctx.beginPath();\n        switch (this.kulBrush) {\n            case 'round':\n                ctx.arc(x, y, this.kulSize / 2, 0, Math.PI * 2);\n                break;\n            case 'square':\n                const halfSize = this.kulSize / 2;\n                ctx.rect(\n                    x - halfSize,\n                    y - halfSize,\n                    this.kulSize,\n                    this.kulSize\n                );\n                break;\n        }\n        if (isFill) {\n            ctx.fill();\n        } else {\n            ctx.stroke();\n        }\n    }\n\n    #drawLastSegment() {\n        const len = this.points.length;\n        if (len < 2) {\n            return;\n        }\n\n        const lastPoint = this.points[len - 1];\n        const secondLastPoint = this.points[len - 2];\n\n        const x1 = secondLastPoint.x * this.#board.width;\n        const y1 = secondLastPoint.y * this.#board.height;\n        const x2 = lastPoint.x * this.#board.width;\n        const y2 = lastPoint.y * this.#board.height;\n\n        this.#setupContext(this.#boardCtx, false);\n\n        if (this.kulBrush === 'round') {\n            this.#boardCtx.beginPath();\n            this.#boardCtx.moveTo(x1, y1);\n            this.#boardCtx.lineTo(x2, y2);\n            this.#boardCtx.stroke();\n        } else if (this.kulBrush === 'square') {\n            this.#drawBrushShape(this.#boardCtx, x2, y2, false);\n        }\n    }\n    //#endregion\n\n    //#region Lifecycle hooks\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        this.#boardCtx = this.#board.getContext('2d');\n        this.#cursorCtx = this.#cursor.getContext('2d');\n\n        this.setCanvasHeight();\n        this.setCanvasWidth();\n\n        this.#resizeObserver = new ResizeObserver(() => {\n            clearTimeout(this.#resizeTimeout);\n            this.#resizeTimeout = setTimeout(() => {\n                this.setCanvasHeight();\n                this.setCanvasWidth();\n            }, 100);\n        });\n        this.#resizeObserver.observe(this.#container);\n\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    <div\n                        class=\"canvas\"\n                        ref={(el) => {\n                            if (el) {\n                                this.#container = el;\n                            }\n                        }}\n                    >\n                        <kul-image\n                            class=\"canvas__image kul-fit\"\n                            {...this.kulImageProps}\n                            ref={(el) => {\n                                if (el) {\n                                    this.#image = el;\n                                }\n                            }}\n                        ></kul-image>\n                        <canvas\n                            class=\"canvas__board\"\n                            onPointerDown={(e) => this.#handlePointerDown(e)}\n                            onPointerMove={(e) => this.#handlePointerMove(e)}\n                            onPointerUp={(e) => this.onKulEvent(e, 'stroke')}\n                            onPointerOut={(e) => this.#handlePointerOut(e)}\n                            ref={(el) => {\n                                if (el) {\n                                    this.#board = el;\n                                }\n                            }}\n                        ></canvas>\n                        <canvas\n                            class=\"canvas__cursor\"\n                            ref={(el) => {\n                                if (el) {\n                                    this.#cursor = el;\n                                }\n                            }}\n                        ></canvas>\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n\n        if (this.#resizeObserver) {\n            this.#resizeObserver.disconnect();\n        }\n    }\n}\n//#endregion\n","import { h } from '@stencil/core';\nimport {\n    KulButtonEventPayload,\n    KulButtonStyling,\n} from '../../kul-button/kul-button-declarations';\nimport { KulMasonryAdapter } from '../kul-masonry-declarations';\n\nconst STYLING: KulButtonStyling = 'floating';\n\nconst MASONRY_ICON = 'view_quilt';\nconst HORIZONTAL_ICON = 'view_column';\nconst MINUS_ICON = 'remove';\nconst PLUS_ICON = 'plus';\nconst VERTICAL_ICON = 'view_day';\n\n//#region buttonHandler\nconst buttonHandler = (\n    adapter: KulMasonryAdapter,\n    e: CustomEvent<KulButtonEventPayload>\n) => {\n    const { eventType, id } = e.detail;\n\n    switch (eventType) {\n        case 'click':\n            switch (id) {\n                case MASONRY_ICON:\n                    adapter.actions.changeView();\n                    break;\n                case MINUS_ICON:\n                    adapter.actions.removeColumn();\n                    break;\n                case PLUS_ICON:\n                    adapter.actions.addColumn();\n                    break;\n            }\n            break;\n    }\n};\n//#endregion\n\nexport const ACTIONS = {\n    masonry: {\n        //#region add\n        add: (adapter: KulMasonryAdapter) => {\n            return (\n                <kul-button\n                    class={'grid__add-column kul-slim'}\n                    id={PLUS_ICON}\n                    key={PLUS_ICON}\n                    kulIcon={PLUS_ICON}\n                    kulStyling={STYLING}\n                    onKul-button-event={buttonHandler.bind(\n                        buttonHandler,\n                        adapter\n                    )}\n                    ref={(el) => {\n                        if (el) {\n                            adapter.components.buttons.addColumn = el;\n                        }\n                    }}\n                    title=\"Click to add a column to the masonry.\"\n                ></kul-button>\n            );\n        },\n        //#endregion\n\n        //#region remove\n        remove: (adapter: KulMasonryAdapter) => {\n            return (\n                <kul-button\n                    class={'grid__remove-column kul-slim'}\n                    id={MINUS_ICON}\n                    key={MINUS_ICON}\n                    kulIcon={MINUS_ICON}\n                    kulStyling={STYLING}\n                    onKul-button-event={buttonHandler.bind(\n                        buttonHandler,\n                        adapter\n                    )}\n                    ref={(el) => {\n                        if (el) {\n                            adapter.components.buttons.removeColumn = el;\n                        }\n                    }}\n                    title=\"Click to remove a column from the masonry.\"\n                ></kul-button>\n            );\n        },\n    },\n    //#endregion\n\n    //#region changeView\n    changeView: (adapter: KulMasonryAdapter) => {\n        return (\n            <kul-button\n                class={'grid__change-view'}\n                id={MASONRY_ICON}\n                key={MASONRY_ICON}\n                kulIcon={\n                    adapter.isMasonry()\n                        ? VERTICAL_ICON\n                        : adapter.isVertical()\n                          ? HORIZONTAL_ICON\n                          : MASONRY_ICON\n                }\n                kulStyling={STYLING}\n                onKul-button-event={buttonHandler.bind(buttonHandler, adapter)}\n                ref={(el) => {\n                    if (el) {\n                        adapter.components.buttons.changeView = el;\n                    }\n                }}\n                title={\n                    adapter.isMasonry()\n                        ? 'Click to view the images arranged vertically.'\n                        : adapter.isVertical()\n                          ? 'Click to view the images arranged horizontally.'\n                          : 'Click to view the images arranged in a masonry.'\n                }\n            ></kul-button>\n        );\n    },\n    //#endregion\n};\n","import {\n    KulDataCell,\n    KulDataDataset,\n    KulDataShapes,\n    KulDataShapesMap,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulEventPayload } from '../../types/GenericTypes';\nimport { KulMasonry } from './kul-masonry';\n\n//#region Adapter\nexport interface KulMasonryAdapter {\n    actions: KulMasonryAdapterActions;\n    components: {\n        buttons: {\n            addColumn: HTMLKulButtonElement;\n            removeColumn: HTMLKulButtonElement;\n            changeView: HTMLKulButtonElement;\n        };\n    };\n    isMasonry: () => boolean;\n    isVertical: () => boolean;\n    get: {\n        masonry: () => KulMasonry;\n        shapes: () => KulDataShapesMap;\n    };\n}\n\nexport interface KulMasonryAdapterActions {\n    addColumn: () => Promise<void>;\n    removeColumn: () => Promise<void>;\n    changeView: () => Promise<void>;\n}\n//#endregion\n\n//#region Events\nexport type KulMasonryEvent = 'kul-event' | 'ready' | 'unmount';\nexport interface KulMasonryEventPayload\n    extends KulEventPayload<'KulMasonry', KulMasonryEvent> {\n    selectedShape: KulMasonrySelectedShape;\n}\n//#endregion\n\n//#region States\nexport type KulMasonrySelectedShape = {\n    index?: number;\n    shape?: Partial<KulDataCell<KulDataShapes>>;\n};\n//#endregion\n\n//#region Props\nexport enum KulMasonryProps {\n    kulColumns = 'Number of columns of the masonry.',\n    kulData = 'Actual data to masonry.',\n    kulSelectable = 'Allows for the selection of elements.',\n    kulShape = 'Sets the type of shapes to compare.',\n    kulStyle = 'Sets a custom CSS style for the component.',\n    kulView = 'Sets the type of view, either the actual masonry or a sequential view.',\n}\nexport interface KulMasonryPropsInterface {\n    kulColumns?: number;\n    kulData?: KulDataDataset;\n    kulSelectable?: boolean;\n    kulShape?: KulDataShapes;\n    kulStyle?: string;\n    kulView?: KulMasonryView;\n}\nexport type KulMasonryView = 'horizontal' | 'masonry' | 'vertical';\n//#endregion\n","@import './styles/kul-masonry-main.scss';\n@import './styles/kul-masonry-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    Fragment,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n    Watch,\n} from '@stencil/core';\nimport {\n    KulDataCell,\n    KulDataDataset,\n    KulDataShapes,\n    KulDataShapesMap,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulDebugLifecycleInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulGenericEvent,\n    KulGenericEventPayload,\n    type GenericObject,\n} from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { ACTIONS } from './helpers/kul-masonry-actions';\nimport {\n    KulMasonryAdapter,\n    KulMasonryEvent,\n    KulMasonryEventPayload,\n    KulMasonryProps,\n    KulMasonrySelectedShape,\n    KulMasonryView,\n} from './kul-masonry-declarations';\n\n@Component({\n    tag: 'kul-masonry',\n    styleUrl: 'kul-masonry.scss',\n    shadow: true,\n})\nexport class KulMasonry {\n    /**\n     * References the root HTML element of the component (<kul-masonry>).\n     */\n    @Element() rootElement: HTMLKulMasonryElement;\n\n    //#region States\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugLifecycleInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The selected element.\n     * @default {}\n     */\n    @State() selectedShape: KulMasonrySelectedShape = {};\n    /**\n     * The shapes of the component.\n     * @default {}\n     *\n     * @see KulDataShapesMap - For a list of possible shapes.\n     */\n    @State() shapes: KulDataShapesMap = {};\n    //#endregion\n\n    //#region Props\n    /**\n     * Number of columns of the masonry, doesn't affect sequential views.\n     * @default 3\n     */\n    @Prop({ mutable: true }) kulColumns = 3;\n    /**\n     * Actual data of the masonry.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Allows for the selection of elements.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulSelectable = false;\n    /**\n     * Sets the type of shapes to compare.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulShape: KulDataShapes = 'image';\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Sets the type of view, either the actual masonry or a sequential view.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulView: KulMasonryView = 'masonry';\n    //#endregion\n\n    //#region Internal variables\n    #kulManager = kulManagerInstance();\n    //#endregion\n\n    //#region Events\n    @Event({\n        eventName: 'kul-masonry-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulMasonryEventPayload>;\n    onKulEvent(e: Event | CustomEvent, eventType: KulMasonryEvent) {\n        let shouldUpdateState = false;\n        const state: KulMasonrySelectedShape = {};\n\n        switch (eventType) {\n            case 'kul-event':\n                const { eventType } = (e as KulGenericEvent).detail;\n                switch (eventType) {\n                    case 'click':\n                        if (this.kulSelectable) {\n                            const { comp } = (\n                                e as CustomEvent<KulGenericEventPayload>\n                            ).detail;\n                            const index = parseInt(\n                                comp.rootElement.dataset.index\n                            );\n                            if (this.selectedShape.index !== index) {\n                                state.index = index;\n                                state.shape = this.shapes[this.kulShape][index];\n                            }\n                            shouldUpdateState = true;\n                        }\n                        break;\n                }\n                break;\n        }\n\n        if (shouldUpdateState) {\n            this.selectedShape = state;\n        }\n\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            selectedShape: this.selectedShape,\n        });\n    }\n    //#endregion\n\n    //#region Watchers\n    @Watch('kulData')\n    @Watch('kulShape')\n    async updateShapes() {\n        try {\n            this.shapes = this.#kulManager.data.cell.shapes.getAll(\n                this.kulData\n            );\n        } catch (error) {\n            this.#kulManager.debug.logs.new(\n                this,\n                'Error updating shapes: ' + error,\n                'error'\n            );\n        }\n    }\n    //#endregion\n\n    //#region Public methods\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's properties and descriptions.\n     * @param {boolean} descriptions - When true, includes descriptions for each property.\n     * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulMasonryProps, descriptions);\n    }\n    /**\n     * Returns the selected shape.\n     * @returns {Promise<KulMasonrySelectedShape>} Selected shape.\n     */\n    @Method()\n    async getSelectedShape(): Promise<KulMasonrySelectedShape> {\n        return this.selectedShape;\n    }\n    /**\n     * Redecorates the shapes, updating potential new values.\n     */\n    @Method()\n    async redecorateShapes(): Promise<void> {\n        this.updateShapes();\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Sets the selected shape by index.\n     */\n    @Method()\n    async setSelectedShape(index: number): Promise<void> {\n        const shape = this.shapes?.[this.kulShape]?.[index];\n        if (shape) {\n            const newState: KulMasonrySelectedShape = {\n                index,\n                shape,\n            };\n            this.selectedShape = newState;\n        } else {\n            this.selectedShape = {};\n            this.#kulManager.debug.logs.new(\n                this,\n                `Couldn't set shape with index: ${index}`\n            );\n        }\n        this.updateShapes();\n    }\n    /**\n     * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n     * @param {number} ms - Number of milliseconds\n     */\n    @Method()\n    async unmount(ms: number = 0): Promise<void> {\n        setTimeout(() => {\n            this.onKulEvent(new CustomEvent('unmount'), 'unmount');\n            this.rootElement.remove();\n        }, ms);\n    }\n    //#endregion\n\n    //#region Private methods\n    #adapter: KulMasonryAdapter = {\n        actions: {\n            addColumn: async () => {\n                this.kulColumns++;\n            },\n            removeColumn: async () => {\n                if (this.kulColumns > 2) {\n                    this.kulColumns--;\n                }\n            },\n            changeView: async () => {\n                if (this.#isMasonry()) {\n                    this.kulView = 'vertical';\n                } else if (this.#isVertical()) {\n                    this.kulView = 'horizontal';\n                } else {\n                    this.kulView = 'masonry';\n                }\n            },\n        },\n        components: {\n            buttons: {\n                addColumn: null,\n                removeColumn: null,\n                changeView: null,\n            },\n        },\n        isMasonry: () => this.#isMasonry(),\n        isVertical: () => this.#isVertical(),\n        get: { masonry: () => this, shapes: () => this.shapes },\n    };\n    #divideShapesIntoColumns(columnCount: number): VNode[][] {\n        const props: Partial<KulDataCell<KulDataShapes>>[] = this.shapes[\n            this.kulShape\n        ].map(() => ({\n            htmlProps: {\n                dataset: { selected: '' },\n            },\n        }));\n        if (this.selectedShape.index !== undefined) {\n            props[this.selectedShape.index] = {\n                htmlProps: {\n                    dataset: { selected: 'true' },\n                },\n            };\n        }\n        const columns: VNode[][] = Array.from(\n            { length: columnCount },\n            () => [],\n            []\n        );\n        const decoratedShapes = this.#kulManager.data.cell.shapes.decorate(\n            this.kulShape,\n            this.shapes[this.kulShape],\n            async (e) => this.onKulEvent(e, 'kul-event'),\n            props\n        );\n\n        decoratedShapes.element.forEach((element: VNode, index: number) => {\n            element.$attrs$['data-index'] = index.toString();\n            columns[index % columnCount].push(element);\n        });\n\n        return columns;\n    }\n    #hasShapes() {\n        return !!this.shapes?.[this.kulShape];\n    }\n    #isVertical() {\n        return this.kulView === 'vertical';\n    }\n    #isMasonry() {\n        return this.kulView === 'masonry';\n    }\n    #prepChangeView() {\n        return (\n            <div class=\"grid__actions\">\n                {this.#isMasonry() ? (\n                    <div class=\"grid__actions__sub\">\n                        {ACTIONS.masonry.add(this.#adapter)}\n                        {ACTIONS.masonry.remove(this.#adapter)}\n                    </div>\n                ) : null}\n                {ACTIONS.changeView(this.#adapter)}\n            </div>\n        );\n    }\n    #prepView(): VNode[] {\n        const columnCount = this.#isMasonry() ? this.kulColumns : 1;\n        const columns = this.#divideShapesIntoColumns(columnCount);\n\n        return columns.map((column, colIndex) => (\n            <div key={colIndex} class=\"grid__column\">\n                {column.map((element) => (\n                    <Fragment>{element}</Fragment>\n                ))}\n            </div>\n        ));\n    }\n    #prepMasonry(): VNode {\n        if (this.#hasShapes()) {\n            const shapes = this.shapes[this.kulShape];\n            if (shapes?.length) {\n                return (\n                    <Fragment>\n                        <div class={`grid grid--${this.kulView}`}>\n                            {this.#prepView()}\n                        </div>\n                        {this.#prepChangeView()}\n                    </Fragment>\n                );\n            }\n        }\n    }\n    //#endregion\n\n    //#region Lifecylce hooks\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n        this.updateShapes();\n    }\n    componentDidLoad() {\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n    render() {\n        const style = {\n            ['--kul_masonry_columns']: this.kulColumns?.toString() || '4',\n        };\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID} style={style}>\n                    <div class=\"masonry\">{this.#prepMasonry()}</div>\n                </div>\n            </Host>\n        );\n    }\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n    //#endregion\n}\n"],"version":3}