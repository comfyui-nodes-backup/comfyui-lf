{"file":"kul-canvas.kul-masonry.entry.js","mappings":"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","names":["__classPrivateFieldGet"],"sources":["src/components/kul-canvas/kul-canvas-declarations.ts","src/components/kul-canvas/helpers/kul-canvas-helpers.ts","src/components/kul-canvas/kul-canvas.scss?tag=kul-canvas&encapsulation=shadow","src/components/kul-canvas/kul-canvas.tsx","src/components/kul-masonry/helpers/kul-masonry-actions.tsx","src/components/kul-masonry/kul-masonry-declarations.ts","src/components/kul-masonry/kul-masonry.scss?tag=kul-masonry&encapsulation=shadow","src/components/kul-masonry/kul-masonry.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\nimport { KulImagePropsInterface } from \"../kul-image/kul-image-declarations\";\n\n//#region Events\nexport type KulCanvasEvent = \"stroke\" | \"ready\" | \"unmount\";\nexport interface KulCanvasEventPayload\n  extends KulEventPayload<\"KulCanvas\", KulCanvasEvent> {\n  points: Array<{ x: number; y: number }>;\n}\n//#endregion\n\n//#region States\nexport type KulCanvasPoints = Array<{ x: number; y: number }>;\n//#endregion\n\n//#region Props\nexport enum KulCanvasProps {\n  kulBrush = \"The shape of the brush.\",\n  kulColor = \"The color of the brush.\",\n  kulCursor = \" Sets the style of the cursor.\",\n  kulImageProps = \"The props of the image displayed inside the badge.\",\n  kulOpacity = \"The opacity of the brush.\",\n  kulPreview = \"Displays the brush track of the current stroke.\",\n  kulSize = \"The size of the brush.\",\n  kulStrokeTolerance = \"Simplifies the coordinates array by applying the Ramer-Douglas-Peucker algorithm. This prop sets the tolerance of the algorithm (null to disable)\",\n  kulStyle = \"Custom style of the component.\",\n}\nexport interface KulCanvasPropsInterface {\n  kulBrush?: KulCanvasBrush;\n  kulColor?: string;\n  kulCursor?: KulCanvasCursor;\n  kulImageProps?: KulImagePropsInterface;\n  kulOpacity?: number;\n  kulPreview?: boolean;\n  kulSize?: number;\n  kulStrokeTolerance?: number;\n  kulStyle?: string;\n}\nexport type KulCanvasBrush = \"round\" | \"square\";\nexport type KulCanvasCursor = \"preview\" | \"default\";\n//#endregion\n","import { KulCanvasPoints } from \"../kul-canvas-declarations\";\n\n//#region simplifyStroke\nexport const simplifyStroke = (points: KulCanvasPoints, tolerance: number) => {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance * tolerance;\n\n  function getSqDist(p1: KulCanvasPoints[0], p2: KulCanvasPoints[0]): number {\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n  }\n\n  function simplifyRecursive(\n    start: number,\n    end: number,\n    sqTolerance: number,\n    simplified: KulCanvasPoints,\n  ) {\n    let maxSqDist = sqTolerance;\n    let index = -1;\n\n    for (let i = start + 1; i < end; i++) {\n      const sqDist = getSqDist(\n        points[i],\n        getClosestPoint(points[start], points[end], points[i]),\n      );\n      if (sqDist > maxSqDist) {\n        index = i;\n        maxSqDist = sqDist;\n      }\n    }\n\n    if (maxSqDist > sqTolerance) {\n      if (index - start > 1)\n        simplifyRecursive(start, index, sqTolerance, simplified);\n      simplified.push(points[index]);\n      if (end - index > 1)\n        simplifyRecursive(index, end, sqTolerance, simplified);\n    }\n  }\n\n  function getClosestPoint(\n    p1: KulCanvasPoints[0],\n    p2: KulCanvasPoints[0],\n    p: KulCanvasPoints[0],\n  ) {\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const t = ((p.x - p1.x) * dx + (p.y - p1.y) * dy) / (dx * dx + dy * dy);\n    return { x: p1.x + t * dx, y: p1.y + t * dy };\n  }\n\n  const simplified = [points[0]];\n  simplifyRecursive(0, points.length - 1, sqTolerance, simplified);\n  simplified.push(points[points.length - 1]);\n  return simplified;\n};\n//#endregion\n","@import \"./styles/kul-canvas-main.scss\";\n@import \"./styles/kul-canvas-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulCanvasBrush,\n  KulCanvasCursor,\n  KulCanvasEvent,\n  KulCanvasEventPayload,\n  KulCanvasPoints,\n  KulCanvasProps,\n} from \"./kul-canvas-declarations\";\nimport { GenericObject } from \"../../components\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\nimport { KulImagePropsInterface } from \"../kul-image/kul-image-declarations\";\nimport { simplifyStroke } from \"./helpers/kul-canvas-helpers\";\n\n@Component({\n  tag: \"kul-canvas\",\n  styleUrl: \"kul-canvas.scss\",\n  shadow: true,\n})\nexport class KulCanvas {\n  /**\n   * References the root HTML element of the component (<kul-canvas>).\n   */\n  @Element() rootElement: HTMLKulCanvasElement;\n\n  //#region States\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * Indicates whether the user is currently painting.\n   * @default false\n   */\n  @State() isPainting = false;\n  /**\n   * Stores the points of the current stroke.\n   * @default []\n   */\n  @State() points: KulCanvasPoints = [];\n  //#endregion\n\n  //#region Props\n  /**\n   * The shape of the brush.\n   * @default 'round'\n   */\n  @Prop({ mutable: true, reflect: true }) kulBrush: KulCanvasBrush = \"round\";\n  /**\n   * The color of the brush.\n   * @default '#ff0000'\n   */\n  @Prop({ mutable: true, reflect: true }) kulColor = \"#ff0000\";\n  /**\n   * Sets the style of the cursor.\n   * @default 'preview'\n   */\n  @Prop({ mutable: true, reflect: true }) kulCursor: KulCanvasCursor =\n    \"preview\";\n  /**\n   * The props of the image displayed inside the badge.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulImageProps: KulImagePropsInterface = null;\n  /**\n   * The opacity of the brush.\n   * @default 1.0\n   */\n  @Prop({ mutable: true, reflect: true }) kulOpacity = 1.0;\n  /**\n   * Displays the brush track of the current stroke.\n   * @default true\n   */\n  @Prop({ mutable: true, reflect: true }) kulPreview = true;\n  /**\n   * Simplifies the coordinates array by applying the Ramer-Douglas-Peucker algorithm.\n   * This prop sets the tolerance of the algorithm (null to disable).\n   * @default null\n   */\n  @Prop({ mutable: true, reflect: true }) kulStrokeTolerance: number = null;\n  /**\n   * The size of the brush.\n   * @default 10\n   */\n  @Prop({ mutable: true, reflect: true }) kulSize = 10;\n  /**\n   * Customizes the style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  //#endregion\n\n  //#region Internal variables\n  #board: HTMLCanvasElement;\n  #boardCtx: CanvasRenderingContext2D;\n  #container: HTMLDivElement;\n  #cursor: HTMLCanvasElement;\n  #cursorCtx: CanvasRenderingContext2D;\n  #image: HTMLKulImageElement;\n  #kulManager = kulManagerInstance();\n  #resizeObserver: ResizeObserver;\n  #resizeTimeout: NodeJS.Timeout;\n  //#endregion\n\n  //#region Events\n  @Event({\n    eventName: \"kul-canvas-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulCanvasEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulCanvasEvent) {\n    this.kulEvent.emit({\n      comp: this,\n      id: this.rootElement.id,\n      originalEvent: e,\n      eventType,\n      points:\n        this.kulStrokeTolerance !== null && this.points?.length\n          ? simplifyStroke(this.points, this.kulStrokeTolerance)\n          : this.points,\n    });\n  }\n  //#endregion\n\n  //#region Public methods\n  /**\n   * Clears the painting canvas .\n   */\n  @Method()\n  async clearCanvas(): Promise<void> {\n    this.#boardCtx.clearRect(0, 0, this.#board.width, this.#board.height);\n  }\n  /**\n   * Returns the painting canvas .\n   * @returns {Promise<HTMLCanvasElement>} The painting canvas.\n   */\n  @Method()\n  async getCanvas(): Promise<HTMLCanvasElement> {\n    return this.#board;\n  }\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Returns the image component.\n   */\n  @Method()\n  async getImage(): Promise<HTMLKulImageElement> {\n    return this.#image;\n  }\n  /**\n   * Used to retrieve component's props values.\n   * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n   * @returns {Promise<KulCanvasPropsInterface>} List of props as object, each key will be a prop.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulCanvasProps, descriptions);\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Automatically resizes the canvas to the match the size of the container.\n   */\n  @Method()\n  async resizeCanvas(): Promise<void> {\n    const { height, width } = this.#container.getBoundingClientRect();\n    this.#board.height = height;\n    this.#board.width = width;\n    if (this.#isCursorPreview()) {\n      this.#cursor.height = height;\n      this.#cursor.width = width;\n    }\n  }\n  /**\n   * Sets the height of the canvas.\n   */\n  @Method()\n  async setCanvasHeight(value?: number): Promise<void> {\n    if (value !== undefined) {\n      this.#board.height = value;\n      if (this.#isCursorPreview()) {\n        this.#cursor.height = value;\n      }\n    } else {\n      const { height } = this.#container.getBoundingClientRect();\n      this.#board.height = height;\n      if (this.#isCursorPreview()) {\n        this.#cursor.height = height;\n      }\n    }\n  }\n  /**\n   * Sets the width of the canvas.\n   */\n  @Method()\n  async setCanvasWidth(value?: number): Promise<void> {\n    if (value !== undefined) {\n      this.#board.width = value;\n      if (this.#isCursorPreview()) {\n        this.#cursor.width = value;\n      }\n    } else {\n      const { width } = this.#container.getBoundingClientRect();\n      this.#board.width = width;\n      if (this.#isCursorPreview()) {\n        this.#cursor.width = width;\n      }\n    }\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n  //#endregion\n\n  //#region Private methods\n  #isCursorPreview() {\n    return this.kulCursor === \"preview\";\n  }\n  #normalizeCoordinate(event: PointerEvent, rect: DOMRect) {\n    let x = (event.clientX - rect.left) / rect.width;\n    let y = (event.clientY - rect.top) / rect.height;\n\n    x = Math.max(0, Math.min(1, x));\n    y = Math.max(0, Math.min(1, y));\n\n    return { x, y };\n  }\n  #getCanvasCoordinate(event: PointerEvent, rect: DOMRect) {\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n\n    x = Math.max(0, Math.min(rect.width, x));\n    y = Math.max(0, Math.min(rect.height, y));\n\n    return { x, y };\n  }\n  #setupContext(ctx: CanvasRenderingContext2D, isFill = false) {\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.globalAlpha = this.kulOpacity;\n    if (isFill) {\n      ctx.fillStyle = this.kulColor;\n    } else {\n      ctx.strokeStyle = this.kulColor;\n      ctx.lineWidth = this.kulSize;\n    }\n  }\n  #handlePointerDown(e: PointerEvent) {\n    e.preventDefault();\n    this.isPainting = true;\n    this.points = [];\n    this.#addPoint(e);\n\n    this.#board.setPointerCapture(e.pointerId);\n\n    this.#board.addEventListener(\"pointermove\", this.#handlePointerMove);\n    this.#board.addEventListener(\"pointerup\", this.#handlePointerUp);\n  }\n  #handlePointerMove = (e: PointerEvent) => {\n    e.preventDefault();\n\n    if (this.#isCursorPreview()) {\n      this.#drawBrushCursor(e);\n    }\n\n    if (!this.isPainting) {\n      return;\n    }\n\n    this.#addPoint(e);\n    this.#drawLastSegment();\n  };\n  #handlePointerOut = (e: PointerEvent) => {\n    this.#endCapture(e);\n  };\n  #handlePointerUp = (e: PointerEvent) => {\n    this.#endCapture(e);\n  };\n\n  #addPoint(e: PointerEvent) {\n    const rect = this.#board.getBoundingClientRect();\n    const { x, y } = this.#normalizeCoordinate(e, rect);\n    this.points.push({ x, y });\n  }\n  #endCapture(e: PointerEvent) {\n    e.preventDefault();\n    this.isPainting = false;\n\n    this.#board.releasePointerCapture(e.pointerId);\n\n    this.#board.removeEventListener(\"pointermove\", this.#handlePointerMove);\n    this.#board.removeEventListener(\"pointerup\", this.#handlePointerUp);\n  }\n  #drawBrushCursor(event: PointerEvent) {\n    this.#cursorCtx.clearRect(0, 0, this.#cursor.width, this.#cursor.height);\n\n    const rect = this.#board.getBoundingClientRect();\n    const { x, y } = this.#getCanvasCoordinate(event, rect);\n\n    this.#setupContext(this.#cursorCtx, true);\n    this.#drawBrushShape(this.#cursorCtx, x, y, true);\n  }\n  #drawBrushShape(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    isFill = true,\n  ) {\n    ctx.beginPath();\n    switch (this.kulBrush) {\n      case \"round\":\n        ctx.arc(x, y, this.kulSize / 2, 0, Math.PI * 2);\n        break;\n      case \"square\":\n        const halfSize = this.kulSize / 2;\n        ctx.rect(x - halfSize, y - halfSize, this.kulSize, this.kulSize);\n        break;\n    }\n    if (isFill) {\n      ctx.fill();\n    } else {\n      ctx.stroke();\n    }\n  }\n  #drawLastSegment() {\n    const len = this.points.length;\n    if (len < 2) {\n      return;\n    }\n\n    const lastPoint = this.points[len - 1];\n    const secondLastPoint = this.points[len - 2];\n\n    const x1 = secondLastPoint.x * this.#board.width;\n    const y1 = secondLastPoint.y * this.#board.height;\n    const x2 = lastPoint.x * this.#board.width;\n    const y2 = lastPoint.y * this.#board.height;\n\n    this.#setupContext(this.#boardCtx, false);\n\n    if (this.kulBrush === \"round\") {\n      this.#boardCtx.beginPath();\n      this.#boardCtx.moveTo(x1, y1);\n      this.#boardCtx.lineTo(x2, y2);\n      this.#boardCtx.stroke();\n    } else if (this.kulBrush === \"square\") {\n      this.#drawBrushShape(this.#boardCtx, x2, y2, false);\n    }\n  }\n  //#endregion\n\n  //#region Lifecycle hooks\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n  }\n\n  componentDidLoad() {\n    this.#boardCtx = this.#board.getContext(\"2d\");\n    this.#cursorCtx = this.#cursor.getContext(\"2d\");\n\n    this.setCanvasHeight();\n    this.setCanvasWidth();\n\n    this.#resizeObserver = new ResizeObserver(() => {\n      clearTimeout(this.#resizeTimeout);\n      this.#resizeTimeout = setTimeout(() => {\n        this.setCanvasHeight();\n        this.setCanvasWidth();\n      }, 100);\n    });\n    this.#resizeObserver.observe(this.#container);\n\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    const className = {\n      canvas: true,\n      \"canvas--hidden-cursor\": this.#isCursorPreview(),\n    };\n\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div\n            class={className}\n            ref={(el) => {\n              if (el) {\n                this.#container = el;\n              }\n            }}\n          >\n            <kul-image\n              class=\"canvas__image kul-fit\"\n              {...this.kulImageProps}\n              ref={(el) => {\n                if (el) {\n                  this.#image = el;\n                }\n              }}\n            ></kul-image>\n            <canvas\n              class=\"canvas__board\"\n              onPointerDown={(e) => this.#handlePointerDown(e)}\n              onPointerMove={(e) => this.#handlePointerMove(e)}\n              onPointerUp={(e) => this.onKulEvent(e, \"stroke\")}\n              onPointerOut={(e) => this.#handlePointerOut(e)}\n              ref={(el) => {\n                if (el) {\n                  this.#board = el;\n                }\n              }}\n            ></canvas>\n            {this.#isCursorPreview() && (\n              <canvas\n                class=\"canvas__cursor\"\n                ref={(el) => {\n                  if (el) {\n                    this.#cursor = el;\n                  }\n                }}\n              ></canvas>\n            )}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n\n    if (this.#resizeObserver) {\n      this.#resizeObserver.disconnect();\n    }\n  }\n}\n//#endregion\n","import { h } from \"@stencil/core\";\n\nimport {\n  KulButtonEventPayload,\n  KulButtonStyling,\n} from \"../../kul-button/kul-button-declarations\";\nimport { KulMasonryAdapter } from \"../kul-masonry-declarations\";\n\nconst STYLING: KulButtonStyling = \"floating\";\n\nconst MASONRY_ICON = \"view_quilt\";\nconst HORIZONTAL_ICON = \"view_column\";\nconst MINUS_ICON = \"remove\";\nconst PLUS_ICON = \"plus\";\nconst VERTICAL_ICON = \"view_day\";\n\nconst buttonHandler = (\n  adapter: KulMasonryAdapter,\n  e: CustomEvent<KulButtonEventPayload>,\n) => {\n  const { eventType, id } = e.detail;\n\n  switch (eventType) {\n    case \"click\":\n      switch (id) {\n        case MASONRY_ICON:\n          adapter.actions.changeView();\n          break;\n        case MINUS_ICON:\n          adapter.actions.removeColumn();\n          break;\n        case PLUS_ICON:\n          adapter.actions.addColumn();\n          break;\n      }\n      break;\n  }\n};\n\nexport const ACTIONS = {\n  masonry: {\n    add: (adapter: KulMasonryAdapter) => {\n      return (\n        <kul-button\n          class={\"grid__add-column kul-slim\"}\n          id={PLUS_ICON}\n          key={PLUS_ICON}\n          kulIcon={PLUS_ICON}\n          kulStyling={STYLING}\n          onKul-button-event={buttonHandler.bind(buttonHandler, adapter)}\n          ref={(el) => {\n            if (el) {\n              adapter.components.buttons.addColumn = el;\n            }\n          }}\n          title=\"Click to add a column to the masonry.\"\n        ></kul-button>\n      );\n    },\n    remove: (adapter: KulMasonryAdapter) => {\n      return (\n        <kul-button\n          class={\"grid__remove-column kul-slim\"}\n          id={MINUS_ICON}\n          key={MINUS_ICON}\n          kulIcon={MINUS_ICON}\n          kulStyling={STYLING}\n          onKul-button-event={buttonHandler.bind(buttonHandler, adapter)}\n          ref={(el) => {\n            if (el) {\n              adapter.components.buttons.removeColumn = el;\n            }\n          }}\n          title=\"Click to remove a column from the masonry.\"\n        ></kul-button>\n      );\n    },\n  },\n  changeView: (adapter: KulMasonryAdapter) => {\n    return (\n      <kul-button\n        class={\"grid__change-view\"}\n        id={MASONRY_ICON}\n        key={MASONRY_ICON}\n        kulIcon={\n          adapter.isMasonry()\n            ? VERTICAL_ICON\n            : adapter.isVertical()\n              ? HORIZONTAL_ICON\n              : MASONRY_ICON\n        }\n        kulStyling={STYLING}\n        onKul-button-event={buttonHandler.bind(buttonHandler, adapter)}\n        ref={(el) => {\n          if (el) {\n            adapter.components.buttons.changeView = el;\n          }\n        }}\n        title={\n          adapter.isMasonry()\n            ? \"Click to view the images arranged vertically.\"\n            : adapter.isVertical()\n              ? \"Click to view the images arranged horizontally.\"\n              : \"Click to view the images arranged in a masonry.\"\n        }\n      ></kul-button>\n    );\n  },\n};\n","import { KulMasonry } from \"./kul-masonry\";\nimport {\n  KulDataCell,\n  KulDataDataset,\n  KulDataShapes,\n  KulDataShapesMap,\n} from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulEventPayload } from \"../../types/GenericTypes\";\n\n//#region Adapter\nexport interface KulMasonryAdapter {\n  actions: KulMasonryAdapterActions;\n  components: {\n    buttons: {\n      addColumn: HTMLKulButtonElement;\n      removeColumn: HTMLKulButtonElement;\n      changeView: HTMLKulButtonElement;\n    };\n  };\n  isMasonry: () => boolean;\n  isVertical: () => boolean;\n  get: {\n    masonry: () => KulMasonry;\n    shapes: () => KulDataShapesMap;\n  };\n}\n\nexport interface KulMasonryAdapterActions {\n  addColumn: () => Promise<void>;\n  removeColumn: () => Promise<void>;\n  changeView: () => Promise<void>;\n}\n//#endregion\n\n//#region Events\nexport type KulMasonryEvent = \"kul-event\" | \"ready\" | \"unmount\";\nexport interface KulMasonryEventPayload\n  extends KulEventPayload<\"KulMasonry\", KulMasonryEvent> {\n  selectedShape: KulMasonrySelectedShape;\n}\n//#endregion\n\n//#region States\nexport type KulMasonrySelectedShape = {\n  index?: number;\n  shape?: Partial<KulDataCell<KulDataShapes>>;\n};\n//#endregion\n\n//#region Props\nexport enum KulMasonryProps {\n  kulColumns = \"Number of columns of the masonry.\",\n  kulData = \"Actual data to masonry.\",\n  kulSelectable = \"Allows for the selection of elements.\",\n  kulShape = \"Sets the type of shapes to compare.\",\n  kulStyle = \"Sets a custom CSS style for the component.\",\n  kulView = \"Sets the type of view, either the actual masonry or a sequential view.\",\n}\nexport interface KulMasonryPropsInterface {\n  kulColumns?: number;\n  kulData?: KulDataDataset;\n  kulSelectable?: boolean;\n  kulShape?: KulDataShapes;\n  kulStyle?: string;\n  kulView?: KulMasonryView;\n}\nexport type KulMasonryView = \"horizontal\" | \"masonry\" | \"vertical\";\n//#endregion\n","@import \"./styles/kul-masonry-main.scss\";\n@import \"./styles/kul-masonry-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  Fragment,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\n\nimport { ACTIONS } from \"./helpers/kul-masonry-actions\";\nimport {\n  KulMasonryAdapter,\n  KulMasonryEvent,\n  KulMasonryEventPayload,\n  KulMasonryProps,\n  KulMasonrySelectedShape,\n  KulMasonryView,\n} from \"./kul-masonry-declarations\";\nimport {\n  KulDataCell,\n  KulDataDataset,\n  KulDataShapes,\n  KulDataShapesMap,\n} from \"../../managers/kul-data/kul-data-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport {\n  KulGenericEvent,\n  KulGenericEventPayload,\n  type GenericObject,\n} from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-masonry\",\n  styleUrl: \"kul-masonry.scss\",\n  shadow: true,\n})\nexport class KulMasonry {\n  /**\n   * References the root HTML element of the component (<kul-masonry>).\n   */\n  @Element() rootElement: HTMLKulMasonryElement;\n\n  /*-------------------------------------------------*/\n  /*                   S t a t e s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * The selected element.\n   * @default {}\n   */\n  @State() selectedShape: KulMasonrySelectedShape = {};\n  /**\n   * The shapes of the component.\n   * @default {}\n   *\n   * @see KulDataShapesMap - For a list of possible shapes.\n   */\n  @State() shapes: KulDataShapesMap = {};\n\n  /*-------------------------------------------------*/\n  /*                    P r o p s                    */\n  /*-------------------------------------------------*/\n\n  /**\n   * Number of columns of the masonry, doesn't affect sequential views.\n   * @default 3\n   */\n  @Prop({ mutable: true }) kulColumns = 3;\n  /**\n   * Actual data of the masonry.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulData: KulDataDataset = null;\n  /**\n   * Allows for the selection of elements.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulSelectable = false;\n  /**\n   * Sets the type of shapes to compare.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulShape: KulDataShapes = \"image\";\n  /**\n   * Custom style of the component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * Sets the type of view, either the actual masonry or a sequential view.\n   * @default null\n   */\n  @Prop({ mutable: true }) kulView: KulMasonryView = \"masonry\";\n\n  /*-------------------------------------------------*/\n  /*       I n t e r n a l   V a r i a b l e s       */\n  /*-------------------------------------------------*/\n\n  #kulManager = kulManagerInstance();\n\n  /*-------------------------------------------------*/\n  /*                   E v e n t s                   */\n  /*-------------------------------------------------*/\n\n  /**\n   * Describes event emitted.\n   */\n  @Event({\n    eventName: \"kul-masonry-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulMasonryEventPayload>;\n\n  onKulEvent(e: Event | CustomEvent, eventType: KulMasonryEvent) {\n    let shouldUpdateState = false;\n    const state: KulMasonrySelectedShape = {};\n\n    switch (eventType) {\n      case \"kul-event\":\n        const { eventType } = (e as KulGenericEvent).detail;\n        switch (eventType) {\n          case \"click\":\n            if (this.kulSelectable) {\n              const { comp } = (e as CustomEvent<KulGenericEventPayload>)\n                .detail;\n              const index = parseInt(comp.rootElement.dataset.index);\n              if (this.selectedShape.index !== index) {\n                state.index = index;\n                state.shape = this.shapes[this.kulShape][index];\n              }\n              shouldUpdateState = true;\n            }\n            break;\n        }\n        break;\n    }\n\n    if (shouldUpdateState) {\n      this.selectedShape = state;\n    }\n\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n      selectedShape: this.selectedShape,\n    });\n  }\n\n  /*-------------------------------------------------*/\n  /*                 W a t c h e r s                 */\n  /*-------------------------------------------------*/\n\n  @Watch(\"kulData\")\n  @Watch(\"kulShape\")\n  async updateShapes() {\n    try {\n      this.shapes = this.#kulManager.data.cell.shapes.getAll(this.kulData);\n    } catch (error) {\n      this.#kulManager.debug.logs.new(\n        this,\n        \"Error updating shapes: \" + error,\n        \"error\",\n      );\n    }\n  }\n\n  /*-------------------------------------------------*/\n  /*           P u b l i c   M e t h o d s           */\n  /*-------------------------------------------------*/\n\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's properties and descriptions.\n   * @param {boolean} descriptions - When true, includes descriptions for each property.\n   * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulMasonryProps, descriptions);\n  }\n  /**\n   * Returns the selected shape.\n   * @returns {Promise<KulMasonrySelectedShape>} Selected shape.\n   */\n  @Method()\n  async getSelectedShape(): Promise<KulMasonrySelectedShape> {\n    return this.selectedShape;\n  }\n  /**\n   * Redecorates the shapes, updating potential new values.\n   */\n  @Method()\n  async redecorateShapes(): Promise<void> {\n    this.updateShapes();\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Sets the selected shape by index.\n   */\n  @Method()\n  async setSelectedShape(index: number): Promise<void> {\n    const shape = this.shapes?.[this.kulShape]?.[index];\n    if (shape) {\n      const newState: KulMasonrySelectedShape = {\n        index,\n        shape,\n      };\n      this.selectedShape = newState;\n    } else {\n      this.selectedShape = {};\n      this.#kulManager.debug.logs.new(\n        this,\n        `Couldn't set shape with index: ${index}`,\n      );\n    }\n    this.updateShapes();\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n\n  /*-------------------------------------------------*/\n  /*           P r i v a t e   M e t h o d s         */\n  /*-------------------------------------------------*/\n\n  #adapter: KulMasonryAdapter = {\n    actions: {\n      addColumn: async () => {\n        this.kulColumns++;\n      },\n      removeColumn: async () => {\n        if (this.kulColumns > 2) {\n          this.kulColumns--;\n        }\n      },\n      changeView: async () => {\n        if (this.#isMasonry()) {\n          this.kulView = \"vertical\";\n        } else if (this.#isVertical()) {\n          this.kulView = \"horizontal\";\n        } else {\n          this.kulView = \"masonry\";\n        }\n      },\n    },\n    components: {\n      buttons: {\n        addColumn: null,\n        removeColumn: null,\n        changeView: null,\n      },\n    },\n    isMasonry: () => this.#isMasonry(),\n    isVertical: () => this.#isVertical(),\n    get: { masonry: () => this, shapes: () => this.shapes },\n  };\n\n  #divideShapesIntoColumns(columnCount: number): VNode[][] {\n    const props: Partial<KulDataCell<KulDataShapes>>[] = this.shapes[\n      this.kulShape\n    ].map(() => ({\n      htmlProps: {\n        dataset: { selected: \"\" },\n      },\n    }));\n    if (this.selectedShape.index !== undefined) {\n      props[this.selectedShape.index] = {\n        htmlProps: {\n          dataset: { selected: \"true\" },\n        },\n      };\n    }\n    const columns: VNode[][] = Array.from(\n      { length: columnCount },\n      () => [],\n      [],\n    );\n    const decoratedShapes = this.#kulManager.data.cell.shapes.decorate(\n      this.kulShape,\n      this.shapes[this.kulShape],\n      async (e) => this.onKulEvent(e, \"kul-event\"),\n      props,\n    );\n\n    decoratedShapes.element.forEach((element: VNode, index: number) => {\n      element.$attrs$[\"data-index\"] = index.toString();\n      columns[index % columnCount].push(element);\n    });\n\n    return columns;\n  }\n\n  #hasShapes() {\n    return !!this.shapes?.[this.kulShape];\n  }\n\n  #isVertical() {\n    return this.kulView === \"vertical\";\n  }\n\n  #isMasonry() {\n    return this.kulView === \"masonry\";\n  }\n\n  #prepChangeView() {\n    return (\n      <div class=\"grid__actions\">\n        {this.#isMasonry() ? (\n          <div class=\"grid__actions__sub\">\n            {ACTIONS.masonry.add(this.#adapter)}\n            {ACTIONS.masonry.remove(this.#adapter)}\n          </div>\n        ) : null}\n        {ACTIONS.changeView(this.#adapter)}\n      </div>\n    );\n  }\n\n  #prepView(): VNode[] {\n    const columnCount = this.#isMasonry() ? this.kulColumns : 1;\n    const columns = this.#divideShapesIntoColumns(columnCount);\n\n    return columns.map((column, colIndex) => (\n      <div key={colIndex} class=\"grid__column\">\n        {column.map((element) => (\n          <Fragment>{element}</Fragment>\n        ))}\n      </div>\n    ));\n  }\n\n  #prepMasonry(): VNode {\n    if (this.#hasShapes()) {\n      const shapes = this.shapes[this.kulShape];\n      if (shapes?.length) {\n        return (\n          <Fragment>\n            <div class={`grid grid--${this.kulView}`}>{this.#prepView()}</div>\n            {this.#prepChangeView()}\n          </Fragment>\n        );\n      }\n    }\n  }\n\n  /*-------------------------------------------------*/\n  /*          L i f e c y c l e   H o o k s          */\n  /*-------------------------------------------------*/\n\n  componentWillLoad() {\n    this.#kulManager.theme.register(this);\n    this.updateShapes();\n  }\n\n  componentDidLoad() {\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n\n  render() {\n    const style = {\n      [\"--kul_masonry_columns\"]: this.kulColumns?.toString() || \"4\",\n    };\n\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID} style={style}>\n          <div class=\"masonry\">{this.#prepMasonry()}</div>\n        </div>\n      </Host>\n    );\n  }\n\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n"],"version":3}