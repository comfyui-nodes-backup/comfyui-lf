{"file":"kul-button.kul-list.entry.js","mappings":"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","names":[],"sources":["src/components/kul-button/kul-button-declarations.ts","src/components/kul-button/kul-button.scss?tag=kul-button&encapsulation=shadow","src/components/kul-button/kul-button.tsx","src/components/kul-list/kul-list-declarations.ts","src/components/kul-list/kul-list.scss?tag=kul-list&encapsulation=shadow","src/components/kul-list/kul-list.tsx"],"sourcesContent":["import { KulEventPayload } from '../../types/GenericTypes';\nimport { KulDataDataset } from '../../managers/kul-data/kul-data-declarations';\nimport { KulButton } from './kul-button';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulButtonEvent =\n    | 'blur'\n    | 'click'\n    | 'focus'\n    | 'kul-event'\n    | 'pointerdown'\n    | 'ready';\nexport interface KulButtonEventPayload\n    extends KulEventPayload<KulButton, KulButtonEvent, Event | CustomEvent> {\n    value: string;\n}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulButtonProps {\n    kulData = 'Actual data of the button, used to render dropdown buttons.',\n    kulDisabled = 'When true, the component is disabled.',\n    kulIcon = 'Specifies an icon to display.',\n    kulIconOff = 'Icon to be used for the off state when the button is toggable.',\n    kulLabel = 'Defines text to display on the button.',\n    kulRipple = 'When set to true, the pointerdown event will trigger a ripple effect.',\n    kulShowSpinner = 'When true, a spinner will be shown on the button.',\n    kulStyle = 'Sets a custom CSS style for the component.',\n    kulStyling = 'Defines the button appearance. Possible values are \"flat\", \"floating\", \"icon\", \"outlined\", and \"raised\". The default is \"raised\".',\n    kulToggable = 'Makes the button toggable between an on and off state.',\n    kulTrailingIcon = 'If set, displays an icon after the text.',\n    kulType = 'Defines the button type attribute.',\n    kulValue = 'If true, the button is marked as checked.',\n}\nexport interface KulButtonPropsInterface {\n    kulData?: KulDataDataset;\n    kulDisabled?: boolean;\n    kulIcon?: string;\n    kulIconOff?: string;\n    kulLabel?: string;\n    kulRipple?: boolean;\n    kulShowSpinner?: boolean;\n    kulStyle?: string;\n    kulStyling?: KulButtonStyling;\n    kulToggable?: boolean;\n    kulTrailingIcon?: boolean;\n    kulType?: 'button' | 'submit' | 'reset';\n    kulValue?: boolean;\n}\nexport type KulButtonStyling =\n    | 'flat'\n    | 'floating'\n    | 'icon'\n    | 'outlined'\n    | 'raised';\n/*-------------------------------------------------*/\n/*                    S t a t e                    */\n/*-------------------------------------------------*/\nexport type KulButtonState = 'off' | 'on';\n","@import './styles/kul-button-main.scss';\n@import './styles/kul-button-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    Fragment,\n    h,\n    Host,\n    Method,\n    Prop,\n    State,\n    VNode,\n} from '@stencil/core';\nimport {\n    KulDataCyAttributes,\n    type GenericObject,\n} from '../../types/GenericTypes';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport {\n    KulButtonEventPayload,\n    KulButtonEvent,\n    KulButtonProps,\n    KulButtonState,\n    KulButtonStyling,\n} from './kul-button-declarations';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { getProps } from '../../utils/componentUtils';\nimport {\n    KUL_DROPDOWN_CLASS,\n    KUL_DROPDOWN_CLASS_VISIBLE,\n    KUL_STYLE_ID,\n    KUL_WRAPPER_ID,\n} from '../../variables/GenericVariables';\nimport { KulImagePropsInterface } from '../kul-image/kul-image-declarations';\nimport {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulDynamicPositionPlacement } from '../../managers/kul-dynamic-position/kul-dynamic-position-declarations';\nimport { KulManagerClickCb } from '../../managers/kul-manager/kul-manager-declarations';\nimport { KulListEventPayload } from '../kul-list/kul-list-declarations';\n\n@Component({\n    tag: 'kul-button',\n    styleUrl: 'kul-button.scss',\n    shadow: true,\n})\nexport class KulButton {\n    /**\n     * References the root HTML element of the component (<kul-button>).\n     */\n    @Element() rootElement: HTMLKulButtonElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The value of the component (\"on\" or \"off\").\n     * @default \"\"\n     *\n     * @see KulButtonState - For a list of possible states.\n     */\n    @State() value: KulButtonState = 'off';\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * Actual data of the button, used to render dropdown buttons.\n     * @default null\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Defaults at false. When set to true, the component is disabled.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n    /**\n     * When set, the button will show this icon.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulIcon = '';\n    /**\n     * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulIconOff = '';\n    /**\n     * When set, the button will show this text.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulLabel = '';\n    /**\n     * When set to true, the pointerdown event will trigger a ripple effect.\n     * @default true\n     */\n    @Prop({ mutable: true, reflect: true }) kulRipple = true;\n    /**\n     * When set to true, the button show a spinner received in slot.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulShowSpinner = false;\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyle = '';\n    /**\n     * Defines the style of the button. This property controls the visual appearance of the button.\n     *\n     * @default \"raised\"\n     *\n     * @see KulButtonStyling - For a list of available styles.\n     */\n    @Prop({ mutable: true, reflect: true }) kulStyling: KulButtonStyling =\n        'raised';\n    /**\n     * When set to true, the icon button will be toggable on/off.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulToggable = false;\n    /**\n     * When set, the icon will be shown after the text.\n     * @default false\n     */\n    @Prop({ mutable: true, reflect: true }) kulTrailingIcon = false;\n    /**\n     * Sets the type of the button.\n     * @default \"button\"\n     */\n    @Prop({ mutable: true, reflect: true }) kulType:\n        | 'button'\n        | 'reset'\n        | 'submit' = 'button';\n    /**\n     * When set to true, the icon button state will be on.\n     * @default false\n     */\n    @Prop({ mutable: false }) kulValue = false;\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #clickCb: KulManagerClickCb;\n    #dropdown: HTMLButtonElement;\n    #dropdownRippleSurface: HTMLDivElement;\n    #list: HTMLKulListElement;\n    #kulManager = kulManagerInstance();\n    #rippleSurface: HTMLDivElement;\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted for various button interactions like click, focus, blur.\n     */\n    @Event({\n        eventName: 'kul-button-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulButtonEventPayload>;\n\n    onKulEvent(\n        e: Event | CustomEvent,\n        eventType: KulButtonEvent,\n        isDropdown = false\n    ) {\n        switch (eventType) {\n            case 'click':\n                this.#updateState(this.#isOn() ? 'off' : 'on');\n                break;\n            case 'pointerdown':\n                if (this.kulRipple) {\n                    this.#kulManager.theme.ripple.trigger(\n                        e as PointerEvent,\n                        isDropdown\n                            ? this.#dropdownRippleSurface\n                            : this.#rippleSurface\n                    );\n                }\n                break;\n        }\n\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            value: this.value,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's properties and descriptions.\n     * @param {boolean} descriptions - When true, includes descriptions for each property.\n     * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulButtonProps, descriptions);\n    }\n    /**\n     * Used to retrieve the component's current state.\n     * @returns {Promise<KulButtonState>} Promise resolved with the current state of the component.\n     */\n    @Method()\n    async getValue(): Promise<KulButtonState> {\n        return this.value;\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Sets the component's state.\n     * @param {KulButtonState} value - The new state to be set on the component.\n     * @returns {Promise<void>}\n     */\n    @Method()\n    async setValue(value: KulButtonState): Promise<void> {\n        this.#updateState(value);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #listManager() {\n        return {\n            close: () => {\n                this.#kulManager.dynamicPosition.stop(this.#list);\n                this.#kulManager.removeClickCallback(this.#clickCb);\n            },\n            isOpened: () => {\n                return this.#list.classList.contains(\n                    KUL_DROPDOWN_CLASS_VISIBLE\n                );\n            },\n            open: () => {\n                if (this.#kulManager.dynamicPosition.isRegistered(this.#list)) {\n                    this.#kulManager.dynamicPosition.changeAnchor(\n                        this.#list,\n                        this.#dropdown\n                    );\n                } else {\n                    this.#kulManager.dynamicPosition.register(\n                        this.#list,\n                        this.#dropdown,\n                        0,\n                        KulDynamicPositionPlacement.AUTO,\n                        true\n                    );\n                }\n                this.#kulManager.dynamicPosition.start(this.#list);\n                if (!this.#clickCb) {\n                    this.#clickCb = {\n                        cb: () => {\n                            this.#listManager().close();\n                        },\n                        el: this.#list,\n                    };\n                }\n                this.#kulManager.addClickCallback(this.#clickCb, true);\n            },\n            toggle: () => {\n                if (this.#listManager().isOpened()) {\n                    this.#listManager().close();\n                } else {\n                    this.#listManager().open();\n                }\n            },\n        };\n    }\n\n    #isDropdown() {\n        return this.kulData?.nodes?.[0]?.children?.length;\n    }\n\n    #isOn() {\n        return this.value === 'on' ? true : false;\n    }\n\n    #updateState(value: KulButtonState) {\n        if (\n            this.kulToggable &&\n            !this.kulDisabled &&\n            (value === 'off' || value === 'on')\n        ) {\n            this.value = value;\n        }\n    }\n\n    #prepIcon(image: KulImagePropsInterface) {\n        return this.kulIcon ? (\n            <kul-image\n                class={`button__icon kul-icon ${this.kulShowSpinner ? 'button__icon--hidden' : ''}`}\n                {...image}\n            />\n        ) : undefined;\n    }\n\n    #prepLabel(className: { [className: string]: boolean }) {\n        return <span class={className}>{this.kulLabel}</span>;\n    }\n\n    #prepNode(node: KulDataNode): VNode {\n        const currentNode = <div>{node.value}</div>;\n\n        if (Array.isArray(node.children) && node.children.length > 0) {\n            const childrenNodes = node.children.map((childNode) =>\n                this.#prepNode(childNode)\n            );\n            return (\n                <Fragment>\n                    {currentNode}\n                    {childrenNodes}\n                </Fragment>\n            );\n        } else {\n            return currentNode;\n        }\n    }\n\n    #prepRipple(isDropdown = false) {\n        return this.kulRipple ? (\n            <div\n                ref={(el) => {\n                    if (el && this.kulRipple) {\n                        if (isDropdown) {\n                            this.#dropdownRippleSurface = el;\n                        } else {\n                            this.#rippleSurface = el;\n                        }\n                    }\n                }}\n            ></div>\n        ) : undefined;\n    }\n\n    #prepSpinner() {\n        return this.kulShowSpinner ? (\n            <div class=\"button__spinner-container\">\n                <slot name=\"spinner\"></slot>\n            </div>\n        ) : undefined;\n    }\n\n    #normalizedStyling() {\n        return this.kulStyling\n            ? (this.kulStyling.toLowerCase() as KulButtonStyling)\n            : 'raised';\n    }\n\n    #renderButton(): VNode[] {\n        const buttonStyling = this.#normalizedStyling();\n\n        const image: KulImagePropsInterface = {\n            kulColor: this.kulDisabled\n                ? `var(--kul_button_disabled_color)`\n                : `var(--kul_button_primary_color)`,\n            kulValue: this.kulIcon,\n            kulSizeX: buttonStyling === 'floating' ? '1.75em' : '1.475em',\n            kulSizeY: buttonStyling === 'floating' ? '1.75em' : '1.475em',\n        };\n\n        const className: Record<string, boolean> = {\n            button: true,\n            'button--disabled': this.kulDisabled ? true : false,\n            [`button--${buttonStyling}`]: true,\n            'button--no-label':\n                !this.kulLabel || this.kulLabel === ' ' ? true : false,\n            'button--with-spinner': this.kulShowSpinner,\n        };\n\n        const labelClassName: Record<string, boolean> = {\n            button__label: true,\n            'content--hidden':\n                this.kulShowSpinner && !this.kulDisabled ? true : false,\n        };\n\n        const styleSpinnerContainer: Record<string, string> = {\n            '--kul_button_spinner_height': image.kulSizeY,\n        };\n\n        return [\n            <button\n                aria-label={this.rootElement.title}\n                class={className}\n                disabled={this.kulDisabled}\n                onBlur={(e) => this.onKulEvent(e, 'blur')}\n                onClick={(e) => this.onKulEvent(e, 'click')}\n                onFocus={(e) => this.onKulEvent(e, 'focus')}\n                onPointerDown={(e) => this.onKulEvent(e, 'pointerdown')}\n                style={styleSpinnerContainer}\n                type={this.kulType ? this.kulType : 'button'}\n            >\n                {this.#prepRipple()}\n                {this.kulTrailingIcon\n                    ? [this.#prepLabel(labelClassName), this.#prepIcon(image)]\n                    : [this.#prepIcon(image), this.#prepLabel(labelClassName)]}\n                {this.#prepSpinner()}\n            </button>,\n            this.#renderDropdown(image, buttonStyling),\n        ];\n    }\n\n    #renderIconButton(): VNode[] {\n        const isLarge = this.rootElement.classList.contains('large');\n        const isOn = this.#isOn();\n\n        const image: KulImagePropsInterface = {\n            kulColor: this.kulDisabled\n                ? `var(--kul_button_disabled_color)`\n                : `var(--kul_button_primary_color)`,\n            kulSizeX: isLarge ? 'calc(1.75em * 1.5)' : '1.75em',\n            kulSizeY: isLarge ? 'calc(1.75em * 1.5)' : '1.75em',\n        };\n\n        const className: Record<string, boolean> = {\n            'icon-button': true,\n            'button--disabled': this.kulDisabled ? true : false,\n            'icon-button--on': this.kulToggable && isOn ? true : false,\n            toggable: this.kulToggable ? true : false,\n            'icon-button--with-spinner': this.kulShowSpinner ? true : false,\n        };\n\n        const styleSpinnerContainer: Record<string, string> = {\n            '--kul_button_spinner_height': image.kulSizeY,\n            '--kul_button_spinner_width': image.kulSizeX,\n        };\n\n        const iconOff: string = this.kulIconOff\n            ? this.kulIconOff\n            : this.kulIcon + '_border';\n\n        return [\n            <button\n                aria-label={this.rootElement.title}\n                class={className}\n                disabled={this.kulDisabled}\n                onBlur={(e) => this.onKulEvent(e, 'blur')}\n                onClick={(e) => this.onKulEvent(e, 'click')}\n                onFocus={(e) => this.onKulEvent(e, 'focus')}\n                onPointerDown={(e) => this.onKulEvent(e, 'pointerdown')}\n                style={styleSpinnerContainer}\n                value={this.value}\n                type={this.kulType ? this.kulType : 'button'}\n            >\n                {this.#prepRipple()}\n                <kul-image\n                    class=\"icon-button__icon\"\n                    {...image}\n                    kulValue={\n                        this.kulToggable && !isOn ? iconOff : this.kulIcon\n                    }\n                />\n                {this.#prepSpinner()}\n            </button>,\n            this.#renderDropdown(image, 'icon'),\n        ];\n    }\n\n    #renderDropdown(image: KulImagePropsInterface, styling: string) {\n        if (!this.#isDropdown()) {\n            return;\n        }\n\n        const className: Record<string, boolean> = {\n            button: true,\n            [`button--${styling}`]: true,\n            ['button--dropdown']: true,\n            'button--disabled': this.kulDisabled ? true : false,\n        };\n\n        const eventHandler = (e: CustomEvent<KulListEventPayload>) => {\n            if (e.detail.eventType === 'click') {\n                this.onKulEvent(e, 'kul-event');\n                this.#listManager().close();\n            }\n        };\n\n        return (\n            <button\n                class={className}\n                data-cy={KulDataCyAttributes.DROPDOWN_BUTTON}\n                disabled={this.kulDisabled}\n                onClick={() => {\n                    this.#listManager().toggle();\n                }}\n                onPointerDown={(e) => this.onKulEvent(e, 'pointerdown', true)}\n                ref={(el) => {\n                    if (el) {\n                        this.#dropdown = el;\n                    }\n                }}\n            >\n                {this.#prepRipple(true)}\n                <kul-image {...image} kulValue={'--kul-dropdown-icon'} />\n                <kul-list\n                    class={KUL_DROPDOWN_CLASS}\n                    data-cy={KulDataCyAttributes.DROPDOWN_MENU}\n                    kulData={{ nodes: this.kulData.nodes[0].children }}\n                    onKul-list-event={eventHandler}\n                    ref={(el) => (this.#list = el)}\n                ></kul-list>\n            </button>\n        );\n    }\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        if (this.kulValue) {\n            this.value = 'on';\n        }\n        const firstNode = this.kulData?.nodes?.[0];\n        if (firstNode) {\n            if (!this.kulIcon) {\n                this.kulIcon = firstNode.icon;\n            }\n            if (!this.kulLabel) {\n                this.kulLabel = this.#kulManager.data.cell.stringify(\n                    firstNode.value\n                );\n            }\n        }\n\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        if (this.#rippleSurface) {\n            this.#kulManager.theme.ripple.setup(this.#rippleSurface);\n        }\n        if (this.#dropdownRippleSurface) {\n            this.#kulManager.theme.ripple.setup(this.#dropdownRippleSurface);\n        }\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const buttonStyling = this.#normalizedStyling();\n\n        const isIconButton: boolean = !!(\n            buttonStyling === 'icon' ||\n            (buttonStyling === 'raised' &&\n                this.kulIcon &&\n                (this.kulLabel === null || this.kulLabel === undefined))\n        );\n\n        if (!this.kulLabel && !this.kulIcon && !this.kulData) {\n            this.#kulManager.debug.logMessage(\n                this,\n                'Empty button.',\n                'informational'\n            );\n            return;\n        }\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    {isIconButton\n                        ? this.#renderIconButton()\n                        : this.#renderButton()}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        if (this.#list) {\n            this.#kulManager.dynamicPosition.unregister([this.#list]);\n        }\n        this.#kulManager.theme.unregister(this);\n    }\n}\n","import {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport { KulEventPayload } from '../../types/GenericTypes';\nimport { KulList } from './kul-list';\n\n/*-------------------------------------------------*/\n/*                   E v e n t s                   */\n/*-------------------------------------------------*/\nexport type KulListEvent =\n    | 'blur'\n    | 'click'\n    | 'focus'\n    | 'pointerdown'\n    | 'ready'\n    | 'delete';\nexport interface KulListEventPayload\n    extends KulEventPayload<KulList, KulListEvent, Event | CustomEvent> {\n    node: KulDataNode;\n}\n/*-------------------------------------------------*/\n/*                    P r o p s                    */\n/*-------------------------------------------------*/\nexport enum KulListProps {\n    kulData = 'The actual data of the list.',\n    kulEmptyLabel = 'Text displayed when the list is empty.',\n    kulEnableDeletions = 'Defines whether items can be removed from the list or not.',\n    kulNavigation = \"When true, enables items' navigation through arrow keys.\",\n    kulRipple = 'When set to true, the pointerdown event will trigger a ripple effect.',\n    kulSelectable = 'Defines whether items are selectable or not.',\n    kulStyle = 'Custom style of the component.',\n}\nexport interface KulListPropsInterface {\n    kulData?: KulDataDataset;\n    kulEmptyLabel?: string;\n    kulEnableDeletions?: boolean;\n    kulNavigation?: boolean;\n    kulRipple?: boolean;\n    kulSelectable?: boolean;\n    kulStyle?: string;\n}\n","@import './styles/kul-list-main.scss';\n@import './styles/kul-list-classes.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    getAssetPath,\n    h,\n    Host,\n    Listen,\n    Method,\n    Prop,\n    State,\n} from '@stencil/core';\nimport {\n    KulDataDataset,\n    KulDataNode,\n} from '../../managers/kul-data/kul-data-declarations';\nimport {\n    KulListEvent,\n    KulListEventPayload,\n    KulListProps,\n} from './kul-list-declarations';\nimport { kulManagerInstance } from '../../managers/kul-manager/kul-manager';\nimport { GenericObject, KulDataCyAttributes } from '../../types/GenericTypes';\nimport { getProps } from '../../utils/componentUtils';\nimport { KulDebugComponentInfo } from '../../managers/kul-debug/kul-debug-declarations';\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from '../../variables/GenericVariables';\nimport { KulLanguageGeneric } from '../../managers/kul-language/kul-language-declarations';\n\n@Component({\n    tag: 'kul-list',\n    styleUrl: 'kul-list.scss',\n    shadow: true,\n})\nexport class KulList {\n    /**\n     * References the root HTML element of the component (<kul-list>).\n     */\n    @Element() rootElement: HTMLKulListElement;\n\n    /*-------------------------------------------------*/\n    /*                   S t a t e s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Debug information.\n     */\n    @State() debugInfo: KulDebugComponentInfo = {\n        endTime: 0,\n        renderCount: 0,\n        renderEnd: 0,\n        renderStart: 0,\n        startTime: performance.now(),\n    };\n    /**\n     * The focused list item.\n     * @default undefined\n     */\n    @State() focused: number;\n    /**\n     * The selected list items.\n     * @default undefined\n     */\n    @State() selected: number;\n\n    /*-------------------------------------------------*/\n    /*                    P r o p s                    */\n    /*-------------------------------------------------*/\n\n    /**\n     * The data of the list.\n     * @default []\n     */\n    @Prop({ mutable: true }) kulData: KulDataDataset = null;\n    /**\n     * Text displayed when the list is empty.\n     * @default \"\"\n     */\n    @Prop() kulEmptyLabel = '';\n    /**\n     * Defines whether items can be removed from the list or not.\n     * @default false\n     */\n    @Prop() kulEnableDeletions = false;\n    /**\n     * When true, enables items' navigation through arrow keys.\n     * @default true\n     */\n    @Prop() kulNavigation = true;\n    /**\n     * When set to true, the pointerdown event will trigger a ripple effect.\n     * @default true\n     */\n    @Prop({ mutable: true, reflect: true }) kulRipple = true;\n    /**\n     * Defines whether items are selectable or not.\n     * @default true\n     */\n    @Prop() kulSelectable = true;\n    /**\n     * Custom style of the component.\n     * @default \"\"\n     */\n    @Prop({ mutable: true }) kulStyle = '';\n\n    /*-------------------------------------------------*/\n    /*       I n t e r n a l   V a r i a b l e s       */\n    /*-------------------------------------------------*/\n\n    #kulManager = kulManagerInstance();\n    #listItems: HTMLDivElement[] = [];\n    #rippleSurface: HTMLElement[] = [];\n\n    /*-------------------------------------------------*/\n    /*                   E v e n t s                   */\n    /*-------------------------------------------------*/\n\n    /**\n     * Describes event emitted.\n     */\n    @Event({\n        eventName: 'kul-list-event',\n        composed: true,\n        cancelable: false,\n        bubbles: true,\n    })\n    kulEvent: EventEmitter<KulListEventPayload>;\n\n    onKulEvent(\n        e: Event | CustomEvent,\n        eventType: KulListEvent,\n        node?: KulDataNode,\n        index = 0\n    ) {\n        switch (eventType) {\n            case 'blur':\n                this.focused = null;\n                break;\n            case 'click':\n                this.focused = index;\n                this.#handleSelection(index);\n                break;\n            case 'delete':\n                if (index > -1) {\n                    this.kulData.nodes.splice(index, 1);\n                    this.refresh();\n                }\n                break;\n            case 'focus':\n                this.focused = index;\n                break;\n            case 'pointerdown':\n                if (this.kulRipple) {\n                    this.#kulManager.theme.ripple.trigger(\n                        e as PointerEvent,\n                        this.#rippleSurface[index]\n                    );\n                }\n                break;\n        }\n\n        this.kulEvent.emit({\n            comp: this,\n            eventType,\n            id: this.rootElement.id,\n            originalEvent: e,\n            node,\n        });\n    }\n\n    /*-------------------------------------------------*/\n    /*                L i s t e n e r s                */\n    /*-------------------------------------------------*/\n\n    @Listen('keydown')\n    listenKeydown(e: KeyboardEvent) {\n        if (this.kulNavigation) {\n            switch (e.key) {\n                case 'ArrowDown':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.focusNext();\n                    break;\n                case 'ArrowUp':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.focusPrevious();\n                    break;\n                case 'Enter':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.#handleSelection(this.focused);\n                    break;\n            }\n        }\n    }\n\n    /*-------------------------------------------------*/\n    /*           P u b l i c   M e t h o d s           */\n    /*-------------------------------------------------*/\n\n    /**\n     * Focuses the next element of the list.\n     */\n    @Method()\n    async focusNext(): Promise<void> {\n        if (\n            isNaN(this.focused) ||\n            this.focused === null ||\n            this.focused === undefined\n        ) {\n            this.focused = this.selected;\n        } else {\n            this.focused++;\n        }\n        if (this.focused > this.#listItems.length - 1) {\n            this.focused = 0;\n        }\n        this.#listItems[this.focused].focus();\n    }\n    /**\n     * Focuses the previous element of the list.\n     */\n    @Method()\n    async focusPrevious(): Promise<void> {\n        if (\n            isNaN(this.focused) ||\n            this.focused === null ||\n            this.focused === undefined\n        ) {\n            this.focused = this.selected;\n        } else {\n            this.focused--;\n        }\n        if (this.focused < 0) {\n            this.focused = this.#listItems.length - 1;\n        }\n        this.#listItems[this.focused].focus();\n    }\n    /**\n     * Fetches debug information of the component's current state.\n     * @returns {Promise<KulDebugComponentInfo>} A promise that resolves with the debug information object.\n     */\n    @Method()\n    async getDebugInfo(): Promise<KulDebugComponentInfo> {\n        return this.debugInfo;\n    }\n    /**\n     * Used to retrieve component's props values.\n     * @param {boolean} descriptions - When provided and true, the result will be the list of props with their description.\n     * @returns {Promise<GenericObject>} List of props as object, each key will be a prop.\n     */\n    @Method()\n    async getProps(descriptions?: boolean): Promise<GenericObject> {\n        return getProps(this, KulListProps, descriptions);\n    }\n    /**\n     * Returns the selected node.\n     * @returns {Promise<KulListNode>} Selected node.\n     */\n    @Method()\n    async getSelected(): Promise<KulDataNode> {\n        return this.kulData.nodes[this.selected];\n    }\n    /**\n     * This method is used to trigger a new render of the component.\n     */\n    @Method()\n    async refresh(): Promise<void> {\n        forceUpdate(this);\n    }\n    /**\n     * Calls handleSelection private method to select the given item.\n     * @param {number} index - Zero-based index of the item that must be selected, when not provided the list will attempt to select the focused element.\n     */\n    @Method()\n    async selectNode(index?: number): Promise<void> {\n        if (index === undefined) {\n            index = this.focused;\n        }\n        this.#handleSelection(index);\n    }\n\n    /*-------------------------------------------------*/\n    /*           P r i v a t e   M e t h o d s         */\n    /*-------------------------------------------------*/\n\n    #handleSelection(index: number): void {\n        if (\n            this.kulSelectable &&\n            index !== null &&\n            index !== undefined &&\n            !isNaN(index)\n        ) {\n            this.selected = index;\n        }\n    }\n\n    #prepDeleteIcon(node: KulDataNode) {\n        const path = getAssetPath(`./assets/svg/clear.svg`);\n        const style = {\n            mask: `url('${path}') no-repeat center`,\n            webkitMask: `url('${path}') no-repeat center`,\n        };\n        return (\n            <div\n                class=\"delete\"\n                data-cy={KulDataCyAttributes.BUTTON}\n                onClick={(e) => {\n                    const index = this.kulData?.nodes?.indexOf(node);\n                    this.onKulEvent(e, 'delete', node, index);\n                }}\n            >\n                <div\n                    class=\"delete__icon\"\n                    key={node.id + '_delete'}\n                    style={style}\n                ></div>\n            </div>\n        );\n    }\n\n    #prepIcon(node: KulDataNode) {\n        const path = getAssetPath(`./assets/svg/${node.icon}.svg`);\n        const style = {\n            mask: `url('${path}') no-repeat center`,\n            webkitMask: `url('${path}') no-repeat center`,\n        };\n        return <div class=\"node__icon\" style={style}></div>;\n    }\n\n    #prepNode(node: KulDataNode, index: number) {\n        const isFocused =\n            this.focused ===\n            this.kulData.nodes.findIndex((n) => n.id === node.id);\n        const isSelected =\n            this.selected ===\n            this.kulData.nodes.findIndex((n) => n.id === node.id);\n        const className = {\n            node: true,\n            'node--focused': isFocused,\n            'node--has-description': !!node.description,\n            'node--selected': isSelected,\n        };\n        return (\n            <li class=\"list-item\">\n                {this.kulEnableDeletions ? this.#prepDeleteIcon(node) : null}\n                <div\n                    aria-selected={isSelected}\n                    aria-checked={isSelected}\n                    class={className}\n                    data-cy={KulDataCyAttributes.NODE}\n                    data-index={index.toString()}\n                    onBlur={(e) => this.onKulEvent(e, 'blur', node, index)}\n                    onClick={(e) => this.onKulEvent(e, 'click', node, index)}\n                    onFocus={(e) => this.onKulEvent(e, 'focus', node, index)}\n                    onPointerDown={(e) =>\n                        this.onKulEvent(e, 'pointerdown', node, index)\n                    }\n                    ref={(el) => {\n                        if (el) {\n                            this.#listItems.push(el);\n                        }\n                    }}\n                    role={'option'}\n                    tabindex={isSelected ? '0' : '-1'}\n                >\n                    <div\n                        ref={(el) => {\n                            if (this.kulRipple && el) {\n                                this.#rippleSurface.push(el);\n                            }\n                        }}\n                    ></div>\n                    {node.icon ? this.#prepIcon(node) : null}\n                    <span class=\"node__text\">\n                        {this.#prepTitle(node)}\n                        {this.#prepSubtitle(node)}\n                    </span>\n                </div>\n            </li>\n        );\n    }\n\n    #prepSubtitle(node: KulDataNode) {\n        return node.description ? (\n            <div class=\"node__subtitle\">{node.description}</div>\n        ) : undefined;\n    }\n\n    #prepTitle(node: KulDataNode) {\n        return String(node.value).valueOf() ? (\n            <div class=\"node__title\">{String(node.value).valueOf()}</div>\n        ) : undefined;\n    }\n\n    /*-------------------------------------------------*/\n    /*          L i f e c y c l e   H o o k s          */\n    /*-------------------------------------------------*/\n\n    componentWillLoad() {\n        this.#kulManager.theme.register(this);\n    }\n\n    componentDidLoad() {\n        if (this.#rippleSurface?.length) {\n            this.#rippleSurface.forEach((el) => {\n                this.#kulManager.theme.ripple.setup(el);\n            });\n        }\n        this.onKulEvent(new CustomEvent('ready'), 'ready');\n        this.#kulManager.debug.updateDebugInfo(this, 'did-load');\n    }\n\n    componentWillRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'will-render');\n    }\n\n    componentDidRender() {\n        this.#kulManager.debug.updateDebugInfo(this, 'did-render');\n    }\n\n    render() {\n        const isEmpty = !!!this.kulData?.nodes?.length;\n        this.#listItems = [];\n        const className = {\n            list: true,\n            'list--empty': isEmpty,\n            'list--selectable': this.kulSelectable,\n        };\n\n        return (\n            <Host>\n                {this.kulStyle ? (\n                    <style id={KUL_STYLE_ID}>\n                        {this.#kulManager.theme.setKulStyle(this)}\n                    </style>\n                ) : undefined}\n                <div id={KUL_WRAPPER_ID}>\n                    {isEmpty ? (\n                        <div class=\"empty-data\">\n                            <div class=\"empty-data__text\">\n                                {this.kulEmptyLabel ||\n                                    this.#kulManager.language.translate(\n                                        KulLanguageGeneric.EMPTY_DATA\n                                    )}\n                            </div>\n                        </div>\n                    ) : (\n                        <ul\n                            aria-multiselectable={'false'}\n                            class={className}\n                            role={'listbox'}\n                        >\n                            {this.kulData.nodes.map((item, index) =>\n                                this.#prepNode(item, index)\n                            )}\n                        </ul>\n                    )}\n                </div>\n            </Host>\n        );\n    }\n\n    disconnectedCallback() {\n        this.#kulManager.theme.unregister(this);\n    }\n}\n"],"version":3}