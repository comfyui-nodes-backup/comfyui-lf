{"file":"kul-slider.entry.js","mappings":"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","names":[],"sources":["src/components/kul-slider/kul-slider-declarations.ts","src/components/kul-slider/kul-slider.scss?tag=kul-slider&encapsulation=shadow","src/components/kul-slider/kul-slider.tsx"],"sourcesContent":["import { KulEventPayload } from \"../../types/GenericTypes\";\n\n//#region Events\nexport type KulSliderEvent =\n  | \"blur\"\n  | \"change\"\n  | \"focus\"\n  | \"input\"\n  | \"pointerdown\"\n  | \"ready\"\n  | \"unmount\";\nexport interface KulSliderEventPayload\n  extends KulEventPayload<\"KulSlider\", KulSliderEvent> {\n  value: KulSliderValue;\n}\n//#endregion\n\n//#region State\nexport interface KulSliderValue {\n  display: number;\n  real: number;\n}\n//#endregion\n\n//#region Props\nexport enum KulSliderProps {\n  kulDisabled = \"When true, the component is disabled, preventing user interaction.\",\n  kulLabel = \"Defines text to display as a label for the slider.\",\n  kulLeadingLabel = \"When true, displays the label before the slider component.\",\n  kulMax = \"The maximum value allowed by the slider.\",\n  kulMin = \"The minimum value allowed by the slider.\",\n  kulRipple = \"Adds a ripple effect when interacting with the slider.\",\n  kulStep = \"Sets the increment or decrement steps for the slider.\",\n  kulStyle = \"Sets a custom CSS style for the component.\",\n  kulValue = \"The initial numeric value of the slider within the defined range.\",\n}\nexport interface KulSliderPropsInterface {\n  kulDisabled?: boolean;\n  kulLabel?: string;\n  kulLeadingLabel?: boolean;\n  kulMax?: number;\n  kulMin?: number;\n  kulRipple?: boolean;\n  kulStep?: number;\n  kulStyle?: string;\n  kulValue?: number;\n}\n//#endregion\n","@import \"./styles/kul-slider-main.scss\";\n@import \"./styles/kul-slider-classes.scss\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from \"@stencil/core\";\n\nimport {\n  KulSliderEvent,\n  KulSliderEventPayload,\n  KulSliderProps,\n  KulSliderValue,\n} from \"./kul-slider-declarations\";\nimport { KulDebugLifecycleInfo } from \"../../managers/kul-debug/kul-debug-declarations\";\nimport { kulManagerInstance } from \"../../managers/kul-manager/kul-manager\";\nimport {\n  KulDataCyAttributes,\n  type GenericObject,\n} from \"../../types/GenericTypes\";\nimport { getProps } from \"../../utils/componentUtils\";\nimport { KUL_STYLE_ID, KUL_WRAPPER_ID } from \"../../variables/GenericVariables\";\n\n@Component({\n  tag: \"kul-slider\",\n  styleUrl: \"kul-slider.scss\",\n  shadow: true,\n})\nexport class KulSlider {\n  //#region Root Element\n  @Element() rootElement: HTMLKulSliderElement;\n  //#endregion\n  //#region States\n  /**\n   * Debug information.\n   */\n  @State() debugInfo: KulDebugLifecycleInfo = {\n    endTime: 0,\n    renderCount: 0,\n    renderEnd: 0,\n    renderStart: 0,\n    startTime: performance.now(),\n  };\n  /**\n   * The value of the component.\n   */\n  @State() value: KulSliderValue = { display: 0, real: 0 };\n  //#endregion\n  //#region Props\n  /**\n   * When true, the component is disabled, preventing user interaction.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulDisabled = false;\n  /**\n   * Defines text to display as a label for the slider.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulLabel = \"\";\n  /**\n   * When true, displays the label before the slider component. Defaults to `false`.\n   * @default false\n   */\n  @Prop({ mutable: true, reflect: true }) kulLeadingLabel = false;\n  /**\n   * The maximum value allowed by the slider.\n   * @default 100\n   */\n  @Prop({ mutable: false }) kulMax = 100;\n  /**\n   * The minimum value allowed by the slider.\n   * @default 0\n   */\n  @Prop({ mutable: false }) kulMin = 0;\n  /**\n   * Sets the increment or decrement steps when moving the slider.\n   * @default 1\n   */\n  @Prop({ mutable: false }) kulStep = 1;\n  /**\n   * Adds a ripple effect when interacting with the slider.\n   * @default true\n   */\n  @Prop({ mutable: true, reflect: true }) kulRipple = true;\n  /**\n   * Custom CSS style to apply to the slider component.\n   * @default \"\"\n   */\n  @Prop({ mutable: true, reflect: true }) kulStyle = \"\";\n  /**\n   * The initial numeric value for the slider within the defined range.\n   * @default 50\n   */\n  @Prop({ mutable: true, reflect: true }) kulValue = 50;\n  //#endregion\n  //#region Internal variables\n  #input: HTMLInputElement;\n  #kulManager = kulManagerInstance();\n  #rippleSurface: HTMLElement;\n  //#endregion\n  //#region Events\n  /**\n   * Describes event emitted for various slider interactions like click, focus, blur.\n   */\n  @Event({\n    eventName: \"kul-slider-event\",\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  })\n  kulEvent: EventEmitter<KulSliderEventPayload>;\n  onKulEvent(e: Event | CustomEvent, eventType: KulSliderEvent) {\n    switch (eventType) {\n      case \"change\":\n        this.setValue(+this.#input.value);\n        this.refresh();\n        break;\n      case \"input\":\n        this.value.display = +this.#input.value;\n        this.refresh();\n        break;\n      case \"pointerdown\":\n        if (this.kulRipple) {\n          this.#kulManager.theme.ripple.trigger(\n            e as PointerEvent,\n            this.#rippleSurface,\n          );\n        }\n    }\n    this.kulEvent.emit({\n      comp: this,\n      eventType,\n      id: this.rootElement.id,\n      originalEvent: e,\n      value: this.value,\n    });\n  }\n  //#endregion\n  //#region Public methods\n  /**\n   * Fetches debug information of the component's current state.\n   * @returns {Promise<KulDebugLifecycleInfo>} A promise that resolves with the debug information object.\n   */\n  @Method()\n  async getDebugInfo(): Promise<KulDebugLifecycleInfo> {\n    return this.debugInfo;\n  }\n  /**\n   * Used to retrieve component's properties and descriptions.\n   * @param {boolean} descriptions - When true, includes descriptions for each property.\n   * @returns {Promise<GenericObject>} Promise resolved with an object containing the component's properties.\n   */\n  @Method()\n  async getProps(descriptions?: boolean): Promise<GenericObject> {\n    return getProps(this, KulSliderProps, descriptions);\n  }\n  /**\n   * Used to retrieve the component's current state.\n   * @returns {Promise<KulSliderState>} Promise resolved with the current state of the component.\n   */\n  @Method()\n  async getValue(): Promise<KulSliderValue> {\n    return this.value;\n  }\n  /**\n   * This method is used to trigger a new render of the component.\n   */\n  @Method()\n  async refresh(): Promise<void> {\n    forceUpdate(this);\n  }\n  /**\n   * Sets the component's state.\n   * @param {KulSliderState} value - The new state to be set on the component.\n   * @returns {Promise<void>}\n   */\n  @Method()\n  async setValue(value: number): Promise<void> {\n    this.value = { display: value, real: value };\n  }\n  /**\n   * Initiates the unmount sequence, which removes the component from the DOM after a delay.\n   * @param {number} ms - Number of milliseconds\n   */\n  @Method()\n  async unmount(ms: number = 0): Promise<void> {\n    setTimeout(() => {\n      this.onKulEvent(new CustomEvent(\"unmount\"), \"unmount\");\n      this.rootElement.remove();\n    }, ms);\n  }\n  //#endregion\n  //#region Lifecycle hooks\n  componentWillLoad() {\n    if (this.kulValue) {\n      this.setValue(this.kulValue);\n    }\n\n    this.#kulManager.theme.register(this);\n  }\n  componentDidLoad() {\n    if (this.#rippleSurface) {\n      this.#kulManager.theme.ripple.setup(this.#rippleSurface);\n    }\n    this.onKulEvent(new CustomEvent(\"ready\"), \"ready\");\n    this.#kulManager.debug.updateDebugInfo(this, \"did-load\");\n  }\n  componentWillRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"will-render\");\n  }\n  componentDidRender() {\n    this.#kulManager.debug.updateDebugInfo(this, \"did-render\");\n  }\n  render() {\n    const className: Record<string, boolean> = {\n      slider: true,\n      \"slider--disabled\": this.kulDisabled,\n    };\n    const formClassName: Record<string, boolean> = {\n      \"form-field\": true,\n      \"form-field--align-end\": this.kulLeadingLabel,\n    };\n\n    return (\n      <Host>\n        {this.kulStyle ? (\n          <style id={KUL_STYLE_ID}>\n            {this.#kulManager.theme.setKulStyle(this)}\n          </style>\n        ) : undefined}\n        <div id={KUL_WRAPPER_ID}>\n          <div class={formClassName}>\n            <div\n              class={className}\n              style={{\n                \"--kul_slider_value\": `${((this.value.display - this.kulMin) / (this.kulMax - this.kulMin)) * 100}%`,\n              }}\n            >\n              <input\n                type=\"range\"\n                class=\"slider__native-control\"\n                data-cy={KulDataCyAttributes.INPUT}\n                min={this.kulMin}\n                max={this.kulMax}\n                step={this.kulStep}\n                value={this.value.real}\n                disabled={this.kulDisabled}\n                onBlur={(e) => {\n                  this.onKulEvent(e, \"blur\");\n                }}\n                onChange={(e) => {\n                  this.onKulEvent(e, \"change\");\n                }}\n                onFocus={(e) => {\n                  this.onKulEvent(e, \"focus\");\n                }}\n                onInput={(e) => {\n                  this.onKulEvent(e, \"input\");\n                }}\n                onPointerDown={(e) => {\n                  this.onKulEvent(e, \"pointerdown\");\n                }}\n                ref={(el) => {\n                  if (el) {\n                    this.#input = el;\n                  }\n                }}\n              />\n              <div class=\"slider__track\">\n                <div class=\"slider__thumb-underlay\">\n                  <div\n                    class=\"slider__thumb\"\n                    ref={(el) => {\n                      if (this.kulRipple) {\n                        this.#rippleSurface = el;\n                      }\n                    }}\n                  ></div>\n                </div>\n              </div>\n              <span class=\"slider__value\">{this.value.display}</span>\n            </div>\n            <label class=\"form-field__label\">{this.kulLabel}</label>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n  disconnectedCallback() {\n    this.#kulManager.theme.unregister(this);\n  }\n}\n//#endregion\n"],"version":3}