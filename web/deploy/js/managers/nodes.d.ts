import { BaseWidgetCallback } from '../types/widgets';
export declare class LFNodes {
    eventHandler: {
        LF_BlurImages: (event: CustomEvent<import("../types/events").BlurImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_Boolean: (event: CustomEvent<import("../types/events").BooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_CharacterImpersonator: (event: CustomEvent<import("../types/events").CharacterImpersonatorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_CheckpointSelector: (event: CustomEvent<import("../types/events").CheckpointSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_CivitAIMetadataSetup: (event: CustomEvent<import("../types/events").CivitAIMetadataSetupPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_ClarityEffect: (event: CustomEvent<import("../types/events").ClarityEffectPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
        LF_CompareImages: (event: CustomEvent<import("../types/events").CompareImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
        LF_DisplayBoolean: (event: CustomEvent<import("../types/events").DisplayBooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayFloat: (event: CustomEvent<import("../types/events").DisplayFloatPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayInteger: (event: CustomEvent<import("../types/events").DisplayIntegerPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayJSON: (event: CustomEvent<import("../types/events").DisplayJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayPrimitiveAsJSON: (event: CustomEvent<import("../types/events").DisplayPrimitiveAsJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayString: (event: CustomEvent<import("../types/events").DisplayStringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_EmbeddingSelector: (event: CustomEvent<import("../types/events").EmbeddingSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_Extractor: (event: CustomEvent<import("../types/events").ExtractorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_Float: (event: CustomEvent<import("../types/events").FloatPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_ImageClassifier: (event: CustomEvent<import("../types/events").ImageClassifierPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_ImageHistogram: (event: CustomEvent<import("../types/events").ImageHistogramPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
        LF_ImageListFromJSON: (event: CustomEvent<import("../types/events").ImageListFromJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_Integer: (event: CustomEvent<import("../types/events").IntegerPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_IsLandscape: (event: CustomEvent<import("../types/events").IsLandscapePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_KeywordCounter: (event: CustomEvent<import("../types/events").KeywordCounterPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.countBarChart>) => void;
        LF_LoadFileOnce: (event: CustomEvent<import("../types/events").LoadFileOncePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_LoadImages: (event: CustomEvent<import("../types/events").LoadImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_LoadLoraTags: (event: CustomEvent<import("../types/events").LoadLoraTagsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.cardsWithChip>) => void;
        LF_LoraAndEmbeddingSelector: (event: CustomEvent<import("../types/events").LoraAndEmbeddingSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_LoraSelector: (event: CustomEvent<import("../types/events").LoraSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_Lora2Prompt: (event: CustomEvent<import("../types/events").Lora2PromptPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_LoraTag2Prompt: (event: CustomEvent<import("../types/events").LoraTag2PromptPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_MathOperation: (event: CustomEvent<import("../types/events").MathOperationPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_MultipleImageResizeForWeb: (event: CustomEvent<import("../types/events").MultipleImageResizeForWebPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_Notify: (event: CustomEvent<import("../types/events").NotifyPayload>) => void;
        LF_RandomBoolean: (event: CustomEvent<import("../types/events").RandomBooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
        LF_ResizeImageByEdge: (event: CustomEvent<import("../types/events").ResizeImageByEdgePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResizeImageToDimension: (event: CustomEvent<import("../types/events").ResizeImageToDimensionPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResizeImageToSquare: (event: CustomEvent<import("../types/events").ResizeImageToSquarePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResolutionSwitcher: (event: CustomEvent<import("../types/events").ResolutionSwitcherPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
        LF_SamplerSelector: (event: CustomEvent<import("../types/events").SamplerSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SaveImageForCivitAI: (event: CustomEvent<import("../types/events").SaveImageForCivitAIPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_SaveJSON: (event: CustomEvent<import("../types/events").SaveJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_SchedulerSelector: (event: CustomEvent<import("../types/events").SchedulerSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SequentialSeedsGenerator: (event: CustomEvent<import("../types/events").SequentialSeedsGeneratorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_ShuffleJSONKeys: (event: CustomEvent<import("../types/events").ShuffleJSONKeysPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_Something2Number: (event: CustomEvent<import("../types/events").Something2NumberPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_Something2String: (event: CustomEvent<import("../types/events").Something2StringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_SortJSONKeys: (event: CustomEvent<import("../types/events").SortJSONKeysPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_String: (event: CustomEvent<import("../types/events").StringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SwitchFloat: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchImage: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchInteger: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchJSON: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchString: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_UpdateUsageStatistics: (event: CustomEvent<import("../types/events").UpdateUsageStatisticsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_UpscaleModelSelector: (event: CustomEvent<import("../types/events").UpscaleModelSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_UrandomSeedGenerator: (event: CustomEvent<import("../types/events").UrandomSeedGeneratorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_UsageStatistics: (event: CustomEvent<import("../types/events").UpdateUsageStatisticsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
        LF_VAESelector: (event: CustomEvent<import("../types/events").VAESelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_WriteJSON: (event: CustomEvent<import("../types/events").WriteJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.jsonInput>) => void;
    };
    register: {
        LF_BlurImages: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_Boolean: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_CharacterImpersonator: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_CheckpointSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_CivitAIMetadataSetup: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_ClarityEffect: (setW: import("../types/widgets").CompareWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
        LF_CompareImages: (setW: import("../types/widgets").CompareWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
        LF_ControlPanel: (setW: import("../types/widgets").ControlPanelWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.controlPanel>) => void;
        LF_DisplayBoolean: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayFloat: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayInteger: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayJSON: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_DisplayPrimitiveAsJSON: (setW: import("../types/widgets").CodeWidgetSetter) => void;
        LF_DisplayString: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_EmbeddingSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_Extractor: (setW: import("../types/widgets").CodeWidgetSetter) => void;
        LF_Float: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_ImageClassifier: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_ImageHistogram: (setW: import("../types/widgets").TabBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
        LF_ImageListFromJSON: (setW: import("../types/widgets").MasonryWidgetSetter) => void;
        LF_Integer: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_IsLandscape: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_KeywordCounter: (setW: import("../types/widgets").CountBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.countBarChart>) => void;
        LF_KeywordToggleFromJSON: (setW: import("../types/widgets").ChipWidgetSetter) => void;
        LF_LLMChat: (setW: import("../types/widgets").ChatWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.chat>) => void;
        LF_LLMMessenger: (setW: import("../types/widgets").MessengerWidgetSetter) => void;
        LF_LoadFileOnce: (setW: import("../types/widgets").HistoryWidgetSetter) => void;
        LF_LoadImages: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_LoadLoraTags: (setW: import("../types/widgets").CardsWithChipWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.cardsWithChip>) => void;
        LF_LoraAndEmbeddingSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_LoadMetadata: (setW: import("../types/widgets").UploadWidgetSetter) => void;
        LF_LoraSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
        LF_Lora2Prompt: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_LoraTag2Prompt: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_MathOperation: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_MultipleImageResizeForWeb: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_Notify: () => void;
        LF_RandomBoolean: (setW: import("../types/widgets").RollViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
        LF_ResizeImageByEdge: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResizeImageToDimension: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResizeImageToSquare: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_ResolutionSwitcher: (setW: import("../types/widgets").RollViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
        LF_SamplerSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SaveImageForCivitAI: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
        LF_SaveJSON: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_SchedulerSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SequentialSeedsGenerator: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_ShuffleJSONKeys: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_Something2Number: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_Something2String: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_SortJSONKeys: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_String: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_SwitchFloat: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchImage: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchInteger: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchJSON: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_SwitchString: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
        LF_UpdateUsageStatistics: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
        LF_UpscaleModelSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_UrandomSeedGenerator: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
        LF_UsageStatistics: (setW: import("../types/widgets").TabBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
        LF_VAESelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
        LF_WriteJSON: (setW: import("../types/widgets").JsonInputWidgetSetter) => void;
    };
    get: {
        eventHandlers: {
            LF_BlurImages: (event: CustomEvent<import("../types/events").BlurImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_Boolean: (event: CustomEvent<import("../types/events").BooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_CharacterImpersonator: (event: CustomEvent<import("../types/events").CharacterImpersonatorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_CheckpointSelector: (event: CustomEvent<import("../types/events").CheckpointSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_CivitAIMetadataSetup: (event: CustomEvent<import("../types/events").CivitAIMetadataSetupPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_ClarityEffect: (event: CustomEvent<import("../types/events").ClarityEffectPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
            LF_CompareImages: (event: CustomEvent<import("../types/events").CompareImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
            LF_DisplayBoolean: (event: CustomEvent<import("../types/events").DisplayBooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayFloat: (event: CustomEvent<import("../types/events").DisplayFloatPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayInteger: (event: CustomEvent<import("../types/events").DisplayIntegerPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayJSON: (event: CustomEvent<import("../types/events").DisplayJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayPrimitiveAsJSON: (event: CustomEvent<import("../types/events").DisplayPrimitiveAsJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayString: (event: CustomEvent<import("../types/events").DisplayStringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_EmbeddingSelector: (event: CustomEvent<import("../types/events").EmbeddingSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_Extractor: (event: CustomEvent<import("../types/events").ExtractorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_Float: (event: CustomEvent<import("../types/events").FloatPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_ImageClassifier: (event: CustomEvent<import("../types/events").ImageClassifierPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_ImageHistogram: (event: CustomEvent<import("../types/events").ImageHistogramPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
            LF_ImageListFromJSON: (event: CustomEvent<import("../types/events").ImageListFromJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_Integer: (event: CustomEvent<import("../types/events").IntegerPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_IsLandscape: (event: CustomEvent<import("../types/events").IsLandscapePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_KeywordCounter: (event: CustomEvent<import("../types/events").KeywordCounterPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.countBarChart>) => void;
            LF_LoadFileOnce: (event: CustomEvent<import("../types/events").LoadFileOncePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_LoadImages: (event: CustomEvent<import("../types/events").LoadImagesPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_LoadLoraTags: (event: CustomEvent<import("../types/events").LoadLoraTagsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.cardsWithChip>) => void;
            LF_LoraAndEmbeddingSelector: (event: CustomEvent<import("../types/events").LoraAndEmbeddingSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_LoraSelector: (event: CustomEvent<import("../types/events").LoraSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_Lora2Prompt: (event: CustomEvent<import("../types/events").Lora2PromptPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_LoraTag2Prompt: (event: CustomEvent<import("../types/events").LoraTag2PromptPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_MathOperation: (event: CustomEvent<import("../types/events").MathOperationPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_MultipleImageResizeForWeb: (event: CustomEvent<import("../types/events").MultipleImageResizeForWebPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_Notify: (event: CustomEvent<import("../types/events").NotifyPayload>) => void;
            LF_RandomBoolean: (event: CustomEvent<import("../types/events").RandomBooleanPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
            LF_ResizeImageByEdge: (event: CustomEvent<import("../types/events").ResizeImageByEdgePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResizeImageToDimension: (event: CustomEvent<import("../types/events").ResizeImageToDimensionPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResizeImageToSquare: (event: CustomEvent<import("../types/events").ResizeImageToSquarePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResolutionSwitcher: (event: CustomEvent<import("../types/events").ResolutionSwitcherPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
            LF_SamplerSelector: (event: CustomEvent<import("../types/events").SamplerSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SaveImageForCivitAI: (event: CustomEvent<import("../types/events").SaveImageForCivitAIPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_SaveJSON: (event: CustomEvent<import("../types/events").SaveJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_SchedulerSelector: (event: CustomEvent<import("../types/events").SchedulerSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SequentialSeedsGenerator: (event: CustomEvent<import("../types/events").SequentialSeedsGeneratorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_ShuffleJSONKeys: (event: CustomEvent<import("../types/events").ShuffleJSONKeysPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_Something2Number: (event: CustomEvent<import("../types/events").Something2NumberPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_Something2String: (event: CustomEvent<import("../types/events").Something2StringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_SortJSONKeys: (event: CustomEvent<import("../types/events").SortJSONKeysPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_String: (event: CustomEvent<import("../types/events").StringPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SwitchFloat: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchImage: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchInteger: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchJSON: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchString: (event: CustomEvent<import("../types/events").SwitchImagePayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_UpdateUsageStatistics: (event: CustomEvent<import("../types/events").UpdateUsageStatisticsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_UpscaleModelSelector: (event: CustomEvent<import("../types/events").UpscaleModelSelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_UrandomSeedGenerator: (event: CustomEvent<import("../types/events").UrandomSeedGeneratorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_UsageStatistics: (event: CustomEvent<import("../types/events").UpdateUsageStatisticsPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
            LF_VAESelector: (event: CustomEvent<import("../types/events").VAESelectorPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_WriteJSON: (event: CustomEvent<import("../types/events").WriteJSONPayload>, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.jsonInput>) => void;
        };
        registrations: {
            LF_BlurImages: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_Boolean: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_CharacterImpersonator: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_CheckpointSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_CivitAIMetadataSetup: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_ClarityEffect: (setW: import("../types/widgets").CompareWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
            LF_CompareImages: (setW: import("../types/widgets").CompareWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.compare>) => void;
            LF_ControlPanel: (setW: import("../types/widgets").ControlPanelWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.controlPanel>) => void;
            LF_DisplayBoolean: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayFloat: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayInteger: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayJSON: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_DisplayPrimitiveAsJSON: (setW: import("../types/widgets").CodeWidgetSetter) => void;
            LF_DisplayString: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_EmbeddingSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_Extractor: (setW: import("../types/widgets").CodeWidgetSetter) => void;
            LF_Float: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_ImageClassifier: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_ImageHistogram: (setW: import("../types/widgets").TabBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
            LF_ImageListFromJSON: (setW: import("../types/widgets").MasonryWidgetSetter) => void;
            LF_Integer: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_IsLandscape: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_KeywordCounter: (setW: import("../types/widgets").CountBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.countBarChart>) => void;
            LF_KeywordToggleFromJSON: (setW: import("../types/widgets").ChipWidgetSetter) => void;
            LF_LLMChat: (setW: import("../types/widgets").ChatWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.chat>) => void;
            LF_LLMMessenger: (setW: import("../types/widgets").MessengerWidgetSetter) => void;
            LF_LoadFileOnce: (setW: import("../types/widgets").HistoryWidgetSetter) => void;
            LF_LoadImages: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_LoadLoraTags: (setW: import("../types/widgets").CardsWithChipWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.cardsWithChip>) => void;
            LF_LoraAndEmbeddingSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_LoadMetadata: (setW: import("../types/widgets").UploadWidgetSetter) => void;
            LF_LoraSelector: (setW: import("../types/widgets").CardWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.card>) => void;
            LF_Lora2Prompt: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_LoraTag2Prompt: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_MathOperation: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_MultipleImageResizeForWeb: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_Notify: () => void;
            LF_RandomBoolean: (setW: import("../types/widgets").RollViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
            LF_ResizeImageByEdge: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResizeImageToDimension: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResizeImageToSquare: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_ResolutionSwitcher: (setW: import("../types/widgets").RollViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.rollViewer>) => void;
            LF_SamplerSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SaveImageForCivitAI: (setW: import("../types/widgets").MasonryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.masonry>) => void;
            LF_SaveJSON: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_SchedulerSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SequentialSeedsGenerator: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_ShuffleJSONKeys: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_Something2Number: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_Something2String: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_SortJSONKeys: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_String: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_SwitchFloat: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchImage: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchInteger: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchJSON: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_SwitchString: (setW: import("../types/widgets").BooleanViewerWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.booleanViewer>) => void;
            LF_UpdateUsageStatistics: (setW: import("../types/widgets").CodeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.code>) => void;
            LF_UpscaleModelSelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_UrandomSeedGenerator: (setW: import("../types/widgets").TreeWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tree>) => void;
            LF_UsageStatistics: (setW: import("../types/widgets").TabBarChartWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.tabBarChart>) => void;
            LF_VAESelector: (setW: import("../types/widgets").HistoryWidgetSetter, addW: BaseWidgetCallback<import("../types/widgets").CustomWidgetName.history>) => void;
            LF_WriteJSON: (setW: import("../types/widgets").JsonInputWidgetSetter) => void;
        };
    };
}
